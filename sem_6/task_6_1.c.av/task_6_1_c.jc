
axiomatic Padding {

  logic type padding
  
}

tag voidP = {
}

type voidP = [voidP]

tag charP = voidP with {
  int8 charM: 8;
}

tag intP = {
  int32 intM: 32;
}

type intP = [intP]

predicate sorted{L}(intP[..] array, integer first, integer after_last) =
\at((\forall integer i;
      (\forall integer j;
        ((((first <= i) && (i <= j)) && (j < after_last)) ==>
          ((array + i).intM <= (array + j).intM)))),L)

axiomatic CountTheory {

  logic integer count{L}(intP[..] array_0, integer first_0,
                         integer after_last_0, integer elem)
   
  axiom empty_count{L} :
  (_C_1 : (\forall integer first_1;
            (\forall integer after_last_1;
              (\forall integer elem_0;
                (\forall intP[..] array_1;
                  ((first_1 >= after_last_1) ==>
                    (count{L}(array_1, first_1, after_last_1, elem_0) == 0)))))))
   
  axiom one_count{L} :
  (_C_2 : (\forall integer first_2;
            (\forall integer after_last_2;
              (\forall integer elem_1;
                (\forall intP[..] array_2;
                  (((first_2 + 1) == after_last_2) ==>
                    (count{L}(array_2, first_2, after_last_2, elem_1) ==
                      (if (((array_2 + first_2).intM :> integer) == elem_1) then 1 else 0))))))))
   
  axiom split_count{L} :
  (_C_3 : (\forall integer first_3;
            (\forall integer after_last_3;
              (\forall integer elem_2;
                (\forall integer middle;
                  (\forall intP[..] array_3;
                    (((first_3 <= middle) && (middle <= after_last_3)) ==>
                      (count{L}(array_3, first_3, after_last_3, elem_2) ==
                        (count{L}(array_3, first_3, middle, elem_2) +
                          count{L}(array_3, middle, after_last_3, elem_2))))))))))
  
}

unit merge(intP[..] first, intP[..] second, intP[..] result, int32 len1,
           int32 len2)
  requires ((_C_89 : (len1 >= (0 :> int32))) &&
             ((_C_90 : (len2 >= (0 :> int32))) &&
               ((_C_91 : \at((if (\at(0,Here) <=
                                   \at(((len1 :> integer) - 1),Here)) then 
                             (((\offset_min(\at(first,Here)) <= \at(0,Here)) &&
                                (\offset_max(\at(first,Here)) >=
                                  \at(((len1 :> integer) - 1),Here))) &&
                               (\forall integer __framac_tmp1;
                                 (((\at(0,Here) <= __framac_tmp1) &&
                                    (__framac_tmp1 <=
                                      \at(((len1 :> integer) - 1),Here))) ==>
                                   true))) else true),Here)) &&
                 ((_C_92 : \at((if (\at(0,Here) <=
                                     \at(((len2 :> integer) - 1),Here)) then 
                               (((\offset_min(\at(second,Here)) <=
                                   \at(0,Here)) &&
                                  (\offset_max(\at(second,Here)) >=
                                    \at(((len2 :> integer) - 1),Here))) &&
                                 (\forall integer __framac_tmp2;
                                   (((\at(0,Here) <= __framac_tmp2) &&
                                      (__framac_tmp2 <=
                                        \at(((len2 :> integer) - 1),Here))) ==>
                                     true))) else true),Here)) &&
                   ((_C_93 : sorted{Here}(first, 0, (len1 :> integer))) &&
                     ((_C_94 : sorted{Here}(second, 0, (len2 :> integer))) &&
                       ((_C_95 : \at((if (\at(0,Here) <=
                                           \at((((len1 :> integer) +
                                                  (len2 :> integer)) -
                                                 1),Here)) then (((\offset_min(
                                                                    \at(result,Here)) <=
                                                                    \at(0,Here)) &&
                                                                   (\offset_max(
                                                                    \at(result,Here)) >=
                                                                    \at(
                                                                    (((len1 :> integer) +
                                                                    (len2 :> integer)) -
                                                                    1),Here))) &&
                                                                  (\forall integer __framac_tmp3;
                                                                    (((\at(0,Here) <=
                                                                    __framac_tmp3) &&
                                                                    (__framac_tmp3 <=
                                                                    \at(
                                                                    (((len1 :> integer) +
                                                                    (len2 :> integer)) -
                                                                    1),Here))) ==>
                                                                    true))) else true),Here)) &&
                         (_C_96 : (((len1 :> integer) + (len2 :> integer)) <=
                                    0x7fffffff)))))))));
behavior default:
  assigns (result + [0..(((len1 :> integer) + (len2 :> integer)) - 1)]).intM;
  ensures (_C_86 : ((_C_87 : sorted{Here}(\at(result,Old), 0,
                                          ((\at(len1,Old) :> integer) +
                                            (\at(len2,Old) :> integer)))) &&
                     (_C_88 : (\forall integer x_4;
                                ((count{Here}(\at(first,Old), 0,
                                              (\at(len1,Old) :> integer), x_4) +
                                   count{Here}(\at(second,Old), 0,
                                               (\at(len2,Old) :> integer),
                                               x_4)) ==
                                  count{Here}(\at(result,Old), 0,
                                              ((\at(len1,Old) :> integer) +
                                                (\at(len2,Old) :> integer)),
                                              x_4))))));
{  
   (var int32 i);
   
   (var int32 j);
   
   (var int32 q);
   
   {  (_C_4 : (i = (0 :> int32)));
      (_C_5 : (j = (0 :> int32)));
      (LoopEntry : 
      loop 
      behavior default:
        invariant (_C_13 : ((_C_14 : ((0 :> int32) <= i)) &&
                             (_C_15 : (i <= len1))));
      behavior default:
        invariant (_C_10 : ((_C_11 : ((0 :> int32) <= j)) &&
                             (_C_12 : (j <= len2))));
      behavior default:
        invariant (_C_9 : sorted{Here}(result, 0,
                                       ((i :> integer) + (j :> integer))));
      behavior default:
        invariant (_C_8 : (\forall integer k_1;
                            (((0 <= k_1) &&
                               (k_1 < ((i :> integer) + (j :> integer)))) ==>
                              (((i < len1) ==>
                                 ((result + k_1).intM <=
                                   (first + (i :> integer)).intM)) &&
                                ((j < len2) ==>
                                  ((result + k_1).intM <=
                                    (second + (j :> integer)).intM))))));
      behavior default:
        invariant (_C_7 : (\forall integer x_3;
                            ((count{Here}(first, 0, (i :> integer), x_3) +
                               count{Here}(second, 0, (j :> integer), x_3)) ==
                              count{Here}(result, 0,
                                          ((i :> integer) + (j :> integer)),
                                          x_3))));
      variant (_C_6 : (((len1 :> integer) + (len2 :> integer)) -
                        ((i :> integer) + (j :> integer))));
      while (true)
      {  
         {  (LoopCurrent : (if (_C_20 : ((_C_19 : ((_C_18 : (i + j)) :> int32)) <
                                          (_C_17 : ((_C_16 : (len1 + len2)) :> int32)))) then () else 
                           (goto while_0_break)));
            
            {  (_Before : ());
               (if (_C_85 : (i == len1)) then 
               {  (_C_63 : ((_C_62 : (_C_61 : (result +
                                                (_C_60 : ((_C_59 : (i + j)) :> int32)))).intM) = 
                  (_C_58 : (_C_57 : (second + j)).intM)));
                  (_C_66 : (j = (_C_65 : ((_C_64 : (j + (1 :> int32))) :> int32))));
                  (_C_67 : (q = (0 :> int32)));
                  (LoopEntry : 
                  loop 
                  behavior default:
                    invariant (_C_71 : ((_C_72 : ((0 :> int32) <= q)) &&
                                         (_C_73 : ((q :> integer) <=
                                                    (((i :> integer) +
                                                       (j :> integer)) -
                                                      1)))));
                  behavior default:
                    invariant (_C_70 : (\forall integer w00;
                                         (((0 <= w00) &&
                                            (w00 <
                                              (((i :> integer) +
                                                 (j :> integer)) -
                                                1))) ==>
                                           (\at((result + w00).intM,_Before) ==
                                             (result + w00).intM))));
                  behavior default:
                    invariant (_C_69 : (\forall integer x_0;
                                         (count{_Before}(result, 0,
                                                         (q :> integer), x_0) ==
                                           count{Here}(result, 0,
                                                       (q :> integer), x_0))));
                  variant (_C_68 : ((((i :> integer) + (j :> integer)) - 1) -
                                     (q :> integer)));
                  while (true)
                  {  
                     {  (LoopCurrent : (if (_C_78 : (q <
                                                      (_C_77 : ((_C_76 : 
                                                                ((_C_75 : (
                                                                 (_C_74 : 
                                                                 (i +
                                                                   j)) :> int32)) -
                                                                  (1 :> int32))) :> int32)))) then () else 
                                       (goto while_1_break)));
                        
                        {  (_C_81 : (q = (_C_80 : ((_C_79 : (q +
                                                              (1 :> int32))) :> int32))));
                           
                           {  
                              (assert for default: (_C_82 : (astraver : 
                                                            (\forall integer x;
                                                              (((((count{_Before}(
                                                                    result,
                                                                    0,
                                                                    (q :> integer),
                                                                    x) ==
                                                                    (count{_Before}(
                                                                    result,
                                                                    0,
                                                                    ((q :> integer) -
                                                                    1), x) +
                                                                    count{_Before}(
                                                                    result,
                                                                    ((q :> integer) -
                                                                    1),
                                                                    (q :> integer),
                                                                    x))) &&
                                                                   ((count{_Before}(
                                                                    result,
                                                                    0,
                                                                    ((q :> integer) -
                                                                    1), x) +
                                                                    count{_Before}(
                                                                    result,
                                                                    ((q :> integer) -
                                                                    1),
                                                                    (q :> integer),
                                                                    x)) ==
                                                                    (count{_Before}(
                                                                    result,
                                                                    0,
                                                                    ((q :> integer) -
                                                                    1), x) +
                                                                    (if 
                                                                    ((\at(
                                                                    (result +
                                                                    \at(
                                                                    ((q :> integer) -
                                                                    1),Here)).intM,_Before) :> integer) ==
                                                                    x) then 1 else 0)))) &&
                                                                  ((count{_Before}(
                                                                    result,
                                                                    0,
                                                                    ((q :> integer) -
                                                                    1), x) +
                                                                    (if 
                                                                    ((\at(
                                                                    (result +
                                                                    \at(
                                                                    ((q :> integer) -
                                                                    1),Here)).intM,_Before) :> integer) ==
                                                                    x) then 1 else 0)) ==
                                                                    (count{Here}(
                                                                    result,
                                                                    0,
                                                                    ((q :> integer) -
                                                                    1), x) +
                                                                    (if 
                                                                    ((\at(
                                                                    (result +
                                                                    \at(
                                                                    ((q :> integer) -
                                                                    1),Here)).intM,_Before) :> integer) ==
                                                                    x) then 1 else 0)))) &&
                                                                 ((count{Here}(
                                                                    result,
                                                                    0,
                                                                    ((q :> integer) -
                                                                    1), x) +
                                                                    (if 
                                                                    ((\at(
                                                                    (result +
                                                                    \at(
                                                                    ((q :> integer) -
                                                                    1),Here)).intM,_Before) :> integer) ==
                                                                    x) then 1 else 0)) ==
                                                                   (count{Here}(
                                                                    result,
                                                                    0,
                                                                    ((q :> integer) -
                                                                    1), x) +
                                                                    count{Here}(
                                                                    result,
                                                                    ((q :> integer) -
                                                                    1),
                                                                    (q :> integer),
                                                                    x)))) &&
                                                                ((count{Here}(
                                                                   result, 0,
                                                                   ((q :> integer) -
                                                                    1),
                                                                   x) +
                                                                   count{Here}(
                                                                   result,
                                                                   ((q :> integer) -
                                                                    1),
                                                                   (q :> integer),
                                                                   x)) ==
                                                                  count{Here}(
                                                                  result, 0,
                                                                  (q :> integer),
                                                                  x)))))));
                              ()
                           }
                        }
                     }
                  });
                  (while_1_break : ());
                  
                  {  
                     (assert for default: (_C_83 : (astraver : (\forall integer x_1;
                                                                 (count{_Before}(
                                                                   result, 0,
                                                                   (((i :> integer) +
                                                                    (j :> integer)) -
                                                                    1),
                                                                   x_1) ==
                                                                   count{Here}(
                                                                   result, 0,
                                                                   (((i :> integer) +
                                                                    (j :> integer)) -
                                                                    1),
                                                                   x_1))))));
                     ()
                  };
                  
                  {  
                     (assert for default: (_C_84 : (astraver : (\forall integer x_2;
                                                                 ((((((((((count{Here}(
                                                                    first, 0,
                                                                    (i :> integer),
                                                                    x_2) +
                                                                    count{Here}(
                                                                    second,
                                                                    0,
                                                                    (j :> integer),
                                                                    x_2)) ==
                                                                    (count{Here}(
                                                                    first, 0,
                                                                    (i :> integer),
                                                                    x_2) +
                                                                    (count{Here}(
                                                                    second,
                                                                    0,
                                                                    ((j :> integer) -
                                                                    1), x_2) +
                                                                    count{Here}(
                                                                    second,
                                                                    ((j :> integer) -
                                                                    1),
                                                                    (j :> integer),
                                                                    x_2)))) &&
                                                                    ((count{Here}(
                                                                    first, 0,
                                                                    (i :> integer),
                                                                    x_2) +
                                                                    (count{Here}(
                                                                    second,
                                                                    0,
                                                                    ((j :> integer) -
                                                                    1), x_2) +
                                                                    count{Here}(
                                                                    second,
                                                                    ((j :> integer) -
                                                                    1),
                                                                    (j :> integer),
                                                                    x_2))) ==
                                                                    (count{_Before}(
                                                                    first, 0,
                                                                    (i :> integer),
                                                                    x_2) +
                                                                    (count{_Before}(
                                                                    second,
                                                                    0,
                                                                    ((j :> integer) -
                                                                    1), x_2) +
                                                                    count{_Before}(
                                                                    second,
                                                                    ((j :> integer) -
                                                                    1),
                                                                    (j :> integer),
                                                                    x_2))))) &&
                                                                    ((count{_Before}(
                                                                    first, 0,
                                                                    (i :> integer),
                                                                    x_2) +
                                                                    (count{_Before}(
                                                                    second,
                                                                    0,
                                                                    ((j :> integer) -
                                                                    1), x_2) +
                                                                    count{_Before}(
                                                                    second,
                                                                    ((j :> integer) -
                                                                    1),
                                                                    (j :> integer),
                                                                    x_2))) ==
                                                                    ((count{_Before}(
                                                                    first, 0,
                                                                    (i :> integer),
                                                                    x_2) +
                                                                    count{_Before}(
                                                                    second,
                                                                    0,
                                                                    ((j :> integer) -
                                                                    1), x_2)) +
                                                                    count{_Before}(
                                                                    second,
                                                                    ((j :> integer) -
                                                                    1),
                                                                    (j :> integer),
                                                                    x_2)))) &&
                                                                    (((count{_Before}(
                                                                    first, 0,
                                                                    (i :> integer),
                                                                    x_2) +
                                                                    count{_Before}(
                                                                    second,
                                                                    0,
                                                                    ((j :> integer) -
                                                                    1), x_2)) +
                                                                    count{_Before}(
                                                                    second,
                                                                    ((j :> integer) -
                                                                    1),
                                                                    (j :> integer),
                                                                    x_2)) ==
                                                                    (count{_Before}(
                                                                    result,
                                                                    0,
                                                                    (((i :> integer) +
                                                                    (j :> integer)) -
                                                                    1), x_2) +
                                                                    count{_Before}(
                                                                    second,
                                                                    ((j :> integer) -
                                                                    1),
                                                                    (j :> integer),
                                                                    x_2)))) &&
                                                                    ((count{_Before}(
                                                                    result,
                                                                    0,
                                                                    (((i :> integer) +
                                                                    (j :> integer)) -
                                                                    1), x_2) +
                                                                    count{_Before}(
                                                                    second,
                                                                    ((j :> integer) -
                                                                    1),
                                                                    (j :> integer),
                                                                    x_2)) ==
                                                                    (count{_Before}(
                                                                    result,
                                                                    0,
                                                                    (((i :> integer) +
                                                                    (j :> integer)) -
                                                                    1), x_2) +
                                                                    (if 
                                                                    ((\at(
                                                                    (second +
                                                                    \at(
                                                                    ((j :> integer) -
                                                                    1),Here)).intM,_Before) :> integer) ==
                                                                    x_2) then 1 else 0)))) &&
                                                                    ((count{_Before}(
                                                                    result,
                                                                    0,
                                                                    (((i :> integer) +
                                                                    (j :> integer)) -
                                                                    1), x_2) +
                                                                    (if 
                                                                    ((\at(
                                                                    (second +
                                                                    \at(
                                                                    ((j :> integer) -
                                                                    1),Here)).intM,_Before) :> integer) ==
                                                                    x_2) then 1 else 0)) ==
                                                                    (count{_Before}(
                                                                    result,
                                                                    0,
                                                                    (((i :> integer) +
                                                                    (j :> integer)) -
                                                                    1), x_2) +
                                                                    (if 
                                                                    (((result +
                                                                    (((i :> integer) +
                                                                    (j :> integer)) -
                                                                    1)).intM :> integer) ==
                                                                    x_2) then 1 else 0)))) &&
                                                                    ((count{_Before}(
                                                                    result,
                                                                    0,
                                                                    (((i :> integer) +
                                                                    (j :> integer)) -
                                                                    1), x_2) +
                                                                    (if 
                                                                    (((result +
                                                                    (((i :> integer) +
                                                                    (j :> integer)) -
                                                                    1)).intM :> integer) ==
                                                                    x_2) then 1 else 0)) ==
                                                                    (count{_Before}(
                                                                    result,
                                                                    0,
                                                                    (((i :> integer) +
                                                                    (j :> integer)) -
                                                                    1), x_2) +
                                                                    count{Here}(
                                                                    result,
                                                                    (((i :> integer) +
                                                                    (j :> integer)) -
                                                                    1),
                                                                    ((i :> integer) +
                                                                    (j :> integer)),
                                                                    x_2)))) &&
                                                                    ((count{_Before}(
                                                                    result,
                                                                    0,
                                                                    (((i :> integer) +
                                                                    (j :> integer)) -
                                                                    1), x_2) +
                                                                    count{Here}(
                                                                    result,
                                                                    (((i :> integer) +
                                                                    (j :> integer)) -
                                                                    1),
                                                                    ((i :> integer) +
                                                                    (j :> integer)),
                                                                    x_2)) ==
                                                                    (count{Here}(
                                                                    result,
                                                                    0,
                                                                    (((i :> integer) +
                                                                    (j :> integer)) -
                                                                    1), x_2) +
                                                                    count{Here}(
                                                                    result,
                                                                    (((i :> integer) +
                                                                    (j :> integer)) -
                                                                    1),
                                                                    ((i :> integer) +
                                                                    (j :> integer)),
                                                                    x_2)))) &&
                                                                   ((count{Here}(
                                                                    result,
                                                                    0,
                                                                    (((i :> integer) +
                                                                    (j :> integer)) -
                                                                    1), x_2) +
                                                                    count{Here}(
                                                                    result,
                                                                    (((i :> integer) +
                                                                    (j :> integer)) -
                                                                    1),
                                                                    ((i :> integer) +
                                                                    (j :> integer)),
                                                                    x_2)) ==
                                                                    count{Here}(
                                                                    result,
                                                                    0,
                                                                    ((i :> integer) +
                                                                    (j :> integer)),
                                                                    x_2)))))));
                     ()
                  }
               } else (if (_C_56 : (j == len2)) then 
                      {  (_C_52 : ((_C_51 : (_C_50 : (result +
                                                       (_C_49 : ((_C_48 : 
                                                                 (i +
                                                                   j)) :> int32)))).intM) = 
                         (_C_47 : (_C_46 : (first + i)).intM)));
                         (_C_55 : (i = (_C_54 : ((_C_53 : (i + (1 :> int32))) :> int32))))
                      } else (if (_C_45 : ((_C_44 : (_C_43 : (first + i)).intM) <=
                                            (_C_42 : (_C_41 : (second + j)).intM))) then 
                             {  (_C_37 : ((_C_36 : (_C_35 : (result +
                                                              (_C_34 : (
                                                              (_C_33 : 
                                                              (i +
                                                                j)) :> int32)))).intM) = 
                                (_C_32 : (_C_31 : (first + i)).intM)));
                                (_C_40 : (i = (_C_39 : ((_C_38 : (i +
                                                                   (1 :> int32))) :> int32))))
                             } else 
                             {  (_C_27 : ((_C_26 : (_C_25 : (result +
                                                              (_C_24 : (
                                                              (_C_23 : 
                                                              (i +
                                                                j)) :> int32)))).intM) = 
                                (_C_22 : (_C_21 : (second + j)).intM)));
                                (_C_30 : (j = (_C_29 : ((_C_28 : (j +
                                                                   (1 :> int32))) :> int32))))
                             })))
            }
         }
      });
      (while_0_break : ());
      
      (return ())
   }
}
