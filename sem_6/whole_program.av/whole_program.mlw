
theory Axiomatic_Padding 
                           use why3.Bool.Bool 
                           
end

theory Int32_of_Int16

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Int32.t = (Int32.of_int (Int16.to_int n))
  
end

theory Bit_int32_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Int32_of_Int16
  
  use export enum.Bit_int32_of_bit_int16
  
end

theory Int64_of_Int16

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Int64.t = (Int64.of_int (Int16.to_int n))
  
end

theory Bit_int64_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Int64_of_Int16
  
  use export enum.Bit_int64_of_bit_int16
  
end

theory Int64_of_Int32

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Int64.t = (Int64.of_int (Int32.to_int n))
  
end

theory Bit_int64_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Int64_of_Int32
  
  use export enum.Bit_int64_of_bit_int32
  
end

theory Int8_of_Int16

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Int8.t = (Int8.of_int (Int16.to_int n))
  
end

theory Bit_int8_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Int8_of_Int16
  
  use export enum.Bit_int8_of_bit_int16
  
end

theory Int8_of_Int32

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Int8.t = (Int8.of_int (Int32.to_int n))
  
end

theory Bit_int8_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Int8_of_Int32
  
  use export enum.Bit_int8_of_bit_int32
  
end

theory Int8_of_Int64

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Int8.t = (Int8.of_int (Int64.to_int n))
  
end

theory Bit_int8_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Int8_of_Int64
  
  use export enum.Bit_int8_of_bit_int64
  
end

theory Uint16_of_Int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Uint16.t = (Uint16.of_int (Int16.to_int n))
  
end

theory Bit_uint16_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Uint16_of_Int16
  
  use export enum.Bit_uint16_of_bit_int16
  
end

theory Uint16_of_Int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Uint16.t = (Uint16.of_int (Int32.to_int n))
  
end

theory Bit_uint16_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Uint16_of_Int32
  
  use export enum.Bit_uint16_of_bit_int32
  
end

theory Uint16_of_Int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Uint16.t = (Uint16.of_int (Int64.to_int n))
  
end

theory Bit_uint16_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Uint16_of_Int64
  
  use export enum.Bit_uint16_of_bit_int64
  
end

theory Uint16_of_Int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Uint16.t = (Uint16.of_int (Int8.to_int n))
  
end

theory Bit_uint16_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Uint16_of_Int8
  
  use export enum.Bit_uint16_of_bit_int8
  
end

theory Uint32_of_Int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Uint32.t = (Uint32.of_int (Int16.to_int n))
  
end

theory Bit_uint32_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Uint32_of_Int16
  
  use export enum.Bit_uint32_of_bit_int16
  
end

theory Uint32_of_Int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Uint32.t = (Uint32.of_int (Int32.to_int n))
  
end

theory Bit_uint32_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Uint32_of_Int32
  
  use export enum.Bit_uint32_of_bit_int32
  
end

theory Uint32_of_Int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Uint32.t = (Uint32.of_int (Int64.to_int n))
  
end

theory Bit_uint32_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Uint32_of_Int64
  
  use export enum.Bit_uint32_of_bit_int64
  
end

theory Uint32_of_Int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Uint32.t = (Uint32.of_int (Int8.to_int n))
  
end

theory Bit_uint32_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Uint32_of_Int8
  
  use export enum.Bit_uint32_of_bit_int8
  
end

theory Uint32_of_Uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Uint32.t = (Uint32.of_int (Uint16.to_int n))
  
end

theory Bit_uint32_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Uint32_of_Uint16
  
  use export enum.Bit_uint32_of_bit_uint16
  
end

theory Uint64_of_Int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Uint64.t = (Uint64.of_int (Int16.to_int n))
  
end

theory Bit_uint64_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Uint64_of_Int16
  
  use export enum.Bit_uint64_of_bit_int16
  
end

theory Uint64_of_Int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Uint64.t = (Uint64.of_int (Int32.to_int n))
  
end

theory Bit_uint64_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Uint64_of_Int32
  
  use export enum.Bit_uint64_of_bit_int32
  
end

theory Uint64_of_Int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Uint64.t = (Uint64.of_int (Int64.to_int n))
  
end

theory Bit_uint64_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Uint64_of_Int64
  
  use export enum.Bit_uint64_of_bit_int64
  
end

theory Uint64_of_Int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Uint64.t = (Uint64.of_int (Int8.to_int n))
  
end

theory Bit_uint64_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Uint64_of_Int8
  
  use export enum.Bit_uint64_of_bit_int8
  
end

theory Uint64_of_Uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Uint64.t = (Uint64.of_int (Uint16.to_int n))
  
end

theory Bit_uint64_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Uint64_of_Uint16
  
  use export enum.Bit_uint64_of_bit_uint16
  
end

theory Uint64_of_Uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Uint64.t = (Uint64.of_int (Uint32.to_int n))
  
end

theory Bit_uint64_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Uint64_of_Uint32
  
  use export enum.Bit_uint64_of_bit_uint32
  
end

theory Uint8_of_Int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Uint8.t = (Uint8.of_int (Int16.to_int n))
  
end

theory Bit_uint8_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Uint8_of_Int16
  
  use export enum.Bit_uint8_of_bit_int16
  
end

theory Uint8_of_Int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Uint8.t = (Uint8.of_int (Int32.to_int n))
  
end

theory Bit_uint8_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Uint8_of_Int32
  
  use export enum.Bit_uint8_of_bit_int32
  
end

theory Uint8_of_Int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Uint8.t = (Uint8.of_int (Int64.to_int n))
  
end

theory Bit_uint8_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Uint8_of_Int64
  
  use export enum.Bit_uint8_of_bit_int64
  
end

theory Uint8_of_Int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Uint8.t = (Uint8.of_int (Int8.to_int n))
  
end

theory Bit_uint8_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Uint8_of_Int8
  
  use export enum.Bit_uint8_of_bit_int8
  
end

theory Uint8_of_Uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Uint8.t = (Uint8.of_int (Uint16.to_int n))
  
end

theory Bit_uint8_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Uint8_of_Uint16
  
  use export enum.Bit_uint8_of_bit_uint16
  
end

theory Uint8_of_Uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Uint8.t = (Uint8.of_int (Uint32.to_int n))
  
end

theory Bit_uint8_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Uint8_of_Uint32
  
  use export enum.Bit_uint8_of_bit_uint32
  
end

theory Uint8_of_Uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Uint8.t = (Uint8.of_int (Uint64.to_int n))
  
end

theory Bit_uint8_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Uint8_of_Uint64
  
  use export enum.Bit_uint8_of_bit_uint64
  
end

theory Int16_of_Int32

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Int16.t = (Int16.of_int (Int32.to_int n))
  
end

theory Bit_int16_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Int16_of_Int32
  
  use export enum.Bit_int16_of_bit_int32
  
end

theory Int16_of_Int64

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Int16.t = (Int16.of_int (Int64.to_int n))
  
end

theory Bit_int16_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Int16_of_Int64
  
  use export enum.Bit_int16_of_bit_int64
  
end

theory Int32_of_Int64

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Int32.t = (Int32.of_int (Int64.to_int n))
  
end

theory Bit_int32_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Int32_of_Int64
  
  use export enum.Bit_int32_of_bit_int64
  
end

theory Int16_of_Int8

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Int16.t = (Int16.of_int (Int8.to_int n))
  
end

theory Bit_int16_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Int16_of_Int8
  
  use export enum.Bit_int16_of_bit_int8
  
end

theory Int32_of_Int8

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Int32.t = (Int32.of_int (Int8.to_int n))
  
end

theory Bit_int32_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Int32_of_Int8
  
  use export enum.Bit_int32_of_bit_int8
  
end

theory Int64_of_Int8

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Int64.t = (Int64.of_int (Int8.to_int n))
  
end

theory Bit_int64_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Int64_of_Int8
  
  use export enum.Bit_int64_of_bit_int8
  
end

theory Int16_of_Uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Int16.t = (Int16.of_int (Uint16.to_int n))
  
end

theory Bit_int16_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Int16_of_Uint16
  
  use export enum.Bit_int16_of_bit_uint16
  
end

theory Int32_of_Uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Int32.t = (Int32.of_int (Uint16.to_int n))
  
end

theory Bit_int32_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Int32_of_Uint16
  
  use export enum.Bit_int32_of_bit_uint16
  
end

theory Int64_of_Uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Int64.t = (Int64.of_int (Uint16.to_int n))
  
end

theory Bit_int64_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Int64_of_Uint16
  
  use export enum.Bit_int64_of_bit_uint16
  
end

theory Int8_of_Uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Int8.t = (Int8.of_int (Uint16.to_int n))
  
end

theory Bit_int8_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Int8_of_Uint16
  
  use export enum.Bit_int8_of_bit_uint16
  
end

theory Int16_of_Uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Int16.t = (Int16.of_int (Uint32.to_int n))
  
end

theory Bit_int16_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Int16_of_Uint32
  
  use export enum.Bit_int16_of_bit_uint32
  
end

theory Int32_of_Uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Int32.t = (Int32.of_int (Uint32.to_int n))
  
end

theory Bit_int32_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Int32_of_Uint32
  
  use export enum.Bit_int32_of_bit_uint32
  
end

theory Int64_of_Uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Int64.t = (Int64.of_int (Uint32.to_int n))
  
end

theory Bit_int64_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Int64_of_Uint32
  
  use export enum.Bit_int64_of_bit_uint32
  
end

theory Int8_of_Uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Int8.t = (Int8.of_int (Uint32.to_int n))
  
end

theory Bit_int8_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Int8_of_Uint32
  
  use export enum.Bit_int8_of_bit_uint32
  
end

theory Uint16_of_Uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Uint16.t = (Uint16.of_int (Uint32.to_int n))
  
end

theory Bit_uint16_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Uint16_of_Uint32
  
  use export enum.Bit_uint16_of_bit_uint32
  
end

theory Int16_of_Uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Int16.t = (Int16.of_int (Uint64.to_int n))
  
end

theory Bit_int16_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Int16_of_Uint64
  
  use export enum.Bit_int16_of_bit_uint64
  
end

theory Int32_of_Uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Int32.t = (Int32.of_int (Uint64.to_int n))
  
end

theory Bit_int32_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Int32_of_Uint64
  
  use export enum.Bit_int32_of_bit_uint64
  
end

theory Int64_of_Uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Int64.t = (Int64.of_int (Uint64.to_int n))
  
end

theory Bit_int64_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Int64_of_Uint64
  
  use export enum.Bit_int64_of_bit_uint64
  
end

theory Int8_of_Uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Int8.t = (Int8.of_int (Uint64.to_int n))
  
end

theory Bit_int8_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Int8_of_Uint64
  
  use export enum.Bit_int8_of_bit_uint64
  
end

theory Uint16_of_Uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Uint16.t = (Uint16.of_int (Uint64.to_int n))
  
end

theory Bit_uint16_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Uint16_of_Uint64
  
  use export enum.Bit_uint16_of_bit_uint64
  
end

theory Uint32_of_Uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Uint32.t = (Uint32.of_int (Uint64.to_int n))
  
end

theory Bit_uint32_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Uint32_of_Uint64
  
  use export enum.Bit_uint32_of_bit_uint64
  
end

theory Int16_of_Uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Int16.t = (Int16.of_int (Uint8.to_int n))
  
end

theory Bit_int16_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Int16_of_Uint8
  
  use export enum.Bit_int16_of_bit_uint8
  
end

theory Int32_of_Uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Int32.t = (Int32.of_int (Uint8.to_int n))
  
end

theory Bit_int32_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Int32_of_Uint8
  
  use export enum.Bit_int32_of_bit_uint8
  
end

theory Int64_of_Uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Int64.t = (Int64.of_int (Uint8.to_int n))
  
end

theory Bit_int64_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Int64_of_Uint8
  
  use export enum.Bit_int64_of_bit_uint8
  
end

theory Int8_of_Uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Int8.t = (Int8.of_int (Uint8.to_int n))
  
end

theory Bit_int8_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Int8_of_Uint8
  
  use export enum.Bit_int8_of_bit_uint8
  
end

theory Uint16_of_Uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Uint16.t = (Uint16.of_int (Uint8.to_int n))
  
end

theory Bit_uint16_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Uint16_of_Uint8
  
  use export enum.Bit_uint16_of_bit_uint8
  
end

theory Uint32_of_Uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Uint32.t = (Uint32.of_int (Uint8.to_int n))
  
end

theory Bit_uint32_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Uint32_of_Uint8
  
  use export enum.Bit_uint32_of_bit_uint8
  
end

theory Uint64_of_Uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Uint64.t = (Uint64.of_int (Uint8.to_int n))
  
end

theory Bit_uint64_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Uint64_of_Uint8
  
  use export enum.Bit_uint64_of_bit_uint8
  
end

module Unsafe_uint8

  use why3.Bool.Bool 
  
  use import enum.Uint8 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_uint8

  use why3.Bool.Bool 
  
  use import enum.Uint8 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_uint8

  use why3.Bool.Bool 
  
  use import enum.Bit_uint8 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_uint8

  use why3.Bool.Bool 
  
  use import enum.Bit_uint8 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_uint64

  use why3.Bool.Bool 
  
  use import enum.Uint64 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_uint64

  use why3.Bool.Bool 
  
  use import enum.Uint64 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_uint64

  use why3.Bool.Bool 
  
  use import enum.Bit_uint64 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_uint64

  use why3.Bool.Bool 
  
  use import enum.Bit_uint64 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_uint32

  use why3.Bool.Bool 
  
  use import enum.Uint32 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_uint32

  use why3.Bool.Bool 
  
  use import enum.Uint32 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_uint32

  use why3.Bool.Bool 
  
  use import enum.Bit_uint32 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_uint32

  use why3.Bool.Bool 
  
  use import enum.Bit_uint32 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_uint16

  use why3.Bool.Bool 
  
  use import enum.Uint16 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_uint16

  use why3.Bool.Bool 
  
  use import enum.Uint16 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_uint16

  use why3.Bool.Bool 
  
  use import enum.Bit_uint16 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_uint16

  use why3.Bool.Bool 
  
  use import enum.Bit_uint16 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_int8

  use why3.Bool.Bool 
  
  use import enum.Int8 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_int8

  use why3.Bool.Bool 
  
  use import enum.Int8 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_int8

  use why3.Bool.Bool 
  
  use import enum.Bit_int8 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_int8

  use why3.Bool.Bool 
  
  use import enum.Bit_int8 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_int64

  use why3.Bool.Bool 
  
  use import enum.Int64 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_int64

  use why3.Bool.Bool 
  
  use import enum.Int64 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_int64

  use why3.Bool.Bool 
  
  use import enum.Bit_int64 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_int64

  use why3.Bool.Bool 
  
  use import enum.Bit_int64 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_int32

  use why3.Bool.Bool 
  
  use import enum.Int32 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_int32

  use why3.Bool.Bool 
  
  use import enum.Int32 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_int32

  use why3.Bool.Bool 
  
  use import enum.Bit_int32 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_int32

  use why3.Bool.Bool 
  
  use import enum.Bit_int32 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_int16

  use why3.Bool.Bool 
  
  use import enum.Int16 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_int16

  use why3.Bool.Bool 
  
  use import enum.Int16 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_int16

  use why3.Bool.Bool 
  
  use import enum.Bit_int16 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_int16

  use why3.Bool.Bool 
  
  use import enum.Bit_int16 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Globals_simple

  use why3.Bool.Bool 
  
end

theory Root_voidP

  use why3.Bool.Bool 
  
  use import core.Voidp 
  
end

module Root_voidP_safe

  use why3.Bool.Bool 
  
end

module Root_voidP_unsafe

  use why3.Bool.Bool 
  
end

theory Struct_voidP

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import core.Tag_table 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use import core.Alloc 
  
  use why3.Bool.Bool 
  
  use import core.Voidp_tag_id 
  
  predicate frame_tag_struct_voidP (p : (pointer voidP)) (old_voidP_tag_table
  : (tag_table voidP)) (voidP_tag_table : (tag_table voidP))
  =
     ((tag_extends old_voidP_tag_table voidP_tag_table) /\
     (alloc_tag_block old_voidP_tag_table voidP_tag_table p))
  
  predicate frame_free_struct_voidP (p : (pointer voidP))
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((free_extends old_voidP_alloc_table voidP_alloc_table) /\
     (free_block old_voidP_alloc_table voidP_alloc_table p))
  
  predicate frame_alloc_struct_voidP (p : (pointer voidP)) (n : int)
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((alloc_extends old_voidP_alloc_table voidP_alloc_table) /\
     (alloc_block old_voidP_alloc_table voidP_alloc_table p n))
  
  predicate fresh_tag_struct_voidP (p : (pointer voidP)) (n : int)
  (voidP_tag_table : (tag_table voidP))
  = (tag_fresh voidP_tag_table p)
  
  predicate fresh_alloc_struct_voidP (p : (pointer voidP)) (n : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (alloc_fresh voidP_alloc_table p)
  
  predicate container_of_singleton_struct_voidP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP)) = true
  
  predicate container_of_struct_voidP (p : (pointer voidP)) (l : int) (r :
  int) (voidP_tag_table : (tag_table voidP)) = true
  
  predicate typeof_singleton_struct_voidP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = ((=) (typeof voidP_tag_table p) voidP_tag)
  
  predicate typeof_struct_voidP (p : (pointer voidP)) (l : int) (r : int)
  (voidP_tag_table : (tag_table voidP))
  =
     (((=) (typeof voidP_tag_table p) voidP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       ((=) (typeof voidP_tag_table (shift p i)) voidP_tag))))
  
  predicate instanceof_singleton_struct_voidP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = (instanceof voidP_tag_table p voidP_tag)
  
  predicate instanceof_struct_voidP (p : (pointer voidP)) (l : int) (r : int)
  (voidP_tag_table : (tag_table voidP))
  =
     ((instanceof voidP_tag_table p voidP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       (instanceof voidP_tag_table (shift p i) voidP_tag))))
  
  predicate right_valid_struct_voidP (p : (pointer voidP)) (b : int)
  (voidP_alloc_table : (alloc_table voidP))
  = ((>=) (offset_max voidP_alloc_table p) b)
  
  predicate left_valid_struct_voidP (p : (pointer voidP)) (a : int)
  (voidP_alloc_table : (alloc_table voidP))
  = ((<=) (offset_min voidP_alloc_table p) a)
  
  predicate strict_left_valid_struct_voidP (p : (pointer voidP)) (a : int)
  (voidP_alloc_table : (alloc_table voidP))
  = ((=) (offset_min voidP_alloc_table p) a)
  
  predicate valid_struct_voidP (p : (pointer voidP)) (a : int) (b : int)
  (voidP_alloc_table : (alloc_table voidP))
  =
     (((<=) (offset_min voidP_alloc_table p) a) /\
     ((>=) (offset_max voidP_alloc_table p) b))
  
  predicate strict_valid_struct_voidP (p : (pointer voidP)) (a : int) (b :
  int) (voidP_alloc_table : (alloc_table voidP))
  =
     (((=) (offset_min voidP_alloc_table p) a) /\
     ((=) (offset_max voidP_alloc_table p) b))
  
end

theory Struct_intP

  use import core.Voidp_tag_id 
  
  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import core.Tag_table 
  
  use import core.Tag_id 
  
  use import core.Tag 
  
  use import Struct_voidP 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Alloc_table 
  
  use import core.Alloc 
  
  use why3.Bool.Bool 
  
  function intP_tag  : (tag_id voidP)
  
  axiom IntP_parenttag_voidP  :
  (parenttag intP_tag voidP_tag)
  
  axiom IntP_is_final  :
  (forall voidP_tag_table : (tag_table voidP).
   (forall p : (pointer voidP).
    ((instanceof voidP_tag_table p intP_tag) ->
     ((=) (typeof voidP_tag_table p) intP_tag))))
  
  predicate frame_tag_struct_intP (p : (pointer voidP)) (old_voidP_tag_table
  : (tag_table voidP)) (voidP_tag_table : (tag_table voidP))
  =
     ((tag_extends old_voidP_tag_table voidP_tag_table) /\
     (alloc_tag_block old_voidP_tag_table voidP_tag_table p))
  
  predicate frame_free_struct_intP (p : (pointer voidP))
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((free_extends old_voidP_alloc_table voidP_alloc_table) /\
     (free_block old_voidP_alloc_table voidP_alloc_table p))
  
  predicate frame_alloc_struct_intP (p : (pointer voidP)) (n : int)
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((alloc_extends old_voidP_alloc_table voidP_alloc_table) /\
     (alloc_block old_voidP_alloc_table voidP_alloc_table p n))
  
  predicate fresh_tag_struct_intP (p : (pointer voidP)) (n : int)
  (voidP_tag_table : (tag_table voidP))
  = (fresh_tag_struct_voidP p n voidP_tag_table)
  
  predicate fresh_alloc_struct_intP (p : (pointer voidP)) (n : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (fresh_alloc_struct_voidP p n voidP_alloc_table)
  
  predicate container_of_singleton_struct_intP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP)) = true
  
  predicate container_of_struct_intP (p : (pointer voidP)) (l : int) (r :
  int) (voidP_tag_table : (tag_table voidP)) = true
  
  predicate typeof_singleton_struct_intP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = ((=) (typeof voidP_tag_table p) intP_tag)
  
  predicate typeof_struct_intP (p : (pointer voidP)) (l : int) (r : int)
  (voidP_tag_table : (tag_table voidP))
  =
     (((=) (typeof voidP_tag_table p) intP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       ((=) (typeof voidP_tag_table (shift p i)) intP_tag))))
  
  predicate instanceof_singleton_struct_intP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = (instanceof voidP_tag_table p intP_tag)
  
  predicate instanceof_struct_intP (p : (pointer voidP)) (l : int) (r : int)
  (voidP_tag_table : (tag_table voidP))
  =
     ((instanceof voidP_tag_table p intP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       (instanceof voidP_tag_table (shift p i) intP_tag))))
  
  predicate right_valid_struct_intP (p : (pointer voidP)) (b : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (right_valid_struct_voidP p b voidP_alloc_table)
  
  predicate left_valid_struct_intP (p : (pointer voidP)) (a : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (left_valid_struct_voidP p a voidP_alloc_table)
  
  predicate strict_left_valid_struct_intP (p : (pointer voidP)) (a : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (strict_left_valid_struct_voidP p a voidP_alloc_table)
  
  predicate valid_struct_intP (p : (pointer voidP)) (a : int) (b : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (valid_struct_voidP p a b voidP_alloc_table)
  
  predicate strict_valid_struct_intP (p : (pointer voidP)) (a : int) (b :
  int) (voidP_alloc_table : (alloc_table voidP))
  = (strict_valid_struct_voidP p a b voidP_alloc_table)
  
  axiom IntP_int  : ((=) (int_of_tag intP_tag) (5))
  
end

module Struct_intP_unsafe

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import Struct_intP 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val free_struct_intP
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires {
      (("expl:Deallocation" ((=) p null)) \/ (freeable !voidP_alloc_table p))
      }
    writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct_intP p (old !voidP_alloc_table) !voidP_alloc_table)
      /\
      (fresh_alloc_struct_intP p (offset_max (old !voidP_alloc_table) p)
      !voidP_alloc_table))) }
  
  val allocate_struct_intP_requires
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { ((>=) n (0)) } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct_intP result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct_intP result n (old !voidP_alloc_table)
        !voidP_alloc_table)
       /\
       ((frame_tag_struct_intP result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct_intP result (Int.(-) n (1)) (old
        !voidP_alloc_table))
       /\
       ((fresh_tag_struct_intP result (Int.(-) n (1)) (old !voidP_tag_table))
       /\
       ((typeof_struct_intP result (0) n !voidP_tag_table) /\
       (container_of_struct_intP result (0) n !voidP_tag_table))))))) }
  
end

module Safe_uint64_of_Safe_int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint64.t
   requires { (Uint64.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Uint64.to_int result) (Int32.to_int n)) }
  
end

module Function_q_init_safety
#"/home/nik/Projects/ver/sem_6/queue.h" 52 4 44# "expl:q_init, safety"

  use import core.Voidp 
  
  use import core.Upd_safe 
  
  use import core.Tag_table_type 
  
  use import Struct_intP_unsafe 
  
  use Safe_uint64_of_Safe_int32 
  
  use Safe_uint64 
  
  use Safe_int32 
  
  use import core.Return 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  let q_init #"/home/nik/Projects/ver/sem_6/queue.h" 52 4 44#
  "expl:Function q_init, safety" =
  fun
   (self_1_0 : (pointer voidP)) (max_size : Int32.t)
   (voidP_self_1_8_alloc_table : ref (alloc_table voidP))
   (voidP_array_16_alloc_table : ref (alloc_table voidP))
   (voidP_array_16_tag_table : ref (tag_table voidP)) (_Queue_array_self_1_8
   : ref (memory voidP (pointer voidP))) (_Queue_capacity_self_1_8 : ref
   (memory voidP Int32.t)) (_Queue_curr_elem_self_1_8 : ref (memory voidP
   Int32.t)) (_Queue_empty_elem_self_1_8 : ref (memory voidP Int32.t)) 
   requires {
   (#"whole_program.jc" 120 12 325#
   ((#"/home/nik/Projects/ver/sem_6/queue.c" 6 13 39#
    ((<=) (Int32.to_int max_size) (Int.(-) (2147483647) (1))))
   /\
   (#"whole_program.jc" 120 12 325#
   ((#"/home/nik/Projects/ver/sem_6/queue.h" 36 13 25#
    (#"whole_program.jc" 120 12 325#
    ((#"whole_program.jc" 120 12 325#
     ((<=) (offset_min !voidP_self_1_8_alloc_table self_1_0) (0)))
    /\
    (#"whole_program.jc" 120 12 325#
    ((#"whole_program.jc" 120 12 325#
     ((>=) (offset_max !voidP_self_1_8_alloc_table self_1_0) (0)))
    /\ (#"whole_program.jc" 120 12 325# ((=) true true)))))))
   /\
   (#"/home/nik/Projects/ver/sem_6/queue.h" 37 13 25#
   (Int32.(>) max_size (#"whole_program.jc" 124 36 48# "expl:Integer cast"
   (Int32.of_int (0))))))))) } ensures { ("expl:Postcondition" true) }  ->
   'Init:
   (let return = ref (Safe_int32.any_  () ) in
   try
    begin
    (let __retres = ref (Safe_int32.any_  () ) in
    begin
    (let _jessie_29 =
    (let _jessie_28 =
    (#"/home/nik/Projects/ver/sem_6/queue.c" 11 18 54# "expl:Allocation size"
    (allocate_struct_intP_requires 
     (Safe_uint64.to_int 
      (#"/home/nik/Projects/ver/sem_6/queue.c" 11 26 38# "expl:Integer cast"
      (Safe_uint64_of_Safe_int32.cast 
       (Safe_int32.(+)  max_size
        (#"whole_program.jc" 150 68 80# "expl:Integer cast"
        (Safe_int32.of_int (1))) ) )) ) voidP_array_16_alloc_table
     voidP_array_16_tag_table )) in
    begin
    (assert {
    (#"/home/nik/Projects/ver/sem_6/queue.c" 11 18 54#
    "expl:Pointer index bounds" true) }); _jessie_28 end) in
    (let _jessie_30 = self_1_0 in
    (let _jessie_31 = (0) in
    (let _jessie_32 = _jessie_30 in
    (#"/home/nik/Projects/ver/sem_6/queue.c" 11 18 54#
    "expl:Pointer dereference"
    (upd  !voidP_self_1_8_alloc_table _Queue_array_self_1_8 _jessie_30
     _jessie_29 ))))));
     begin
     (let _jessie_34 =
     (let _jessie_33 =
     (Safe_int32.(+)  max_size
      (#"whole_program.jc" 152 61 73# "expl:Integer cast"
      (Safe_int32.of_int (1))) ) in
     begin
     (assert {
     (#"/home/nik/Projects/ver/sem_6/queue.c" 12 4 33#
     "expl:Pointer index bounds" true) }); _jessie_33 end) in
     (let _jessie_35 = self_1_0 in
     (let _jessie_36 = (0) in
     (let _jessie_37 = _jessie_35 in
     (#"/home/nik/Projects/ver/sem_6/queue.c" 12 4 33#
     "expl:Pointer dereference"
     (upd  !voidP_self_1_8_alloc_table _Queue_capacity_self_1_8 _jessie_35
      _jessie_34 ))))));
      begin
      (let _jessie_39 =
      (let _jessie_38 =
      (#"whole_program.jc" 153 45 57# "expl:Integer cast"
      (Safe_int32.of_int (0))) in
      begin
      (assert {
      (#"/home/nik/Projects/ver/sem_6/queue.c" 13 4 23#
      "expl:Pointer index bounds" true) }); _jessie_38 end) in
      (let _jessie_40 = self_1_0 in
      (let _jessie_41 = (0) in
      (let _jessie_42 = _jessie_40 in
      (#"/home/nik/Projects/ver/sem_6/queue.c" 13 4 23#
      "expl:Pointer dereference"
      (upd  !voidP_self_1_8_alloc_table _Queue_curr_elem_self_1_8 _jessie_40
       _jessie_39 ))))));
       begin
       (let _jessie_44 =
       (let _jessie_43 =
       (#"whole_program.jc" 154 46 58# "expl:Integer cast"
       (Safe_int32.of_int (0))) in
       begin
       (assert {
       (#"/home/nik/Projects/ver/sem_6/queue.c" 14 4 24#
       "expl:Pointer index bounds" true) }); _jessie_43 end) in
       (let _jessie_45 = self_1_0 in
       (let _jessie_46 = (0) in
       (let _jessie_47 = _jessie_45 in
       (#"/home/nik/Projects/ver/sem_6/queue.c" 14 4 24#
       "expl:Pointer dereference"
       (upd  !voidP_self_1_8_alloc_table _Queue_empty_elem_self_1_8
        _jessie_45 _jessie_44 ))))));
        begin
        (__retres :=
         (let _jessie_48 =
         (#"whole_program.jc" 155 27 39# "expl:Integer cast"
         (Safe_int32.of_int (0))) in
         begin
         (assert {
         (#"/home/nik/Projects/ver/sem_6/queue.c" 16 4 13#
         "expl:Pointer index bounds" true) }); _jessie_48 end));
         begin
         (return :=
          (let _jessie_49 = !__retres in
          begin
          (assert {
          (#"whole_program.jc" 157 7 22# "expl:Pointer index bounds" true) });
           _jessie_49 end)); (raise Return) end end end end end end); 
     absurd  end with Return -> !return end)
  
end

module Struct_intP_safe

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import Struct_intP 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val safe_free_struct_intP
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires { true } writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct_intP p (old !voidP_alloc_table) !voidP_alloc_table)
      /\
      (fresh_alloc_struct_intP p (offset_max (old !voidP_alloc_table) p)
      !voidP_alloc_table))) }
  
  val allocate_struct_intP
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { true } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct_intP result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct_intP result n (old !voidP_alloc_table)
        !voidP_alloc_table)
       /\
       ((frame_tag_struct_intP result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct_intP result (Int.(-) n (1)) (old
        !voidP_alloc_table))
       /\
       ((fresh_tag_struct_intP result (Int.(-) n (1)) (old !voidP_tag_table))
       /\
       ((typeof_struct_intP result (0) n !voidP_tag_table) /\
       (container_of_struct_intP result (0) n !voidP_tag_table))))))) }
  
  val allocate_singleton_struct_intP
  (voidP_alloc_table : ref (alloc_table voidP)) 
   (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
    requires { true } writes { voidP_alloc_table, voidP_tag_table }
    ensures {
      ((strict_valid_struct_intP result (0) (0) !voidP_alloc_table) /\
      ((frame_alloc_struct_intP result (1) (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      ((frame_tag_struct_intP result (old !voidP_tag_table) !voidP_tag_table)
      /\
      ((fresh_alloc_struct_intP result (0) (old !voidP_alloc_table)) /\
      ((fresh_tag_struct_intP result (0) (old !voidP_tag_table)) /\
      ((typeof_singleton_struct_intP result !voidP_tag_table) /\
      (container_of_singleton_struct_intP result !voidP_tag_table))))))) }
  
end

module Unsafe_uint64_of_Unsafe_int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Int32.to_int n)) }
  
end

theory Logic_is_valid_queue

  use import core.Voidp 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  predicate is_valid_queue (self : (pointer voidP))
  (voidP_array_14_alloc_table_at_L : (alloc_table voidP))
  (voidP_self_2_alloc_table_at_L : (alloc_table voidP))
  (_Queue_empty_elem_self_2_at_L : (memory voidP Int32.t))
  (_Queue_curr_elem_self_2_at_L : (memory voidP Int32.t))
  (_Queue_capacity_self_2_at_L : (memory voidP Int32.t))
  (_Queue_array_self_2_at_L : (memory voidP (pointer voidP)))
  =
     ((((<=) (offset_min voidP_self_2_alloc_table_at_L self) (0)) /\
      (((>=) (offset_max voidP_self_2_alloc_table_at_L self) (0)) /\
      ((=) true true)))
     /\
     ((Int32.(>) (select _Queue_capacity_self_2_at_L self)
      (#"whole_program.jc" 73 28 40# "expl:Integer cast" (Int32.of_int (1))))
     /\
     ((if
       ((<=) (0)
       (Int.(-) (Int32.to_int (select _Queue_capacity_self_2_at_L self)) (1)))
       then
       (((<=)
        (offset_min voidP_array_14_alloc_table_at_L
        (select _Queue_array_self_2_at_L self)) (0))
       /\
       (((>=)
        (offset_max voidP_array_14_alloc_table_at_L
        (select _Queue_array_self_2_at_L self))
        (Int.(-) (Int32.to_int (select _Queue_capacity_self_2_at_L self))
        (1)))
       /\
       (forall __framac_tmp1 : int.
        ((((<=) (0) __framac_tmp1) /\
         ((<=) __framac_tmp1
         (Int.(-) (Int32.to_int (select _Queue_capacity_self_2_at_L self))
         (1)))) -> ((=) true true))))) else ((=) true true))
     /\
     ((Int32.(<=) (#"whole_program.jc" 83 10 22# "expl:Integer cast"
      (Int32.of_int (0))) (select _Queue_curr_elem_self_2_at_L self))
     /\
     ((Int32.(<) (select _Queue_curr_elem_self_2_at_L self)
      (select _Queue_capacity_self_2_at_L self))
     /\
     ((Int32.(<=) (#"whole_program.jc" 85 8 20# "expl:Integer cast"
      (Int32.of_int (0))) (select _Queue_empty_elem_self_2_at_L self))
     /\
     (Int32.(<) (select _Queue_empty_elem_self_2_at_L self)
     (select _Queue_capacity_self_2_at_L self))))))))
  
  
end

theory Logic_is_empty_queue

  use import core.Voidp 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  predicate is_empty_queue (self_0 : (pointer voidP))
  (_Queue_empty_elem_self_0_3_at_L : (memory voidP Int32.t))
  (_Queue_curr_elem_self_0_3_at_L : (memory voidP Int32.t))
  =
     (Int32.(=) (select _Queue_curr_elem_self_0_3_at_L self_0)
     (select _Queue_empty_elem_self_0_3_at_L self_0))
  
  
end

module Function_q_init_behaviors
#"/home/nik/Projects/ver/sem_6/queue.h" 52 4 44# "expl:q_init, behaviors"

  use import core.Voidp 
  
  use import core.Upd_unsafe 
  
  use Unsafe_uint64_of_Unsafe_int32 
  
  use Unsafe_uint64 
  
  use Unsafe_int32 
  
  use import core.Tag_table_type 
  
  use import Struct_intP_safe 
  
  use import Struct_intP 
  
  use import core.Same_except 
  
  use import core.Return 
  
  use import ref.Ref 
  
  use import core.Pset_deref 
  
  use import core.Pset_all 
  
  use import core.Pset 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_is_valid_queue 
  
  use import Logic_is_empty_queue 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import core.Assigns 
  
  use import core.Alloc_table 
  
  use import core.Alloc 
  
  use why3.Bool.Bool 
  
  let q_init_ensures_default #"/home/nik/Projects/ver/sem_6/queue.h" 52 4 44#
  "expl:Function q_init, default behavior" =
  fun
   (self_1_0 : (pointer voidP)) (max_size : Int32.t)
   (voidP_self_1_8_alloc_table : ref (alloc_table voidP))
   (voidP_array_16_alloc_table : ref (alloc_table voidP))
   (voidP_array_16_tag_table : ref (tag_table voidP)) (_Queue_array_self_1_8
   : ref (memory voidP (pointer voidP))) (_Queue_capacity_self_1_8 : ref
   (memory voidP Int32.t)) (_Queue_curr_elem_self_1_8 : ref (memory voidP
   Int32.t)) (_Queue_empty_elem_self_1_8 : ref (memory voidP Int32.t)) 
   requires {
   (#"whole_program.jc" 120 12 325#
   ((#"/home/nik/Projects/ver/sem_6/queue.c" 6 13 39#
    ((<=) (Int32.to_int max_size) (Int.(-) (2147483647) (1))))
   /\
   (#"whole_program.jc" 120 12 325#
   ((#"/home/nik/Projects/ver/sem_6/queue.h" 36 13 25#
    (#"whole_program.jc" 120 12 325#
    ((#"whole_program.jc" 120 12 325#
     ((<=) (offset_min !voidP_self_1_8_alloc_table self_1_0) (0)))
    /\
    (#"whole_program.jc" 120 12 325#
    ((#"whole_program.jc" 120 12 325#
     ((>=) (offset_max !voidP_self_1_8_alloc_table self_1_0) (0)))
    /\ (#"whole_program.jc" 120 12 325# ((=) true true)))))))
   /\
   (#"/home/nik/Projects/ver/sem_6/queue.h" 37 13 25#
   (Int32.(>) max_size (#"whole_program.jc" 124 36 48# "expl:Integer cast"
   (Int32.of_int (0))))))))) }
   ensures {
     ("expl:Postcondition"
     ((#"whole_program.jc" 130 12 33# "expl:Allocates clause"
      (((#"whole_program.jc" 130 12 33# "expl:Allocates clause"
        (alloc_same_except (old !voidP_array_16_alloc_table)
        !voidP_array_16_alloc_table
        (pset_all
        (pset_deref !_Queue_array_self_1_8 (pset_singleton self_1_0)))))
       /\
       (#"whole_program.jc" 130 12 33# "expl:Allocates clause"
       (alloc_same_except (old !voidP_self_1_8_alloc_table)
       !voidP_self_1_8_alloc_table pset_empty)))
      /\
      (#"whole_program.jc" 130 12 33# "expl:Allocates clause"
      (tag_extends (old !voidP_array_16_tag_table) !voidP_array_16_tag_table))))
     /\
     (((((#"whole_program.jc" 126 10 82# "expl:Assigns clause"
         (not_assigns (old !voidP_self_1_8_alloc_table)
         !voidP_self_1_8_alloc_table (old !_Queue_array_self_1_8)
         !_Queue_array_self_1_8 (pset_singleton self_1_0)))
        /\
        (#"whole_program.jc" 126 10 82# "expl:Assigns clause"
        (not_assigns (old !voidP_self_1_8_alloc_table)
        !voidP_self_1_8_alloc_table (old !_Queue_capacity_self_1_8)
        !_Queue_capacity_self_1_8 (pset_singleton self_1_0))))
       /\
       (#"whole_program.jc" 126 10 82# "expl:Assigns clause"
       (not_assigns (old !voidP_self_1_8_alloc_table)
       !voidP_self_1_8_alloc_table (old !_Queue_curr_elem_self_1_8)
       !_Queue_curr_elem_self_1_8 (pset_singleton self_1_0))))
      /\
      (#"whole_program.jc" 126 10 82# "expl:Assigns clause"
      (not_assigns (old !voidP_self_1_8_alloc_table)
      !voidP_self_1_8_alloc_table (old !_Queue_empty_elem_self_1_8)
      !_Queue_empty_elem_self_1_8 (pset_singleton self_1_0))))
     /\
     (#"/home/nik/Projects/ver/sem_6/queue.h" 44 12 51# "expl:Ensures clause"
     (#"/home/nik/Projects/ver/sem_6/queue.h" 44 12 51# "expl:Ensures clause"
     ((#"/home/nik/Projects/ver/sem_6/queue.h" 44 12 51#
      "expl:Ensures clause"
      ((Int32.(=) result (#"whole_program.jc" 131 42 54# "expl:Integer cast"
       (Int32.of_int (0)))) ->
       ((strict_left_valid_struct_intP
        (select !_Queue_array_self_1_8 self_1_0) (0)
        !voidP_array_16_alloc_table)
       /\
       (right_valid_struct_intP (select !_Queue_array_self_1_8 self_1_0)
       (Int.(-_) 1) !voidP_array_16_alloc_table))))
     /\
     (#"/home/nik/Projects/ver/sem_6/queue.h" 44 12 51# "expl:Ensures clause"
     ((#"/home/nik/Projects/ver/sem_6/queue.h" 46 12 57#
      "expl:Ensures clause"
      ((Int32.(=) result (#"whole_program.jc" 133 44 56# "expl:Integer cast"
       (Int32.of_int (0)))) ->
       (fresh_alloc_struct_intP (select !_Queue_array_self_1_8 self_1_0) (0)
       (old !voidP_array_16_alloc_table))))
     /\
     (#"/home/nik/Projects/ver/sem_6/queue.h" 44 12 51# "expl:Ensures clause"
     ((#"/home/nik/Projects/ver/sem_6/queue.h" 47 12 49#
      "expl:Ensures clause"
      ((Int32.(=) result (#"whole_program.jc" 135 46 58# "expl:Integer cast"
       (Int32.of_int (0)))) ->
       (is_valid_queue self_1_0 !voidP_array_16_alloc_table
       !voidP_self_1_8_alloc_table !_Queue_empty_elem_self_1_8
       !_Queue_curr_elem_self_1_8 !_Queue_capacity_self_1_8
       !_Queue_array_self_1_8)))
     /\
     (#"/home/nik/Projects/ver/sem_6/queue.h" 44 12 51# "expl:Ensures clause"
     ((#"/home/nik/Projects/ver/sem_6/queue.h" 48 12 49#
      "expl:Ensures clause"
      ((Int32.(=) result (#"whole_program.jc" 137 48 60# "expl:Integer cast"
       (Int32.of_int (0)))) ->
       (is_empty_queue self_1_0 !_Queue_empty_elem_self_1_8
       !_Queue_curr_elem_self_1_8)))
     /\
     (#"/home/nik/Projects/ver/sem_6/queue.h" 49 12 91# "expl:Ensures clause"
     ((Int32.(=) result (#"whole_program.jc" 139 49 61# "expl:Integer cast"
      (Int32.of_int (0)))) ->
      (((<=) (Int32.to_int max_size) (Int.(-) (2147483647) (1))) /\
      ((=) (Int32.to_int (select !_Queue_capacity_self_1_8 self_1_0))
      (Int.(+) (Int32.to_int max_size) (1)))))))))))))))))) }  ->
   'Init:
   (let return = ref (Unsafe_int32.any_  () ) in
   try
    begin
    (let __retres = ref (Unsafe_int32.any_  () ) in
    begin
    (let _jessie_7 =
    (#"/home/nik/Projects/ver/sem_6/queue.c" 11 18 54# "expl:Allocation size"
    (allocate_struct_intP 
     (Unsafe_uint64.to_int 
      (#"/home/nik/Projects/ver/sem_6/queue.c" 11 26 38# "expl:Integer cast"
      (Unsafe_uint64_of_Unsafe_int32.cast 
       (Unsafe_int32.(+)  max_size
        (#"whole_program.jc" 150 68 80# "expl:Integer cast"
        (Unsafe_int32.of_int (1))) ) )) ) voidP_array_16_alloc_table
     voidP_array_16_tag_table )) in
    (let _jessie_8 = self_1_0 in
    (let _jessie_9 = (0) in
    (let _jessie_10 = _jessie_8 in
    (upd  _Queue_array_self_1_8 _jessie_10 _jessie_7 )))));
     begin
     (let _jessie_12 =
     (Unsafe_int32.(+)  max_size
      (#"whole_program.jc" 152 61 73# "expl:Integer cast"
      (Unsafe_int32.of_int (1))) ) in
     (let _jessie_13 = self_1_0 in
     (let _jessie_14 = (0) in
     (let _jessie_15 = _jessie_13 in
     (upd  _Queue_capacity_self_1_8 _jessie_15 _jessie_12 )))));
      begin
      (let _jessie_17 =
      (#"whole_program.jc" 153 45 57# "expl:Integer cast"
      (Unsafe_int32.of_int (0))) in
      (let _jessie_18 = self_1_0 in
      (let _jessie_19 = (0) in
      (let _jessie_20 = _jessie_18 in
      (upd  _Queue_curr_elem_self_1_8 _jessie_20 _jessie_17 )))));
       begin
       (let _jessie_22 =
       (#"whole_program.jc" 154 46 58# "expl:Integer cast"
       (Unsafe_int32.of_int (0))) in
       (let _jessie_23 = self_1_0 in
       (let _jessie_24 = (0) in
       (let _jessie_25 = _jessie_23 in
       (upd  _Queue_empty_elem_self_1_8 _jessie_25 _jessie_22 )))));
        begin
        (__retres :=
         (#"whole_program.jc" 155 27 39# "expl:Integer cast"
         (Unsafe_int32.of_int (0))));
         begin (return := !__retres); (raise Return) end end end end end end);
     absurd  end with Return -> !return end)
  
end

module Function_q_clear_safety
#"/home/nik/Projects/ver/sem_6/queue.h" 66 5 32# "expl:q_clear, safety"

  use import core.Voidp 
  
  use import core.Upd_safe 
  
  use import Struct_intP_unsafe 
  
  use import Struct_intP 
  
  use import core.Return 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_is_valid_queue 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import core.Alloc_table 
  
  use import core.Acc_safe 
  
  use why3.Bool.Bool 
  
  let q_clear #"/home/nik/Projects/ver/sem_6/queue.h" 66 5 32#
  "expl:Function q_clear, safety" =
  fun
   (self_0_0 : (pointer voidP)) (voidP_self_0_9_alloc_table : ref
   (alloc_table voidP)) (voidP_array_18_alloc_table : ref (alloc_table
   voidP)) (_Queue_array_self_0_9 : ref (memory voidP (pointer voidP)))
   (_Queue_capacity_self_0_9 : ref (memory voidP Int32.t))
   (_Queue_curr_elem_self_0_9 : ref (memory voidP Int32.t))
   (_Queue_empty_elem_self_0_9 : ref (memory voidP Int32.t)) 
   requires {
   (#"whole_program.jc" 162 12 310#
   ((#"/home/nik/Projects/ver/sem_6/queue.h" 55 13 25#
    (#"whole_program.jc" 162 12 310#
    ((#"whole_program.jc" 162 12 310#
     ((<=) (offset_min !voidP_self_0_9_alloc_table self_0_0) (0)))
    /\
    (#"whole_program.jc" 162 12 310#
    ((#"whole_program.jc" 162 12 310#
     ((>=) (offset_max !voidP_self_0_9_alloc_table self_0_0) (0)))
    /\ (#"whole_program.jc" 162 12 310# ((=) true true)))))))
   /\
   (#"whole_program.jc" 162 12 310#
   ((#"/home/nik/Projects/ver/sem_6/queue.h" 56 13 35#
    (#"whole_program.jc" 162 12 310#
    ((#"whole_program.jc" 162 12 310#
     (strict_left_valid_struct_intP (select !_Queue_array_self_0_9 self_0_0)
     (0) !voidP_array_18_alloc_table))
    /\
    (#"whole_program.jc" 162 12 310#
    (right_valid_struct_intP (select !_Queue_array_self_0_9 self_0_0)
    (Int.(-_) 1) !voidP_array_18_alloc_table)))))
   /\
   (#"/home/nik/Projects/ver/sem_6/queue.h" 57 13 33#
   (is_valid_queue self_0_0 !voidP_array_18_alloc_table
   !voidP_self_0_9_alloc_table !_Queue_empty_elem_self_0_9
   !_Queue_curr_elem_self_0_9 !_Queue_capacity_self_0_9
   !_Queue_array_self_0_9)))))) } ensures { ("expl:Postcondition" true) }  ->
   'Init:
   try
    begin
    (#"/home/nik/Projects/ver/sem_6/queue.c" 20 4 21#
    (free_struct_intP 
     (#"/home/nik/Projects/ver/sem_6/queue.c" 20 9 20#
     "expl:Pointer dereference"
     (acc  !voidP_self_0_9_alloc_table !_Queue_array_self_0_9 self_0_0 ))
     voidP_array_18_alloc_table ));
     begin
     (let _jessie_56 =
     (let _jessie_55 = (null  ) in
     begin
     (assert {
     (#"/home/nik/Projects/ver/sem_6/queue.c" 21 4 66#
     "expl:Pointer index bounds" true) }); _jessie_55 end) in
     (let _jessie_57 = self_0_0 in
     (let _jessie_58 = (0) in
     (let _jessie_59 = _jessie_57 in
     (#"/home/nik/Projects/ver/sem_6/queue.c" 21 4 66#
     "expl:Pointer dereference"
     (upd  !voidP_self_0_9_alloc_table _Queue_array_self_0_9 _jessie_57
      _jessie_56 )))))); (raise Return) end; (raise Return) end with Return
    -> () end
  
end

module Function_q_clear_behaviors
#"/home/nik/Projects/ver/sem_6/queue.h" 66 5 32# "expl:q_clear, behaviors"

  use import core.Voidp 
  
  use import core.Upd_unsafe 
  
  use import Struct_intP_safe 
  
  use import Struct_intP 
  
  use import core.Same_except 
  
  use import core.Return 
  
  use import ref.Ref 
  
  use import core.Pset_deref 
  
  use import core.Pset_all 
  
  use import core.Pset 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_is_valid_queue 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import core.Assigns 
  
  use import core.Alloc_table 
  
  use import core.Acc_unsafe 
  
  use why3.Bool.Bool 
  
  let q_clear_ensures_default
  #"/home/nik/Projects/ver/sem_6/queue.h" 66 5 32#
  "expl:Function q_clear, default behavior" =
  fun
   (self_0_0 : (pointer voidP)) (voidP_self_0_9_alloc_table : ref
   (alloc_table voidP)) (voidP_array_18_alloc_table : ref (alloc_table
   voidP)) (_Queue_array_self_0_9 : ref (memory voidP (pointer voidP)))
   (_Queue_capacity_self_0_9 : ref (memory voidP Int32.t))
   (_Queue_curr_elem_self_0_9 : ref (memory voidP Int32.t))
   (_Queue_empty_elem_self_0_9 : ref (memory voidP Int32.t)) 
   requires {
   (#"whole_program.jc" 162 12 310#
   ((#"/home/nik/Projects/ver/sem_6/queue.h" 55 13 25#
    (#"whole_program.jc" 162 12 310#
    ((#"whole_program.jc" 162 12 310#
     ((<=) (offset_min !voidP_self_0_9_alloc_table self_0_0) (0)))
    /\
    (#"whole_program.jc" 162 12 310#
    ((#"whole_program.jc" 162 12 310#
     ((>=) (offset_max !voidP_self_0_9_alloc_table self_0_0) (0)))
    /\ (#"whole_program.jc" 162 12 310# ((=) true true)))))))
   /\
   (#"whole_program.jc" 162 12 310#
   ((#"/home/nik/Projects/ver/sem_6/queue.h" 56 13 35#
    (#"whole_program.jc" 162 12 310#
    ((#"whole_program.jc" 162 12 310#
     (strict_left_valid_struct_intP (select !_Queue_array_self_0_9 self_0_0)
     (0) !voidP_array_18_alloc_table))
    /\
    (#"whole_program.jc" 162 12 310#
    (right_valid_struct_intP (select !_Queue_array_self_0_9 self_0_0)
    (Int.(-_) 1) !voidP_array_18_alloc_table)))))
   /\
   (#"/home/nik/Projects/ver/sem_6/queue.h" 57 13 33#
   (is_valid_queue self_0_0 !voidP_array_18_alloc_table
   !voidP_self_0_9_alloc_table !_Queue_empty_elem_self_0_9
   !_Queue_curr_elem_self_0_9 !_Queue_capacity_self_0_9
   !_Queue_array_self_0_9)))))) }
   ensures {
     ("expl:Postcondition"
     ((#"whole_program.jc" 172 12 33# "expl:Allocates clause"
      ((#"whole_program.jc" 172 12 33# "expl:Allocates clause"
       (alloc_same_except (old !voidP_array_18_alloc_table)
       !voidP_array_18_alloc_table
       (pset_all
       (pset_deref (old !_Queue_array_self_0_9) (pset_singleton self_0_0)))))
      /\
      (#"whole_program.jc" 172 12 33# "expl:Allocates clause"
      (alloc_same_except (old !voidP_self_0_9_alloc_table)
      !voidP_self_0_9_alloc_table pset_empty))))
     /\
     (((((#"whole_program.jc" 168 10 82# "expl:Assigns clause"
         (not_assigns (old !voidP_self_0_9_alloc_table)
         !voidP_self_0_9_alloc_table (old !_Queue_array_self_0_9)
         !_Queue_array_self_0_9 (pset_singleton self_0_0)))
        /\
        (#"whole_program.jc" 168 10 82# "expl:Assigns clause"
        (not_assigns (old !voidP_self_0_9_alloc_table)
        !voidP_self_0_9_alloc_table (old !_Queue_capacity_self_0_9)
        !_Queue_capacity_self_0_9 (pset_singleton self_0_0))))
       /\
       (#"whole_program.jc" 168 10 82# "expl:Assigns clause"
       (not_assigns (old !voidP_self_0_9_alloc_table)
       !voidP_self_0_9_alloc_table (old !_Queue_curr_elem_self_0_9)
       !_Queue_curr_elem_self_0_9 (pset_singleton self_0_0))))
      /\
      (#"whole_program.jc" 168 10 82# "expl:Assigns clause"
      (not_assigns (old !voidP_self_0_9_alloc_table)
      !voidP_self_0_9_alloc_table (old !_Queue_empty_elem_self_0_9)
      !_Queue_empty_elem_self_0_9 (pset_singleton self_0_0))))
     /\
     (#"/home/nik/Projects/ver/sem_6/queue.h" 63 12 45# "expl:Ensures clause"
     (fresh_alloc_struct_intP (select (old !_Queue_array_self_0_9) self_0_0)
     (0) !voidP_array_18_alloc_table))))) }  ->
   'Init:
   try
    begin
    (#"/home/nik/Projects/ver/sem_6/queue.c" 20 4 21#
    (safe_free_struct_intP  (acc  !_Queue_array_self_0_9 self_0_0 )
     voidP_array_18_alloc_table ));
     begin
     (let _jessie_51 = (null  ) in
     (let _jessie_52 = self_0_0 in
     (let _jessie_53 = (0) in
     (let _jessie_54 = _jessie_52 in
     (upd  _Queue_array_self_0_9 _jessie_54 _jessie_51 ))))); (raise Return)
     end; (raise Return) end with Return -> () end
  
end

module Exceptions

  use why3.Bool.Bool 
  
  exception Goto__LAND_exc unit
  
  exception Goto__LAND_0_exc unit
  
  exception Goto_return_label_0_exc unit
  
  exception Goto_return_label_1_exc unit
  
  exception Loop_continue_exc unit
  
  exception Loop_exit_exc unit
  
  exception Return_label_exc unit
  
end

theory Logic_get_item

  use import core.Voidp 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use enum.Int32 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  function get_item (self_2 : (pointer voidP)) (item_number : int)
  (_Queue_curr_elem_self_2_5_at_L : (memory voidP Int32.t))
  (_Queue_capacity_self_2_5_at_L : (memory voidP Int32.t))
  (_Queue_array_self_2_5_at_L : (memory voidP (pointer voidP)))
  (intP_intM_array_15_at_L : (memory voidP Int32.t)) : int
  =
     (Int32.to_int
     (if
      ((<)
      (Int.(+) (Int32.to_int (select _Queue_curr_elem_self_2_5_at_L self_2))
      item_number)
      (Int32.to_int (select _Queue_capacity_self_2_5_at_L self_2))) then
      (select intP_intM_array_15_at_L
      (shift (select _Queue_array_self_2_5_at_L self_2)
      (Int.(+) (Int32.to_int (select _Queue_curr_elem_self_2_5_at_L self_2))
      item_number))) else
      (select intP_intM_array_15_at_L
      (shift (select _Queue_array_self_2_5_at_L self_2)
      (Int.(-)
      (Int.(+) (Int32.to_int (select _Queue_curr_elem_self_2_5_at_L self_2))
      item_number)
      (Int32.to_int (select _Queue_capacity_self_2_5_at_L self_2)))))))
  
  
end

theory Logic_queue_size

  use import core.Voidp 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use enum.Int32 
  
  use int.Int 
  
  use why3.Bool.Bool 
  
  function queue_size (self_1 : (pointer voidP))
  (_Queue_empty_elem_self_1_4_at_L : (memory voidP Int32.t))
  (_Queue_curr_elem_self_1_4_at_L : (memory voidP Int32.t))
  (_Queue_capacity_self_1_4_at_L : (memory voidP Int32.t)) : int
  =
     (if
      (Int32.(>=) (select _Queue_empty_elem_self_1_4_at_L self_1)
      (select _Queue_curr_elem_self_1_4_at_L self_1)) then
      (Int.(-) (Int32.to_int (select _Queue_empty_elem_self_1_4_at_L self_1))
      (Int32.to_int (select _Queue_curr_elem_self_1_4_at_L self_1))) else
      (Int.(-)
      (Int.(+) (Int32.to_int (select _Queue_capacity_self_1_4_at_L self_1))
      (Int32.to_int (select _Queue_empty_elem_self_1_4_at_L self_1)))
      (Int32.to_int (select _Queue_curr_elem_self_1_4_at_L self_1))))
  
  
end

module Function_q_add_safety #"/home/nik/Projects/ver/sem_6/queue.h" 82 4 39#
"expl:q_add, safety"

  use import core.Voidp 
  
  use import core.Upd_safe 
  
  use import core.Upd_offset_safe 
  
  use import core.Tag_table_type 
  
  use import core.Shift_safe 
  
  use Safe_int32 
  
  use import core.Return 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_queue_size 
  
  use import Logic_is_valid_queue 
  
  use import Logic_get_item 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Exceptions 
  
  use import core.Alloc_table 
  
  use import core.Acc_safe 
  
  use why3.Bool.Bool 
  
  let q_add #"/home/nik/Projects/ver/sem_6/queue.h" 82 4 39#
  "expl:Function q_add, safety" =
  fun
   (self_5 : (pointer voidP)) (elem : Int32.t) (intP_intM_array_20 : ref
   (memory voidP Int32.t)) (_Queue_array_self_10 : ref (memory voidP (pointer
   voidP))) (_Queue_capacity_self_10 : ref (memory voidP Int32.t))
   (_Queue_curr_elem_self_10 : ref (memory voidP Int32.t))
   (_Queue_empty_elem_self_10 : ref (memory voidP Int32.t))
   (voidP_self_10_alloc_table : (alloc_table voidP))
   (voidP_array_20_alloc_table : (alloc_table voidP))
   (voidP_array_20_tag_table : (tag_table voidP)) 
   requires {
   (#"whole_program.jc" 183 12 244#
   ((#"/home/nik/Projects/ver/sem_6/queue.h" 69 13 25#
    (#"whole_program.jc" 183 12 244#
    ((#"whole_program.jc" 183 12 244#
     ((<=) (offset_min voidP_self_10_alloc_table self_5) (0)))
    /\
    (#"whole_program.jc" 183 12 244#
    ((#"whole_program.jc" 183 12 244#
     ((>=) (offset_max voidP_self_10_alloc_table self_5) (0)))
    /\ (#"whole_program.jc" 183 12 244# ((=) true true)))))))
   /\
   (#"/home/nik/Projects/ver/sem_6/queue.h" 70 13 33#
   (is_valid_queue self_5 voidP_array_20_alloc_table
   voidP_self_10_alloc_table !_Queue_empty_elem_self_10
   !_Queue_curr_elem_self_10 !_Queue_capacity_self_10 !_Queue_array_self_10))))
   } ensures { ("expl:Postcondition" true) }  ->
   'Init:
   (let return = ref (Safe_int32.any_  () ) in
   try
    begin
    (let __retres_0 = ref (Safe_int32.any_  () ) in
    try
     begin
     (if
     (#"/home/nik/Projects/ver/sem_6/queue.c" 25 8 66#
     (Safe_int32.(=) 
      (#"/home/nik/Projects/ver/sem_6/queue.c" 25 8 47#
      "expl:Division by zero"
      (Safe_int32.(%) 
       (Safe_int32.(+) 
        (#"/home/nik/Projects/ver/sem_6/queue.c" 25 9 25#
        "expl:Pointer dereference"
        (acc  voidP_self_10_alloc_table !_Queue_empty_elem_self_10 self_5 ))
        (#"whole_program.jc" 213 61 73# "expl:Integer cast"
        (Safe_int32.of_int (1))) )
       (#"/home/nik/Projects/ver/sem_6/queue.c" 25 33 47#
       "expl:Pointer dereference"
       (acc  voidP_self_10_alloc_table !_Queue_capacity_self_10 self_5 )) ))
      (#"/home/nik/Projects/ver/sem_6/queue.c" 25 51 66#
      "expl:Pointer dereference"
      (acc  voidP_self_10_alloc_table !_Queue_curr_elem_self_10 self_5 )) ))
     then
      begin
      (__retres_0 :=
       (let _jessie_73 =
       (#"whole_program.jc" 216 32 45# "expl:Integer cast"
       (Safe_int32.of_int  (Int.(-_)  (1) ) )) in
       begin
       (assert {
       (#"/home/nik/Projects/ver/sem_6/queue.c" 26 8 18#
       "expl:Pointer index bounds" true) }); _jessie_73 end));
       (raise (Return_label_exc ())) end else ());
      begin
      (let _jessie_81 =
      (let _jessie_80 = elem in
      begin
      (assert {
      (#"/home/nik/Projects/ver/sem_6/queue.c" 29 4 40#
      "expl:Pointer index bounds" true) }); _jessie_80 end) in
      (let _jessie_82 =
      (#"/home/nik/Projects/ver/sem_6/queue.c" 29 4 15#
      "expl:Pointer dereference"
      (acc  voidP_self_10_alloc_table !_Queue_array_self_10 self_5 )) in
      (let _jessie_83 =
      (Safe_int32.to_int 
       (#"/home/nik/Projects/ver/sem_6/queue.c" 29 16 32#
       "expl:Pointer dereference"
       (acc  voidP_self_10_alloc_table !_Queue_empty_elem_self_10 self_5 )) )
      in
      (let _jessie_84 = (shift_typesafe  _jessie_82 _jessie_83 ) in
      (#"/home/nik/Projects/ver/sem_6/queue.c" 29 4 40#
      "expl:Pointer dereference"
      (upd_offset_typesafe  voidP_array_20_alloc_table intP_intM_array_20
       _jessie_82 _jessie_83 _jessie_81 ))))));
       begin
       any unit
       requires { true } reads { _Queue_array_self_10,
       _Queue_capacity_self_10, _Queue_curr_elem_self_10,
       _Queue_empty_elem_self_10, elem, intP_intM_array_20, self_5 }
       ensures {
         (#"/home/nik/Projects/ver/sem_6/queue.c" 30 15 55#
         ((=)
         (get_item self_5
         (queue_size self_5 !_Queue_empty_elem_self_10
         !_Queue_curr_elem_self_10 !_Queue_capacity_self_10)
         !_Queue_curr_elem_self_10 !_Queue_capacity_self_10
         !_Queue_array_self_10 !intP_intM_array_20) (Int32.to_int elem))) } ;
        () end;
       begin
       (let _jessie_76 =
       (let _jessie_75 =
       (#"/home/nik/Projects/ver/sem_6/queue.c" 32 23 62#
       "expl:Division by zero"
       (Safe_int32.(%) 
        (Safe_int32.(+) 
         (#"/home/nik/Projects/ver/sem_6/queue.c" 32 24 40#
         "expl:Pointer dereference"
         (acc  voidP_self_10_alloc_table !_Queue_empty_elem_self_10 self_5 ))
         (#"whole_program.jc" 233 66 78# "expl:Integer cast"
         (Safe_int32.of_int (1))) )
        (#"/home/nik/Projects/ver/sem_6/queue.c" 32 48 62#
        "expl:Pointer dereference"
        (acc  voidP_self_10_alloc_table !_Queue_capacity_self_10 self_5 )) ))
       in
       begin
       (assert {
       (#"/home/nik/Projects/ver/sem_6/queue.c" 32 4 62#
       "expl:Pointer index bounds" true) }); _jessie_75 end) in
       (let _jessie_77 = self_5 in
       (let _jessie_78 = (0) in
       (let _jessie_79 = _jessie_77 in
       (#"/home/nik/Projects/ver/sem_6/queue.c" 32 4 62#
       "expl:Pointer dereference"
       (upd  voidP_self_10_alloc_table _Queue_empty_elem_self_10 _jessie_77
        _jessie_76 ))))));
        begin
        (__retres_0 :=
         (let _jessie_74 =
         (#"whole_program.jc" 235 29 41# "expl:Integer cast"
         (Safe_int32.of_int (0))) in
         begin
         (assert {
         (#"/home/nik/Projects/ver/sem_6/queue.c" 34 4 13#
         "expl:Pointer index bounds" true) }); _jessie_74 end));
         (raise (Return_label_exc ())) end end end end with Return_label_exc
     _jessie_1 ->
     'Return_label:
     'Return_label:
     begin
     (return :=
      (let _jessie_85 = !__retres_0 in
      begin
      (assert {
      (#"whole_program.jc" 237 7 24# "expl:Pointer index bounds" true) });
       _jessie_85 end)); (raise Return) end end); absurd  end with Return ->
    !return end)
  
end

theory Logic_is_full_queue

  use import core.Voidp 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use enum.Int32 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  predicate is_full_queue (self_4 : (pointer voidP))
  (_Queue_empty_elem_self_4_7_at_L : (memory voidP Int32.t))
  (_Queue_curr_elem_self_4_7_at_L : (memory voidP Int32.t))
  (_Queue_capacity_self_4_7_at_L : (memory voidP Int32.t))
  =
     (if
      ((<)
      (Int.(+) (Int32.to_int (select _Queue_empty_elem_self_4_7_at_L self_4))
      (1)) (Int32.to_int (select _Queue_capacity_self_4_7_at_L self_4))) then
      ((=)
      (Int.(+) (Int32.to_int (select _Queue_empty_elem_self_4_7_at_L self_4))
      (1)) (Int32.to_int (select _Queue_curr_elem_self_4_7_at_L self_4)))
      else
      ((=)
      (Int.(-)
      (Int.(+) (Int32.to_int (select _Queue_empty_elem_self_4_7_at_L self_4))
      (1)) (Int32.to_int (select _Queue_capacity_self_4_7_at_L self_4)))
      (Int32.to_int (select _Queue_curr_elem_self_4_7_at_L self_4))))
  
  
end

theory Logic_same_items

  use import core.Voidp 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_get_item 
  
  use enum.Int32 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  predicate same_items (self_3 : (pointer voidP)) (begin_0 : int) (size :
  int) (_Queue_curr_elem_self_3_6_at_L2 : (memory voidP Int32.t))
  (_Queue_curr_elem_self_3_6_at_L1 : (memory voidP Int32.t))
  (_Queue_capacity_self_3_6_at_L2 : (memory voidP Int32.t))
  (_Queue_capacity_self_3_6_at_L1 : (memory voidP Int32.t))
  (_Queue_array_self_3_6_at_L2 : (memory voidP (pointer voidP)))
  (_Queue_array_self_3_6_at_L1 : (memory voidP (pointer voidP)))
  (intP_intM_array_27_at_L2 : (memory voidP Int32.t))
  (intP_intM_array_27_at_L1 : (memory voidP Int32.t))
  =
     (forall k_1 : int.
      ((((<=) begin_0 k_1) /\ ((<) k_1 (Int.(+) begin_0 size))) ->
       ((=)
       (get_item self_3 k_1 _Queue_curr_elem_self_3_6_at_L1
       _Queue_capacity_self_3_6_at_L1 _Queue_array_self_3_6_at_L1
       intP_intM_array_27_at_L1)
       (get_item self_3 k_1 _Queue_curr_elem_self_3_6_at_L2
       _Queue_capacity_self_3_6_at_L2 _Queue_array_self_3_6_at_L2
       intP_intM_array_27_at_L2))))
  
  
end

module Function_q_add_behaviors
#"/home/nik/Projects/ver/sem_6/queue.h" 82 4 39# "expl:q_add, behaviors"

  use import core.Voidp 
  
  use import core.Upd_unsafe 
  
  use Unsafe_int32 
  
  use import core.Tag_table_type 
  
  use import core.Shift_unsafe 
  
  use import core.Return 
  
  use import ref.Ref 
  
  use import core.Pset_range 
  
  use import core.Pset_deref 
  
  use import core.Pset 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_same_items 
  
  use import Logic_queue_size 
  
  use import Logic_is_valid_queue 
  
  use import Logic_is_full_queue 
  
  use import Logic_get_item 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Exceptions 
  
  use import core.Assigns 
  
  use import core.Alloc_table 
  
  use import core.Acc_unsafe 
  
  use why3.Bool.Bool 
  
  let q_add_ensures_default #"/home/nik/Projects/ver/sem_6/queue.h" 82 4 39#
  "expl:Function q_add, default behavior" =
  fun
   (self_5 : (pointer voidP)) (elem : Int32.t) (intP_intM_array_20 : ref
   (memory voidP Int32.t)) (_Queue_array_self_10 : ref (memory voidP (pointer
   voidP))) (_Queue_capacity_self_10 : ref (memory voidP Int32.t))
   (_Queue_curr_elem_self_10 : ref (memory voidP Int32.t))
   (_Queue_empty_elem_self_10 : ref (memory voidP Int32.t))
   (voidP_self_10_alloc_table : (alloc_table voidP))
   (voidP_array_20_alloc_table : (alloc_table voidP))
   (voidP_array_20_tag_table : (tag_table voidP)) 
   requires {
   (#"whole_program.jc" 183 12 244#
   ((#"/home/nik/Projects/ver/sem_6/queue.h" 69 13 25#
    (#"whole_program.jc" 183 12 244#
    ((#"whole_program.jc" 183 12 244#
     ((<=) (offset_min voidP_self_10_alloc_table self_5) (0)))
    /\
    (#"whole_program.jc" 183 12 244#
    ((#"whole_program.jc" 183 12 244#
     ((>=) (offset_max voidP_self_10_alloc_table self_5) (0)))
    /\ (#"whole_program.jc" 183 12 244# ((=) true true)))))))
   /\
   (#"/home/nik/Projects/ver/sem_6/queue.h" 70 13 33#
   (is_valid_queue self_5 voidP_array_20_alloc_table
   voidP_self_10_alloc_table !_Queue_empty_elem_self_10
   !_Queue_curr_elem_self_10 !_Queue_capacity_self_10 !_Queue_array_self_10))))
   }
   ensures {
     ("expl:Postcondition"
     ((((((#"whole_program.jc" 188 10 135# "expl:Assigns clause"
          (not_assigns voidP_array_20_alloc_table voidP_array_20_alloc_table
          (old !intP_intM_array_20) !intP_intM_array_20
          (pset_range
          (pset_deref (old !_Queue_array_self_10) (pset_singleton self_5))
          (0)
          (Int.(-)
          (Int32.to_int (select (old !_Queue_capacity_self_10) self_5)) (1)))))
         /\
         (#"whole_program.jc" 188 10 135# "expl:Assigns clause"
         (not_assigns voidP_self_10_alloc_table voidP_self_10_alloc_table
         (old !_Queue_array_self_10) !_Queue_array_self_10
         (pset_singleton self_5))))
        /\
        (#"whole_program.jc" 188 10 135# "expl:Assigns clause"
        (not_assigns voidP_self_10_alloc_table voidP_self_10_alloc_table (old
        !_Queue_capacity_self_10) !_Queue_capacity_self_10
        (pset_singleton self_5))))
       /\
       (#"whole_program.jc" 188 10 135# "expl:Assigns clause"
       (not_assigns voidP_self_10_alloc_table voidP_self_10_alloc_table (old
       !_Queue_curr_elem_self_10) !_Queue_curr_elem_self_10
       (pset_singleton self_5))))
      /\
      (#"whole_program.jc" 188 10 135# "expl:Assigns clause"
      (not_assigns voidP_self_10_alloc_table voidP_self_10_alloc_table (old
      !_Queue_empty_elem_self_10) !_Queue_empty_elem_self_10
      (pset_singleton self_5))))
     /\
     (#"/home/nik/Projects/ver/sem_6/queue.h" 75 12 54# "expl:Ensures clause"
     (#"/home/nik/Projects/ver/sem_6/queue.h" 75 12 54# "expl:Ensures clause"
     ((#"/home/nik/Projects/ver/sem_6/queue.h" 75 12 54#
      "expl:Ensures clause"
      ((Int32.(=) result (#"whole_program.jc" 193 42 54# "expl:Integer cast"
       (Int32.of_int (0)))) ->
       (not
       (is_full_queue self_5 (old !_Queue_empty_elem_self_10) (old
       !_Queue_curr_elem_self_10) (old !_Queue_capacity_self_10)))))
     /\
     (#"/home/nik/Projects/ver/sem_6/queue.h" 75 12 54# "expl:Ensures clause"
     ((#"/home/nik/Projects/ver/sem_6/queue.h" 76 12 49#
      "expl:Ensures clause"
      ((Int32.(=) result (#"whole_program.jc" 195 44 56# "expl:Integer cast"
       (Int32.of_int (0)))) ->
       (is_valid_queue self_5 voidP_array_20_alloc_table
       voidP_self_10_alloc_table !_Queue_empty_elem_self_10
       !_Queue_curr_elem_self_10 !_Queue_capacity_self_10
       !_Queue_array_self_10)))
     /\
     (#"/home/nik/Projects/ver/sem_6/queue.h" 75 12 54# "expl:Ensures clause"
     ((#"/home/nik/Projects/ver/sem_6/queue.h" 77 12 82#
      "expl:Ensures clause"
      ((Int32.(=) result (#"whole_program.jc" 197 46 58# "expl:Integer cast"
       (Int32.of_int (0)))) ->
       (same_items self_5 (0)
       (queue_size self_5 (old !_Queue_empty_elem_self_10) (old
       !_Queue_curr_elem_self_10) (old !_Queue_capacity_self_10))
       !_Queue_curr_elem_self_10 (old !_Queue_curr_elem_self_10)
       !_Queue_capacity_self_10 (old !_Queue_capacity_self_10)
       !_Queue_array_self_10 (old !_Queue_array_self_10) !intP_intM_array_20
       (old !intP_intM_array_20))))
     /\
     (#"/home/nik/Projects/ver/sem_6/queue.h" 75 12 54# "expl:Ensures clause"
     ((#"/home/nik/Projects/ver/sem_6/queue.h" 78 12 74#
      "expl:Ensures clause"
      ((Int32.(=) result (#"whole_program.jc" 201 48 60# "expl:Integer cast"
       (Int32.of_int (0)))) ->
       ((=)
       (get_item self_5
       (queue_size self_5 (old !_Queue_empty_elem_self_10) (old
       !_Queue_curr_elem_self_10) (old !_Queue_capacity_self_10))
       !_Queue_curr_elem_self_10 !_Queue_capacity_self_10
       !_Queue_array_self_10 !intP_intM_array_20) (Int32.to_int elem))))
     /\
     (#"/home/nik/Projects/ver/sem_6/queue.h" 79 12 74# "expl:Ensures clause"
     ((Int32.(=) result (#"whole_program.jc" 206 49 61# "expl:Integer cast"
      (Int32.of_int (0)))) ->
      ((=)
      (Int.(+)
      (queue_size self_5 (old !_Queue_empty_elem_self_10) (old
      !_Queue_curr_elem_self_10) (old !_Queue_capacity_self_10)) (1))
      (queue_size self_5 !_Queue_empty_elem_self_10 !_Queue_curr_elem_self_10
      !_Queue_capacity_self_10))))))))))))))) }  ->
   'Init:
   (let return = ref (Unsafe_int32.any_  () ) in
   try
    begin
    (let __retres_0 = ref (Unsafe_int32.any_  () ) in
    try
     begin
     (if
     (#"/home/nik/Projects/ver/sem_6/queue.c" 25 8 66#
     (Unsafe_int32.(=) 
      (Unsafe_int32.(%) 
       (Unsafe_int32.(+)  (acc  !_Queue_empty_elem_self_10 self_5 )
        (#"whole_program.jc" 213 61 73# "expl:Integer cast"
        (Unsafe_int32.of_int (1))) ) (acc  !_Queue_capacity_self_10 self_5 )
       ) (acc  !_Queue_curr_elem_self_10 self_5 ) ))
     then
      begin
      (__retres_0 :=
       (#"whole_program.jc" 216 32 45# "expl:Integer cast"
       (Unsafe_int32.of_int  (Int.(-_)  (1) ) )));
       (raise (Return_label_exc ())) end else ());
      begin
      (let _jessie_68 = elem in
      (let _jessie_69 = (acc  !_Queue_array_self_10 self_5 ) in
      (let _jessie_70 =
      (Unsafe_int32.to_int  (acc  !_Queue_empty_elem_self_10 self_5 ) ) in
      (let _jessie_71 = (shift_  _jessie_69 _jessie_70 ) in
      (upd  intP_intM_array_20 _jessie_71 _jessie_68 )))));
       begin
       (assert {
       (#"/home/nik/Projects/ver/sem_6/queue.c" 30 15 55#
       "expl:Assertion in line 30"
       ((=)
       (get_item self_5
       (queue_size self_5 !_Queue_empty_elem_self_10
       !_Queue_curr_elem_self_10 !_Queue_capacity_self_10)
       !_Queue_curr_elem_self_10 !_Queue_capacity_self_10
       !_Queue_array_self_10 !intP_intM_array_20) (Int32.to_int elem))) });
        () end;
       begin
       (let _jessie_63 =
       (Unsafe_int32.(%) 
        (Unsafe_int32.(+)  (acc  !_Queue_empty_elem_self_10 self_5 )
         (#"whole_program.jc" 233 66 78# "expl:Integer cast"
         (Unsafe_int32.of_int (1))) ) (acc  !_Queue_capacity_self_10 self_5 )
        ) in
       (let _jessie_64 = self_5 in
       (let _jessie_65 = (0) in
       (let _jessie_66 = _jessie_64 in
       (upd  _Queue_empty_elem_self_10 _jessie_66 _jessie_63 )))));
        begin
        (__retres_0 :=
         (#"whole_program.jc" 235 29 41# "expl:Integer cast"
         (Unsafe_int32.of_int (0)))); (raise (Return_label_exc ())) end end
      end end with Return_label_exc _jessie_1 ->
     'Return_label:
     'Return_label: begin (return := !__retres_0); (raise Return) end end);
     absurd  end with Return -> !return end)
  
end

module Function_q_is_empty_safe

  use import core.Voidp 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use enum.Int32 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val q_is_empty
  (self_2_0 : (pointer voidP)) 
   (voidP_self_2_13_alloc_table : (alloc_table voidP)) 
    (_Queue_empty_elem_self_2_13 : (memory voidP Int32.t)) 
     (_Queue_curr_elem_self_2_13 : (memory voidP Int32.t)) : Int32.t
      requires { (true) } ensures { true }
  
end

module Function_q_remove_safety
#"/home/nik/Projects/ver/sem_6/queue.h" 91 4 43# "expl:q_remove, safety"

  use import core.Voidp 
  
  use import core.Upd_safe 
  
  use import core.Tag_table_type 
  
  use Safe_int32 
  
  use import core.Return 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_is_valid_queue 
  
  use enum.Int32 
  
  use import int.Int 
  
  use Function_q_is_empty_safe 
  
  use import Exceptions 
  
  use import core.Eq_pointer_safe 
  
  use import core.Alloc_table 
  
  use import core.Acc_safe 
  
  use import core.Acc_offset_safe 
  
  use why3.Bool.Bool 
  
  let q_remove #"/home/nik/Projects/ver/sem_6/queue.h" 91 4 43#
  "expl:Function q_remove, safety" =
  fun
   (self_3_0 : (pointer voidP)) (elem_0 : (pointer voidP))
   (intP_intM_elem_0_12 : ref (memory voidP Int32.t))
   (_Queue_curr_elem_self_3_11 : ref (memory voidP Int32.t))
   (voidP_self_3_11_alloc_table : (alloc_table voidP))
   (voidP_elem_0_12_alloc_table : (alloc_table voidP))
   (voidP_array_22_alloc_table : (alloc_table voidP))
   (voidP_array_22_tag_table : (tag_table voidP)) (intP_intM_array_22 :
   (memory voidP Int32.t)) (_Queue_array_self_3_11 : (memory voidP (pointer
   voidP))) (_Queue_capacity_self_3_11 : (memory voidP Int32.t))
   (_Queue_empty_elem_self_3_11 : (memory voidP Int32.t)) 
   requires {
   (#"whole_program.jc" 242 12 250#
   ((#"/home/nik/Projects/ver/sem_6/queue.h" 85 13 25#
    (#"whole_program.jc" 242 12 250#
    ((#"whole_program.jc" 242 12 250#
     ((<=) (offset_min voidP_self_3_11_alloc_table self_3_0) (0)))
    /\
    (#"whole_program.jc" 242 12 250#
    ((#"whole_program.jc" 242 12 250#
     ((>=) (offset_max voidP_self_3_11_alloc_table self_3_0) (0)))
    /\ (#"whole_program.jc" 242 12 250# ((=) true true)))))))
   /\
   (#"/home/nik/Projects/ver/sem_6/queue.h" 86 13 33#
   (is_valid_queue self_3_0 voidP_array_22_alloc_table
   voidP_self_3_11_alloc_table _Queue_empty_elem_self_3_11
   !_Queue_curr_elem_self_3_11 _Queue_capacity_self_3_11
   _Queue_array_self_3_11)))) } ensures { ("expl:Postcondition" true) }  ->
   'Init:
   (let return = ref (Safe_int32.any_  () ) in
   try
    begin
    (let tmp = ref (Safe_int32.any_  () ) in
    (let __retres_1 = ref (Safe_int32.any_  () ) in
    try
     begin
     (tmp :=
      (let _jessie_107 =
      (let _jessie_108 = self_3_0 in
      (#"/home/nik/Projects/ver/sem_6/queue.c" 38 8 24#
      "expl:Precondition for q_is_empty"
      (Function_q_is_empty_safe.q_is_empty  _jessie_108
       voidP_self_3_11_alloc_table _Queue_empty_elem_self_3_11
       !_Queue_curr_elem_self_3_11 ))) in
      begin
      (assert {
      (#"/home/nik/Projects/ver/sem_6/queue.c" 38 8 24#
      "expl:Pointer index bounds" true) }); _jessie_107 end));
      (if
      (#"/home/nik/Projects/ver/sem_6/queue.c" 38 8 24#
      (Safe_int32.(<>)  !tmp
       (#"whole_program.jc" 254 38 50# "expl:Integer cast"
       (Safe_int32.of_int (0))) ))
      then
       begin
       (__retres_1 :=
        (let _jessie_109 =
        (#"whole_program.jc" 255 32 45# "expl:Integer cast"
        (Safe_int32.of_int  (Int.(-_)  (1) ) )) in
        begin
        (assert {
        (#"/home/nik/Projects/ver/sem_6/queue.c" 39 8 18#
        "expl:Pointer index bounds" true) }); _jessie_109 end));
        (raise (Goto_return_label_0_exc ())) end else ());
      (if
      (#"/home/nik/Projects/ver/sem_6/queue.c" 42 8 17#
      (#"/home/nik/Projects/ver/sem_6/queue.c" 42 8 17#
      (neq_pointer  voidP_elem_0_12_alloc_table voidP_elem_0_12_alloc_table
       elem_0 (null  ) )))
      then
       (let _jessie_111 =
       (let _jessie_110 =
       (#"/home/nik/Projects/ver/sem_6/queue.c" 43 16 44#
       "expl:Pointer dereference"
       (acc_offset_typesafe  voidP_array_22_alloc_table intP_intM_array_22
        (#"/home/nik/Projects/ver/sem_6/queue.c" 43 16 27#
        "expl:Pointer dereference"
        (acc  voidP_self_3_11_alloc_table _Queue_array_self_3_11 self_3_0 ))
        (Safe_int32.to_int 
         (#"/home/nik/Projects/ver/sem_6/queue.c" 43 28 43#
         "expl:Pointer dereference"
         (acc  voidP_self_3_11_alloc_table !_Queue_curr_elem_self_3_11
          self_3_0 )) ) )) in
       begin
       (assert {
       (#"/home/nik/Projects/ver/sem_6/queue.c" 43 8 44#
       "expl:Pointer index bounds" true) }); _jessie_110 end) in
       (let _jessie_112 = elem_0 in
       (let _jessie_113 = (0) in
       (let _jessie_114 = _jessie_112 in
       (#"/home/nik/Projects/ver/sem_6/queue.c" 43 8 44#
       "expl:Pointer dereference"
       (upd  voidP_elem_0_12_alloc_table intP_intM_elem_0_12 _jessie_112
        _jessie_111 )))))) else ());
      begin
      (let _jessie_103 =
      (let _jessie_102 =
      (#"/home/nik/Projects/ver/sem_6/queue.c" 46 22 60#
      "expl:Division by zero"
      (Safe_int32.(%) 
       (Safe_int32.(+) 
        (#"/home/nik/Projects/ver/sem_6/queue.c" 46 23 38#
        "expl:Pointer dereference"
        (acc  voidP_self_3_11_alloc_table !_Queue_curr_elem_self_3_11
         self_3_0 ))
        (#"whole_program.jc" 265 67 79# "expl:Integer cast"
        (Safe_int32.of_int (1))) )
       (#"/home/nik/Projects/ver/sem_6/queue.c" 46 46 60#
       "expl:Pointer dereference"
       (acc  voidP_self_3_11_alloc_table _Queue_capacity_self_3_11 self_3_0 ))
       )) in
      begin
      (assert {
      (#"/home/nik/Projects/ver/sem_6/queue.c" 46 4 60#
      "expl:Pointer index bounds" true) }); _jessie_102 end) in
      (let _jessie_104 = self_3_0 in
      (let _jessie_105 = (0) in
      (let _jessie_106 = _jessie_104 in
      (#"/home/nik/Projects/ver/sem_6/queue.c" 46 4 60#
      "expl:Pointer dereference"
      (upd  voidP_self_3_11_alloc_table _Queue_curr_elem_self_3_11
       _jessie_104 _jessie_103 ))))));
       begin
       (__retres_1 :=
        (let _jessie_101 =
        (#"whole_program.jc" 267 29 41# "expl:Integer cast"
        (Safe_int32.of_int (0))) in
        begin
        (assert {
        (#"/home/nik/Projects/ver/sem_6/queue.c" 48 4 13#
        "expl:Pointer index bounds" true) }); _jessie_101 end));
        (raise (Goto_return_label_0_exc ())) end end end with
     Goto_return_label_0_exc _jessie_2 ->
     'Return_label_0:
     'Return_label_0:
     begin
     (return :=
      (let _jessie_115 = !__retres_1 in
      begin
      (assert {
      (#"whole_program.jc" 269 7 24# "expl:Pointer index bounds" true) });
       _jessie_115 end)); (raise Return) end end)); absurd  end with Return
    -> !return end)
  
end

module Function_q_is_empty

  use import core.Voidp 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use enum.Int32 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val q_is_empty
  (self_2_0 : (pointer voidP)) 
   (voidP_self_2_13_alloc_table : (alloc_table voidP)) 
    (_Queue_empty_elem_self_2_13 : (memory voidP Int32.t)) 
     (_Queue_curr_elem_self_2_13 : (memory voidP Int32.t)) : Int32.t
      requires { true } ensures { true }
  
end

module Function_q_remove_behaviors
#"/home/nik/Projects/ver/sem_6/queue.h" 91 4 43# "expl:q_remove, behaviors"

  use import core.Voidp 
  
  use import core.Upd_unsafe 
  
  use Unsafe_int32 
  
  use import core.Tag_table_type 
  
  use import core.Shift_unsafe 
  
  use import core.Return 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_is_valid_queue 
  
  use enum.Int32 
  
  use import int.Int 
  
  use Function_q_is_empty 
  
  use import Exceptions 
  
  use import core.Alloc_table 
  
  use import core.Acc_unsafe 
  
  use why3.Bool.Bool 
  
  let q_remove_ensures_default
  #"/home/nik/Projects/ver/sem_6/queue.h" 91 4 43#
  "expl:Function q_remove, default behavior" =
  fun
   (self_3_0 : (pointer voidP)) (elem_0 : (pointer voidP))
   (intP_intM_elem_0_12 : ref (memory voidP Int32.t))
   (_Queue_curr_elem_self_3_11 : ref (memory voidP Int32.t))
   (voidP_self_3_11_alloc_table : (alloc_table voidP))
   (voidP_elem_0_12_alloc_table : (alloc_table voidP))
   (voidP_array_22_alloc_table : (alloc_table voidP))
   (voidP_array_22_tag_table : (tag_table voidP)) (intP_intM_array_22 :
   (memory voidP Int32.t)) (_Queue_array_self_3_11 : (memory voidP (pointer
   voidP))) (_Queue_capacity_self_3_11 : (memory voidP Int32.t))
   (_Queue_empty_elem_self_3_11 : (memory voidP Int32.t)) 
   requires {
   (#"whole_program.jc" 242 12 250#
   ((#"/home/nik/Projects/ver/sem_6/queue.h" 85 13 25#
    (#"whole_program.jc" 242 12 250#
    ((#"whole_program.jc" 242 12 250#
     ((<=) (offset_min voidP_self_3_11_alloc_table self_3_0) (0)))
    /\
    (#"whole_program.jc" 242 12 250#
    ((#"whole_program.jc" 242 12 250#
     ((>=) (offset_max voidP_self_3_11_alloc_table self_3_0) (0)))
    /\ (#"whole_program.jc" 242 12 250# ((=) true true)))))))
   /\
   (#"/home/nik/Projects/ver/sem_6/queue.h" 86 13 33#
   (is_valid_queue self_3_0 voidP_array_22_alloc_table
   voidP_self_3_11_alloc_table _Queue_empty_elem_self_3_11
   !_Queue_curr_elem_self_3_11 _Queue_capacity_self_3_11
   _Queue_array_self_3_11)))) }
   ensures { ("expl:Postcondition" ("expl:Ensures clause" true)) }  ->
   'Init:
   (let return = ref (Unsafe_int32.any_  () ) in
   try
    begin
    (let tmp = ref (Unsafe_int32.any_  () ) in
    (let __retres_1 = ref (Unsafe_int32.any_  () ) in
    try
     begin
     (tmp :=
      (let _jessie_93 = self_3_0 in
      (#"/home/nik/Projects/ver/sem_6/queue.c" 38 8 24#
      "expl:Precondition for q_is_empty"
      (Function_q_is_empty.q_is_empty  _jessie_93 voidP_self_3_11_alloc_table
       _Queue_empty_elem_self_3_11 !_Queue_curr_elem_self_3_11 ))));
      (if
      (#"/home/nik/Projects/ver/sem_6/queue.c" 38 8 24#
      (Unsafe_int32.(<>)  !tmp
       (#"whole_program.jc" 254 38 50# "expl:Integer cast"
       (Unsafe_int32.of_int (0))) ))
      then
       begin
       (__retres_1 :=
        (#"whole_program.jc" 255 32 45# "expl:Integer cast"
        (Unsafe_int32.of_int  (Int.(-_)  (1) ) )));
        (raise (Goto_return_label_0_exc ())) end else ());
      (if
      (#"/home/nik/Projects/ver/sem_6/queue.c" 42 8 17#
      ((<>)  elem_0 (null  ) ))
      then
       (let _jessie_96 =
       (acc  intP_intM_array_22
        (shift_  (acc  _Queue_array_self_3_11 self_3_0 )
         (Unsafe_int32.to_int  (acc  !_Queue_curr_elem_self_3_11 self_3_0 ) )
         ) ) in
       (let _jessie_97 = elem_0 in
       (let _jessie_98 = (0) in
       (let _jessie_99 = _jessie_97 in
       (upd  intP_intM_elem_0_12 _jessie_99 _jessie_96 ))))) else ());
      begin
      (let _jessie_88 =
      (Unsafe_int32.(%) 
       (Unsafe_int32.(+)  (acc  !_Queue_curr_elem_self_3_11 self_3_0 )
        (#"whole_program.jc" 265 67 79# "expl:Integer cast"
        (Unsafe_int32.of_int (1))) )
       (acc  _Queue_capacity_self_3_11 self_3_0 ) ) in
      (let _jessie_89 = self_3_0 in
      (let _jessie_90 = (0) in
      (let _jessie_91 = _jessie_89 in
      (upd  _Queue_curr_elem_self_3_11 _jessie_91 _jessie_88 )))));
       begin
       (__retres_1 :=
        (#"whole_program.jc" 267 29 41# "expl:Integer cast"
        (Unsafe_int32.of_int (0)))); (raise (Goto_return_label_0_exc ())) end
      end end with Goto_return_label_0_exc _jessie_2 ->
     'Return_label_0:
     'Return_label_0: begin (return := !__retres_1); (raise Return) end end));
     absurd  end with Return -> !return end)
  
end

module Function_q_is_empty_safety
#"/home/nik/Projects/ver/sem_6/queue.h" 93 4 34# "expl:q_is_empty, safety"

  use import core.Voidp 
  
  use Safe_int32 
  
  use import core.Return 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use enum.Int32 
  
  use import core.Alloc_table 
  
  use import core.Acc_safe 
  
  use why3.Bool.Bool 
  
  let q_is_empty #"/home/nik/Projects/ver/sem_6/queue.h" 93 4 34#
  "expl:Function q_is_empty, safety" =
  fun
   (self_2_0 : (pointer voidP)) (voidP_self_2_13_alloc_table : (alloc_table
   voidP)) (_Queue_curr_elem_self_2_13 : (memory voidP Int32.t))
   (_Queue_empty_elem_self_2_13 : (memory voidP Int32.t)) 
   requires { (true) } ensures { ("expl:Postcondition" true) }  ->
   'Init:
   (let return = ref (Safe_int32.any_  () ) in
   try
    begin
    (let __retres_2 = ref (Safe_int32.any_  () ) in
    begin
    (__retres_2 :=
     (let _jessie_118 =
     (#"/home/nik/Projects/ver/sem_6/queue.c" 52 11 46# "expl:Integer cast"
     (Safe_int32.of_int 
      (if
      (#"whole_program.jc" 279 44 146#
      (Safe_int32.(=) 
       (#"/home/nik/Projects/ver/sem_6/queue.c" 52 11 26#
       "expl:Pointer dereference"
       (acc  voidP_self_2_13_alloc_table _Queue_curr_elem_self_2_13 self_2_0
        ))
       (#"/home/nik/Projects/ver/sem_6/queue.c" 52 30 46#
       "expl:Pointer dereference"
       (acc  voidP_self_2_13_alloc_table _Queue_empty_elem_self_2_13 self_2_0
        )) )) then (1) else (0)) )) in
     begin
     (assert {
     (#"/home/nik/Projects/ver/sem_6/queue.c" 52 4 47#
     "expl:Pointer index bounds" true) }); _jessie_118 end));
     begin
     (return :=
      (let _jessie_119 = !__retres_2 in
      begin
      (assert {
      (#"whole_program.jc" 282 7 24# "expl:Pointer index bounds" true) });
       _jessie_119 end)); (raise Return) end end); absurd  end with Return ->
    !return end)
  
end

module Function_q_is_empty_behaviors
#"/home/nik/Projects/ver/sem_6/queue.h" 93 4 34# "expl:q_is_empty, behaviors"

  use import core.Voidp 
  
  use Unsafe_int32 
  
  use import core.Return 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use enum.Int32 
  
  use import core.Alloc_table 
  
  use import core.Acc_unsafe 
  
  use why3.Bool.Bool 
  
  let q_is_empty_ensures_default
  #"/home/nik/Projects/ver/sem_6/queue.h" 93 4 34#
  "expl:Function q_is_empty, default behavior" =
  fun
   (self_2_0 : (pointer voidP)) (voidP_self_2_13_alloc_table : (alloc_table
   voidP)) (_Queue_curr_elem_self_2_13 : (memory voidP Int32.t))
   (_Queue_empty_elem_self_2_13 : (memory voidP Int32.t)) 
   requires { (true) }
   ensures { ("expl:Postcondition" ("expl:Ensures clause" true)) }  ->
   'Init:
   (let return = ref (Unsafe_int32.any_  () ) in
   try
    begin
    (let __retres_2 = ref (Unsafe_int32.any_  () ) in
    begin
    (__retres_2 :=
     (#"/home/nik/Projects/ver/sem_6/queue.c" 52 11 46# "expl:Integer cast"
     (Unsafe_int32.of_int 
      (if
      (#"whole_program.jc" 279 44 146#
      (Unsafe_int32.(=)  (acc  _Queue_curr_elem_self_2_13 self_2_0 )
       (acc  _Queue_empty_elem_self_2_13 self_2_0 ) )) then (1) else (0)) )));
     begin (return := !__retres_2); (raise Return) end end); absurd  end with
    Return -> !return end)
  
end

theory Struct__Queue

  use import core.Voidp_tag_id 
  
  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import core.Tag_table 
  
  use import core.Tag_id 
  
  use import core.Tag 
  
  use import Struct_voidP 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Alloc_table 
  
  use import core.Alloc 
  
  use why3.Bool.Bool 
  
  function _Queue_tag  : (tag_id voidP)
  
  axiom U__Queue_parenttag_voidP  :
  (parenttag _Queue_tag voidP_tag)
  
  axiom U__Queue_is_final  :
  (forall voidP_tag_table : (tag_table voidP).
   (forall p : (pointer voidP).
    ((instanceof voidP_tag_table p _Queue_tag) ->
     ((=) (typeof voidP_tag_table p) _Queue_tag))))
  
  predicate frame_tag_struct__Queue (p : (pointer voidP))
  (old_voidP_tag_table : (tag_table voidP)) (voidP_tag_table : (tag_table
  voidP))
  =
     ((tag_extends old_voidP_tag_table voidP_tag_table) /\
     (alloc_tag_block old_voidP_tag_table voidP_tag_table p))
  
  predicate frame_free_struct__Queue (p : (pointer voidP))
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((free_extends old_voidP_alloc_table voidP_alloc_table) /\
     (free_block old_voidP_alloc_table voidP_alloc_table p))
  
  predicate frame_alloc_struct__Queue (p : (pointer voidP)) (n : int)
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((alloc_extends old_voidP_alloc_table voidP_alloc_table) /\
     (alloc_block old_voidP_alloc_table voidP_alloc_table p n))
  
  predicate fresh_tag_struct__Queue (p : (pointer voidP)) (n : int)
  (voidP_tag_table : (tag_table voidP))
  = (fresh_tag_struct_voidP p n voidP_tag_table)
  
  predicate fresh_alloc_struct__Queue (p : (pointer voidP)) (n : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (fresh_alloc_struct_voidP p n voidP_alloc_table)
  
  predicate container_of_singleton_struct__Queue (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP)) = true
  
  predicate container_of_struct__Queue (p : (pointer voidP)) (l : int) (r :
  int) (voidP_tag_table : (tag_table voidP)) = true
  
  predicate typeof_singleton_struct__Queue (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = ((=) (typeof voidP_tag_table p) _Queue_tag)
  
  predicate typeof_struct__Queue (p : (pointer voidP)) (l : int) (r : int)
  (voidP_tag_table : (tag_table voidP))
  =
     (((=) (typeof voidP_tag_table p) _Queue_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       ((=) (typeof voidP_tag_table (shift p i)) _Queue_tag))))
  
  predicate instanceof_singleton_struct__Queue (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = (instanceof voidP_tag_table p _Queue_tag)
  
  predicate instanceof_struct__Queue (p : (pointer voidP)) (l : int) (r :
  int) (voidP_tag_table : (tag_table voidP))
  =
     ((instanceof voidP_tag_table p _Queue_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       (instanceof voidP_tag_table (shift p i) _Queue_tag))))
  
  predicate right_valid_struct__Queue (p : (pointer voidP)) (b : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (right_valid_struct_voidP p b voidP_alloc_table)
  
  predicate left_valid_struct__Queue (p : (pointer voidP)) (a : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (left_valid_struct_voidP p a voidP_alloc_table)
  
  predicate strict_left_valid_struct__Queue (p : (pointer voidP)) (a : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (strict_left_valid_struct_voidP p a voidP_alloc_table)
  
  predicate valid_struct__Queue (p : (pointer voidP)) (a : int) (b : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (valid_struct_voidP p a b voidP_alloc_table)
  
  predicate strict_valid_struct__Queue (p : (pointer voidP)) (a : int) (b :
  int) (voidP_alloc_table : (alloc_table voidP))
  = (strict_valid_struct_voidP p a b voidP_alloc_table)
  
  axiom U__Queue_int  : ((=) (int_of_tag _Queue_tag) (4))
  
end

module Struct__Queue_safe

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import Struct__Queue 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val safe_free_struct__Queue
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires { true } writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct__Queue p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      (fresh_alloc_struct__Queue p (offset_max (old !voidP_alloc_table) p)
      !voidP_alloc_table))) }
  
  val allocate_struct__Queue
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { true } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct__Queue result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct__Queue result n (old !voidP_alloc_table)
        !voidP_alloc_table)
       /\
       ((frame_tag_struct__Queue result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct__Queue result (Int.(-) n (1)) (old
        !voidP_alloc_table))
       /\
       ((fresh_tag_struct__Queue result (Int.(-) n (1)) (old
        !voidP_tag_table))
       /\
       ((typeof_struct__Queue result (0) n !voidP_tag_table) /\
       (container_of_struct__Queue result (0) n !voidP_tag_table))))))) }
  
  val allocate_singleton_struct__Queue
  (voidP_alloc_table : ref (alloc_table voidP)) 
   (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
    requires { true } writes { voidP_alloc_table, voidP_tag_table }
    ensures {
      ((strict_valid_struct__Queue result (0) (0) !voidP_alloc_table) /\
      ((frame_alloc_struct__Queue result (1) (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      ((frame_tag_struct__Queue result (old !voidP_tag_table)
       !voidP_tag_table)
      /\
      ((fresh_alloc_struct__Queue result (0) (old !voidP_alloc_table)) /\
      ((fresh_tag_struct__Queue result (0) (old !voidP_tag_table)) /\
      ((typeof_singleton_struct__Queue result !voidP_tag_table) /\
      (container_of_singleton_struct__Queue result !voidP_tag_table))))))) }
  
end

module Function_q_init_safe

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import Struct_intP 
  
  use import core.Same_except 
  
  use import ref.Ref 
  
  use import core.Pset_deref 
  
  use import core.Pset_all 
  
  use import core.Pset 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_is_valid_queue 
  
  use import Logic_is_empty_queue 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import core.Assigns 
  
  use import core.Alloc_table 
  
  use import core.Alloc 
  
  use why3.Bool.Bool 
  
  val q_init
  (self_1_0 : (pointer voidP)) 
   (max_size : Int32.t) 
    (voidP_array_16_alloc_table : ref (alloc_table voidP)) 
     (voidP_self_1_8_alloc_table : ref (alloc_table voidP)) 
      (voidP_array_16_tag_table : ref (tag_table voidP)) 
       (_Queue_empty_elem_self_1_8 : ref (memory voidP Int32.t)) 
        (_Queue_curr_elem_self_1_8 : ref (memory voidP Int32.t)) 
         (_Queue_capacity_self_1_8 : ref (memory voidP Int32.t)) 
          (_Queue_array_self_1_8 : ref (memory voidP (pointer voidP))) :
           Int32.t
           requires {
             ("expl:Internal"
             (#"whole_program.jc" 120 12 325# "expl:Requires clause"
             ((#"/home/nik/Projects/ver/sem_6/queue.c" 6 13 39#
              "expl:Requires clause"
              ((<=) (Int32.to_int max_size) (Int.(-) (2147483647) (1))))
             /\
             (#"whole_program.jc" 120 12 325# "expl:Requires clause"
             ((#"/home/nik/Projects/ver/sem_6/queue.h" 36 13 25#
              "expl:Requires clause"
              (#"whole_program.jc" 120 12 325# "expl:Requires clause"
              ((#"whole_program.jc" 120 12 325# "expl:Requires clause"
               ((<=) (offset_min !voidP_self_1_8_alloc_table self_1_0) (0)))
              /\
              (#"whole_program.jc" 120 12 325# "expl:Requires clause"
              ((#"whole_program.jc" 120 12 325# "expl:Requires clause"
               ((>=) (offset_max !voidP_self_1_8_alloc_table self_1_0) (0)))
              /\
              (#"whole_program.jc" 120 12 325# "expl:Requires clause"
              ((=) true true)))))))
             /\
             (#"/home/nik/Projects/ver/sem_6/queue.h" 37 13 25#
             "expl:Requires clause"
             (Int32.(>) max_size (#"whole_program.jc" 124 36 48#
             "expl:Integer cast" (Int32.of_int (0)))))))))) }
           reads { _Queue_array_self_1_8, _Queue_capacity_self_1_8,
           _Queue_curr_elem_self_1_8, _Queue_empty_elem_self_1_8,
           voidP_array_16_alloc_table, voidP_self_1_8_alloc_table } writes {
           _Queue_array_self_1_8, _Queue_capacity_self_1_8,
           _Queue_curr_elem_self_1_8, _Queue_empty_elem_self_1_8,
           voidP_array_16_alloc_table, voidP_array_16_tag_table,
           voidP_self_1_8_alloc_table }
           ensures {
             ((#"whole_program.jc" 130 12 33# "expl:Allocates clause"
              (((#"whole_program.jc" 130 12 33# "expl:Allocates clause"
                (alloc_same_except (old !voidP_array_16_alloc_table)
                !voidP_array_16_alloc_table
                (pset_all
                (pset_deref !_Queue_array_self_1_8 (pset_singleton self_1_0)))))
               /\
               (#"whole_program.jc" 130 12 33# "expl:Allocates clause"
               (alloc_same_except (old !voidP_self_1_8_alloc_table)
               !voidP_self_1_8_alloc_table pset_empty)))
              /\
              (#"whole_program.jc" 130 12 33# "expl:Allocates clause"
              (tag_extends (old !voidP_array_16_tag_table)
              !voidP_array_16_tag_table))))
             /\
             (((((#"whole_program.jc" 126 10 82# "expl:Assigns clause"
                 (not_assigns (old !voidP_self_1_8_alloc_table)
                 !voidP_self_1_8_alloc_table (old !_Queue_array_self_1_8)
                 !_Queue_array_self_1_8 (pset_singleton self_1_0)))
                /\
                (#"whole_program.jc" 126 10 82# "expl:Assigns clause"
                (not_assigns (old !voidP_self_1_8_alloc_table)
                !voidP_self_1_8_alloc_table (old !_Queue_capacity_self_1_8)
                !_Queue_capacity_self_1_8 (pset_singleton self_1_0))))
               /\
               (#"whole_program.jc" 126 10 82# "expl:Assigns clause"
               (not_assigns (old !voidP_self_1_8_alloc_table)
               !voidP_self_1_8_alloc_table (old !_Queue_curr_elem_self_1_8)
               !_Queue_curr_elem_self_1_8 (pset_singleton self_1_0))))
              /\
              (#"whole_program.jc" 126 10 82# "expl:Assigns clause"
              (not_assigns (old !voidP_self_1_8_alloc_table)
              !voidP_self_1_8_alloc_table (old !_Queue_empty_elem_self_1_8)
              !_Queue_empty_elem_self_1_8 (pset_singleton self_1_0))))
             /\
             (#"/home/nik/Projects/ver/sem_6/queue.h" 44 12 51#
             "expl:Ensures clause"
             (#"/home/nik/Projects/ver/sem_6/queue.h" 44 12 51#
             "expl:Ensures clause"
             ((#"/home/nik/Projects/ver/sem_6/queue.h" 44 12 51#
              "expl:Ensures clause"
              ((Int32.(=) result (#"whole_program.jc" 131 42 54#
               "expl:Integer cast" (Int32.of_int (0)))) ->
               ((strict_left_valid_struct_intP
                (select !_Queue_array_self_1_8 self_1_0) (0)
                !voidP_array_16_alloc_table)
               /\
               (right_valid_struct_intP
               (select !_Queue_array_self_1_8 self_1_0) (Int.(-_) 1)
               !voidP_array_16_alloc_table))))
             /\
             (#"/home/nik/Projects/ver/sem_6/queue.h" 44 12 51#
             "expl:Ensures clause"
             ((#"/home/nik/Projects/ver/sem_6/queue.h" 46 12 57#
              "expl:Ensures clause"
              ((Int32.(=) result (#"whole_program.jc" 133 44 56#
               "expl:Integer cast" (Int32.of_int (0)))) ->
               (fresh_alloc_struct_intP
               (select !_Queue_array_self_1_8 self_1_0) (0) (old
               !voidP_array_16_alloc_table))))
             /\
             (#"/home/nik/Projects/ver/sem_6/queue.h" 44 12 51#
             "expl:Ensures clause"
             ((#"/home/nik/Projects/ver/sem_6/queue.h" 47 12 49#
              "expl:Ensures clause"
              ((Int32.(=) result (#"whole_program.jc" 135 46 58#
               "expl:Integer cast" (Int32.of_int (0)))) ->
               (is_valid_queue self_1_0 !voidP_array_16_alloc_table
               !voidP_self_1_8_alloc_table !_Queue_empty_elem_self_1_8
               !_Queue_curr_elem_self_1_8 !_Queue_capacity_self_1_8
               !_Queue_array_self_1_8)))
             /\
             (#"/home/nik/Projects/ver/sem_6/queue.h" 44 12 51#
             "expl:Ensures clause"
             ((#"/home/nik/Projects/ver/sem_6/queue.h" 48 12 49#
              "expl:Ensures clause"
              ((Int32.(=) result (#"whole_program.jc" 137 48 60#
               "expl:Integer cast" (Int32.of_int (0)))) ->
               (is_empty_queue self_1_0 !_Queue_empty_elem_self_1_8
               !_Queue_curr_elem_self_1_8)))
             /\
             (#"/home/nik/Projects/ver/sem_6/queue.h" 49 12 91#
             "expl:Ensures clause"
             ((Int32.(=) result (#"whole_program.jc" 139 49 61#
              "expl:Integer cast" (Int32.of_int (0)))) ->
              (((<=) (Int32.to_int max_size) (Int.(-) (2147483647) (1))) /\
              ((=) (Int32.to_int (select !_Queue_capacity_self_1_8 self_1_0))
              (Int.(+) (Int32.to_int max_size) (1))))))))))))))))) }
  
end

module Function_q_add_safe

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import ref.Ref 
  
  use import core.Pset_range 
  
  use import core.Pset_deref 
  
  use import core.Pset 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_same_items 
  
  use import Logic_queue_size 
  
  use import Logic_is_valid_queue 
  
  use import Logic_is_full_queue 
  
  use import Logic_get_item 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import core.Assigns 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val q_add
  (self_5 : (pointer voidP)) 
   (elem : Int32.t) 
    (_Queue_empty_elem_self_10 : ref (memory voidP Int32.t)) 
     (_Queue_curr_elem_self_10 : ref (memory voidP Int32.t)) 
      (_Queue_capacity_self_10 : ref (memory voidP Int32.t)) 
       (_Queue_array_self_10 : ref (memory voidP (pointer voidP))) 
        (intP_intM_array_20 : ref (memory voidP Int32.t)) 
         (voidP_array_20_alloc_table : (alloc_table voidP)) 
          (voidP_self_10_alloc_table : (alloc_table voidP)) 
           (voidP_array_20_tag_table : (tag_table voidP)) : Int32.t
            requires {
              ("expl:Internal"
              (#"whole_program.jc" 183 12 244# "expl:Requires clause"
              ((#"/home/nik/Projects/ver/sem_6/queue.h" 69 13 25#
               "expl:Requires clause"
               (#"whole_program.jc" 183 12 244# "expl:Requires clause"
               ((#"whole_program.jc" 183 12 244# "expl:Requires clause"
                ((<=) (offset_min voidP_self_10_alloc_table self_5) (0)))
               /\
               (#"whole_program.jc" 183 12 244# "expl:Requires clause"
               ((#"whole_program.jc" 183 12 244# "expl:Requires clause"
                ((>=) (offset_max voidP_self_10_alloc_table self_5) (0)))
               /\
               (#"whole_program.jc" 183 12 244# "expl:Requires clause"
               ((=) true true)))))))
              /\
              (#"/home/nik/Projects/ver/sem_6/queue.h" 70 13 33#
              "expl:Requires clause"
              (is_valid_queue self_5 voidP_array_20_alloc_table
              voidP_self_10_alloc_table !_Queue_empty_elem_self_10
              !_Queue_curr_elem_self_10 !_Queue_capacity_self_10
              !_Queue_array_self_10))))) }
            reads { _Queue_array_self_10, _Queue_capacity_self_10,
            _Queue_curr_elem_self_10, _Queue_empty_elem_self_10,
            intP_intM_array_20 } writes { _Queue_array_self_10,
            _Queue_capacity_self_10, _Queue_curr_elem_self_10,
            _Queue_empty_elem_self_10, intP_intM_array_20 }
            ensures {
              ((((((#"whole_program.jc" 188 10 135# "expl:Assigns clause"
                   (not_assigns voidP_array_20_alloc_table
                   voidP_array_20_alloc_table (old !intP_intM_array_20)
                   !intP_intM_array_20
                   (pset_range
                   (pset_deref (old !_Queue_array_self_10)
                   (pset_singleton self_5)) (0)
                   (Int.(-)
                   (Int32.to_int
                   (select (old !_Queue_capacity_self_10) self_5)) (1)))))
                  /\
                  (#"whole_program.jc" 188 10 135# "expl:Assigns clause"
                  (not_assigns voidP_self_10_alloc_table
                  voidP_self_10_alloc_table (old !_Queue_array_self_10)
                  !_Queue_array_self_10 (pset_singleton self_5))))
                 /\
                 (#"whole_program.jc" 188 10 135# "expl:Assigns clause"
                 (not_assigns voidP_self_10_alloc_table
                 voidP_self_10_alloc_table (old !_Queue_capacity_self_10)
                 !_Queue_capacity_self_10 (pset_singleton self_5))))
                /\
                (#"whole_program.jc" 188 10 135# "expl:Assigns clause"
                (not_assigns voidP_self_10_alloc_table
                voidP_self_10_alloc_table (old !_Queue_curr_elem_self_10)
                !_Queue_curr_elem_self_10 (pset_singleton self_5))))
               /\
               (#"whole_program.jc" 188 10 135# "expl:Assigns clause"
               (not_assigns voidP_self_10_alloc_table
               voidP_self_10_alloc_table (old !_Queue_empty_elem_self_10)
               !_Queue_empty_elem_self_10 (pset_singleton self_5))))
              /\
              (#"/home/nik/Projects/ver/sem_6/queue.h" 75 12 54#
              "expl:Ensures clause"
              (#"/home/nik/Projects/ver/sem_6/queue.h" 75 12 54#
              "expl:Ensures clause"
              ((#"/home/nik/Projects/ver/sem_6/queue.h" 75 12 54#
               "expl:Ensures clause"
               ((Int32.(=) result (#"whole_program.jc" 193 42 54#
                "expl:Integer cast" (Int32.of_int (0)))) ->
                (not
                (is_full_queue self_5 (old !_Queue_empty_elem_self_10) (old
                !_Queue_curr_elem_self_10) (old !_Queue_capacity_self_10)))))
              /\
              (#"/home/nik/Projects/ver/sem_6/queue.h" 75 12 54#
              "expl:Ensures clause"
              ((#"/home/nik/Projects/ver/sem_6/queue.h" 76 12 49#
               "expl:Ensures clause"
               ((Int32.(=) result (#"whole_program.jc" 195 44 56#
                "expl:Integer cast" (Int32.of_int (0)))) ->
                (is_valid_queue self_5 voidP_array_20_alloc_table
                voidP_self_10_alloc_table !_Queue_empty_elem_self_10
                !_Queue_curr_elem_self_10 !_Queue_capacity_self_10
                !_Queue_array_self_10)))
              /\
              (#"/home/nik/Projects/ver/sem_6/queue.h" 75 12 54#
              "expl:Ensures clause"
              ((#"/home/nik/Projects/ver/sem_6/queue.h" 77 12 82#
               "expl:Ensures clause"
               ((Int32.(=) result (#"whole_program.jc" 197 46 58#
                "expl:Integer cast" (Int32.of_int (0)))) ->
                (same_items self_5 (0)
                (queue_size self_5 (old !_Queue_empty_elem_self_10) (old
                !_Queue_curr_elem_self_10) (old !_Queue_capacity_self_10))
                !_Queue_curr_elem_self_10 (old !_Queue_curr_elem_self_10)
                !_Queue_capacity_self_10 (old !_Queue_capacity_self_10)
                !_Queue_array_self_10 (old !_Queue_array_self_10)
                !intP_intM_array_20 (old !intP_intM_array_20))))
              /\
              (#"/home/nik/Projects/ver/sem_6/queue.h" 75 12 54#
              "expl:Ensures clause"
              ((#"/home/nik/Projects/ver/sem_6/queue.h" 78 12 74#
               "expl:Ensures clause"
               ((Int32.(=) result (#"whole_program.jc" 201 48 60#
                "expl:Integer cast" (Int32.of_int (0)))) ->
                ((=)
                (get_item self_5
                (queue_size self_5 (old !_Queue_empty_elem_self_10) (old
                !_Queue_curr_elem_self_10) (old !_Queue_capacity_self_10))
                !_Queue_curr_elem_self_10 !_Queue_capacity_self_10
                !_Queue_array_self_10 !intP_intM_array_20)
                (Int32.to_int elem))))
              /\
              (#"/home/nik/Projects/ver/sem_6/queue.h" 79 12 74#
              "expl:Ensures clause"
              ((Int32.(=) result (#"whole_program.jc" 206 49 61#
               "expl:Integer cast" (Int32.of_int (0)))) ->
               ((=)
               (Int.(+)
               (queue_size self_5 (old !_Queue_empty_elem_self_10) (old
               !_Queue_curr_elem_self_10) (old !_Queue_capacity_self_10))
               (1))
               (queue_size self_5 !_Queue_empty_elem_self_10
               !_Queue_curr_elem_self_10 !_Queue_capacity_self_10))))))))))))))
              }
  
end

module Function_q_clear_safe

  use import core.Voidp 
  
  use import Struct_intP 
  
  use import core.Same_except 
  
  use import ref.Ref 
  
  use import core.Pset_deref 
  
  use import core.Pset_all 
  
  use import core.Pset 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_is_valid_queue 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import core.Assigns 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val q_clear
  (self_0_0 : (pointer voidP)) 
   (voidP_array_18_alloc_table : ref (alloc_table voidP)) 
    (voidP_self_0_9_alloc_table : ref (alloc_table voidP)) 
     (_Queue_empty_elem_self_0_9 : ref (memory voidP Int32.t)) 
      (_Queue_curr_elem_self_0_9 : ref (memory voidP Int32.t)) 
       (_Queue_capacity_self_0_9 : ref (memory voidP Int32.t)) 
        (_Queue_array_self_0_9 : ref (memory voidP (pointer voidP))) : unit
         requires {
           ("expl:Internal"
           (#"whole_program.jc" 162 12 310# "expl:Requires clause"
           ((#"/home/nik/Projects/ver/sem_6/queue.h" 55 13 25#
            "expl:Requires clause"
            (#"whole_program.jc" 162 12 310# "expl:Requires clause"
            ((#"whole_program.jc" 162 12 310# "expl:Requires clause"
             ((<=) (offset_min !voidP_self_0_9_alloc_table self_0_0) (0)))
            /\
            (#"whole_program.jc" 162 12 310# "expl:Requires clause"
            ((#"whole_program.jc" 162 12 310# "expl:Requires clause"
             ((>=) (offset_max !voidP_self_0_9_alloc_table self_0_0) (0)))
            /\
            (#"whole_program.jc" 162 12 310# "expl:Requires clause"
            ((=) true true)))))))
           /\
           (#"whole_program.jc" 162 12 310# "expl:Requires clause"
           ((#"/home/nik/Projects/ver/sem_6/queue.h" 56 13 35#
            "expl:Requires clause"
            (#"whole_program.jc" 162 12 310# "expl:Requires clause"
            ((#"whole_program.jc" 162 12 310# "expl:Requires clause"
             (strict_left_valid_struct_intP
             (select !_Queue_array_self_0_9 self_0_0) (0)
             !voidP_array_18_alloc_table))
            /\
            (#"whole_program.jc" 162 12 310# "expl:Requires clause"
            (right_valid_struct_intP (select !_Queue_array_self_0_9 self_0_0)
            (Int.(-_) 1) !voidP_array_18_alloc_table)))))
           /\
           (#"/home/nik/Projects/ver/sem_6/queue.h" 57 13 33#
           "expl:Requires clause"
           (is_valid_queue self_0_0 !voidP_array_18_alloc_table
           !voidP_self_0_9_alloc_table !_Queue_empty_elem_self_0_9
           !_Queue_curr_elem_self_0_9 !_Queue_capacity_self_0_9
           !_Queue_array_self_0_9))))))) }
         reads { _Queue_array_self_0_9, _Queue_capacity_self_0_9,
         _Queue_curr_elem_self_0_9, _Queue_empty_elem_self_0_9,
         voidP_array_18_alloc_table, voidP_self_0_9_alloc_table } writes {
         _Queue_array_self_0_9, _Queue_capacity_self_0_9,
         _Queue_curr_elem_self_0_9, _Queue_empty_elem_self_0_9,
         voidP_array_18_alloc_table, voidP_self_0_9_alloc_table }
         ensures {
           ((#"whole_program.jc" 172 12 33# "expl:Allocates clause"
            ((#"whole_program.jc" 172 12 33# "expl:Allocates clause"
             (alloc_same_except (old !voidP_array_18_alloc_table)
             !voidP_array_18_alloc_table
             (pset_all
             (pset_deref (old !_Queue_array_self_0_9)
             (pset_singleton self_0_0)))))
            /\
            (#"whole_program.jc" 172 12 33# "expl:Allocates clause"
            (alloc_same_except (old !voidP_self_0_9_alloc_table)
            !voidP_self_0_9_alloc_table pset_empty))))
           /\
           (((((#"whole_program.jc" 168 10 82# "expl:Assigns clause"
               (not_assigns (old !voidP_self_0_9_alloc_table)
               !voidP_self_0_9_alloc_table (old !_Queue_array_self_0_9)
               !_Queue_array_self_0_9 (pset_singleton self_0_0)))
              /\
              (#"whole_program.jc" 168 10 82# "expl:Assigns clause"
              (not_assigns (old !voidP_self_0_9_alloc_table)
              !voidP_self_0_9_alloc_table (old !_Queue_capacity_self_0_9)
              !_Queue_capacity_self_0_9 (pset_singleton self_0_0))))
             /\
             (#"whole_program.jc" 168 10 82# "expl:Assigns clause"
             (not_assigns (old !voidP_self_0_9_alloc_table)
             !voidP_self_0_9_alloc_table (old !_Queue_curr_elem_self_0_9)
             !_Queue_curr_elem_self_0_9 (pset_singleton self_0_0))))
            /\
            (#"whole_program.jc" 168 10 82# "expl:Assigns clause"
            (not_assigns (old !voidP_self_0_9_alloc_table)
            !voidP_self_0_9_alloc_table (old !_Queue_empty_elem_self_0_9)
            !_Queue_empty_elem_self_0_9 (pset_singleton self_0_0))))
           /\
           (#"/home/nik/Projects/ver/sem_6/queue.h" 63 12 45#
           "expl:Ensures clause"
           (fresh_alloc_struct_intP
           (select (old !_Queue_array_self_0_9) self_0_0) (0)
           !voidP_array_18_alloc_table)))) }
  
end

module Struct__Queue_unsafe

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import Struct__Queue 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val free_struct__Queue
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires {
      (("expl:Deallocation" ((=) p null)) \/ (freeable !voidP_alloc_table p))
      }
    writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct__Queue p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      (fresh_alloc_struct__Queue p (offset_max (old !voidP_alloc_table) p)
      !voidP_alloc_table))) }
  
  val allocate_struct__Queue_requires
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { ((>=) n (0)) } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct__Queue result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct__Queue result n (old !voidP_alloc_table)
        !voidP_alloc_table)
       /\
       ((frame_tag_struct__Queue result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct__Queue result (Int.(-) n (1)) (old
        !voidP_alloc_table))
       /\
       ((fresh_tag_struct__Queue result (Int.(-) n (1)) (old
        !voidP_tag_table))
       /\
       ((typeof_struct__Queue result (0) n !voidP_tag_table) /\
       (container_of_struct__Queue result (0) n !voidP_tag_table))))))) }
  
end

module Function_test_overflow_safety
#"/home/nik/Projects/ver/sem_6/task_6_2.c" 94 4 19#
"expl:test_overflow, safety"

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import Struct__Queue_unsafe 
  
  use import Struct__Queue_safe 
  
  use Safe_int32 
  
  use import core.Return 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use enum.Int32 
  
  use import int.Int 
  
  use Function_q_init_safe 
  
  use Function_q_clear_safe 
  
  use Function_q_add_safe 
  
  use import Exceptions 
  
  use import core.Eq_pointer_safe 
  
  use import core.Any_tag_table 
  
  use import core.Any_pointer 
  
  use import core.Any_memory 
  
  use import core.Any_alloc_table 
  
  use import core.Alloc_table 
  
  use import core.Acc_safe 
  
  use why3.Bool.Bool 
  
  let test_overflow #"/home/nik/Projects/ver/sem_6/task_6_2.c" 94 4 19#
  "expl:Function test_overflow, safety" =
  fun (tt : unit) 
   requires { (true) } ensures { ("expl:Postcondition" true) }  ->
   'Init:
   (let _Queue_empty_elem_obj_23 = ref
   (any_memory  () : (memory voidP Int32.t)) in
   (let _Queue_curr_elem_obj_23 = ref
   (any_memory  () : (memory voidP Int32.t)) in
   (let _Queue_capacity_obj_23 = ref
   (any_memory  () : (memory voidP Int32.t)) in
   (let _Queue_array_obj_23 = ref
   (any_memory  () : (memory voidP (pointer voidP))) in
   (let intP_intM_null_25 = ref (any_memory  () : (memory voidP Int32.t)) in
   (let voidP_obj_23_tag_table = ref (any_tag_table  () : (tag_table voidP))
   in
   (let voidP_null_25_tag_table = ref (any_tag_table  () : (tag_table voidP))
   in
   (let voidP_null_25_alloc_table = ref
   (any_alloc_table  () : (alloc_table voidP)) in
   (let voidP_obj_23_alloc_table = ref
   (any_alloc_table  () : (alloc_table voidP)) in
   (let return = ref (Safe_int32.any_  () ) in
   try
    begin
    (let obj = ref (any_pointer  () : (pointer voidP)) in
    (let add1_res = ref (Safe_int32.any_  () ) in
    (let add2_res = ref (Safe_int32.any_  () ) in
    (let add3_res = ref (Safe_int32.any_  () ) in
    (let __retres_3 = ref (Safe_int32.any_  () ) in
    try
     begin
     try
      begin
      try
       begin
       (obj :=
        (let _jessie_153 =
        (allocate_singleton_struct__Queue  voidP_obj_23_alloc_table
         voidP_obj_23_tag_table ) in
        begin
        (assert {
        (#"/home/nik/Projects/ver/sem_6/task_6_2.c" 95 17 20#
        "expl:Pointer index bounds"
        ((>=) (offset_max !voidP_obj_23_alloc_table _jessie_153) (0))) });
         _jessie_153 end));
        begin
        (let _jessie_151 =
        (let _jessie_150 = !obj in
        (let _jessie_149 =
        (#"whole_program.jc" 301 27 39# "expl:Integer cast"
        (Safe_int32.of_int (2))) in
        (#"/home/nik/Projects/ver/sem_6/task_6_2.c" 96 4 19#
        "expl:Precondition for q_init"
        (Function_q_init_safe.q_init  _jessie_150 _jessie_149
         voidP_null_25_alloc_table voidP_obj_23_alloc_table
         voidP_null_25_tag_table _Queue_empty_elem_obj_23
         _Queue_curr_elem_obj_23 _Queue_capacity_obj_23 _Queue_array_obj_23 ))))
        in ());
         (if
         (#"/home/nik/Projects/ver/sem_6/task_6_2.c" 98 8 22#
         (#"/home/nik/Projects/ver/sem_6/task_6_2.c" 98 8 22#
         (eq_pointer  !voidP_null_25_alloc_table !voidP_null_25_alloc_table
          (#"/home/nik/Projects/ver/sem_6/task_6_2.c" 98 8 17#
          "expl:Pointer dereference" (acc_safe  !_Queue_array_obj_23 !obj ))
          (null  ) )))
         then
          begin
          (__retres_3 :=
           (let _jessie_152 =
           (#"whole_program.jc" 303 32 44# "expl:Integer cast"
           (Safe_int32.of_int (1))) in
           begin
           (assert {
           (#"/home/nik/Projects/ver/sem_6/task_6_2.c" 99 8 17#
           "expl:Pointer index bounds" true) }); _jessie_152 end));
           (raise (Goto_return_label_1_exc ())) end else ());
         begin
         (add1_res :=
          (let _jessie_146 =
          (let _jessie_148 = !obj in
          (let _jessie_147 =
          (#"whole_program.jc" 307 49 61# "expl:Integer cast"
          (Safe_int32.of_int (1))) in
          (#"/home/nik/Projects/ver/sem_6/task_6_2.c" 102 19 33#
          "expl:Precondition for q_add"
          (Function_q_add_safe.q_add  _jessie_148 _jessie_147
           _Queue_empty_elem_obj_23 _Queue_curr_elem_obj_23
           _Queue_capacity_obj_23 _Queue_array_obj_23 intP_intM_null_25
           !voidP_null_25_alloc_table !voidP_obj_23_alloc_table
           !voidP_null_25_tag_table )))) in
          begin
          (assert {
          (#"/home/nik/Projects/ver/sem_6/task_6_2.c" 102 19 33#
          "expl:Pointer index bounds" true) }); _jessie_146 end));
          begin
          (add2_res :=
           (let _jessie_143 =
           (let _jessie_145 = !obj in
           (let _jessie_144 =
           (#"whole_program.jc" 308 49 61# "expl:Integer cast"
           (Safe_int32.of_int (2))) in
           (#"/home/nik/Projects/ver/sem_6/task_6_2.c" 103 19 33#
           "expl:Precondition for q_add"
           (Function_q_add_safe.q_add  _jessie_145 _jessie_144
            _Queue_empty_elem_obj_23 _Queue_curr_elem_obj_23
            _Queue_capacity_obj_23 _Queue_array_obj_23 intP_intM_null_25
            !voidP_null_25_alloc_table !voidP_obj_23_alloc_table
            !voidP_null_25_tag_table )))) in
           begin
           (assert {
           (#"/home/nik/Projects/ver/sem_6/task_6_2.c" 103 19 33#
           "expl:Pointer index bounds" true) }); _jessie_143 end));
           begin
           (add3_res :=
            (let _jessie_140 =
            (let _jessie_142 = !obj in
            (let _jessie_141 =
            (#"whole_program.jc" 309 49 61# "expl:Integer cast"
            (Safe_int32.of_int (3))) in
            (#"/home/nik/Projects/ver/sem_6/task_6_2.c" 104 19 33#
            "expl:Precondition for q_add"
            (Function_q_add_safe.q_add  _jessie_142 _jessie_141
             _Queue_empty_elem_obj_23 _Queue_curr_elem_obj_23
             _Queue_capacity_obj_23 _Queue_array_obj_23 intP_intM_null_25
             !voidP_null_25_alloc_table !voidP_obj_23_alloc_table
             !voidP_null_25_tag_table )))) in
            begin
            (assert {
            (#"/home/nik/Projects/ver/sem_6/task_6_2.c" 104 19 33#
            "expl:Pointer index bounds" true) }); _jessie_140 end));
            begin
            (let _jessie_139 = !obj in
            (#"/home/nik/Projects/ver/sem_6/task_6_2.c" 106 4 17#
            "expl:Precondition for q_clear"
            (Function_q_clear_safe.q_clear  _jessie_139
             voidP_null_25_alloc_table voidP_obj_23_alloc_table
             _Queue_empty_elem_obj_23 _Queue_curr_elem_obj_23
             _Queue_capacity_obj_23 _Queue_array_obj_23 )));
             (if
             (#"/home/nik/Projects/ver/sem_6/task_6_2.c" 108 10 23#
             (Safe_int32.(=)  !add1_res
              (#"whole_program.jc" 311 33 45# "expl:Integer cast"
              (Safe_int32.of_int (0))) ))
             then
              (if
              (#"/home/nik/Projects/ver/sem_6/task_6_2.c" 108 27 40#
              (Safe_int32.(=)  !add2_res
               (#"whole_program.jc" 312 68 80# "expl:Integer cast"
               (Safe_int32.of_int (0))) )) then ()
              else (raise (Goto__LAND_exc ())))
             else (raise (Goto__LAND_exc ())));
             (raise (Goto__LAND_0_exc ())); (raise (Goto__LAND_exc ())) end
           end end end end end with Goto__LAND_exc _jessie_3 ->
       'U__LAND:
       'U__LAND:
       'U__LAND:
       'U__LAND:
       begin
       (__retres_3 :=
        (let _jessie_154 =
        (#"whole_program.jc" 318 42 54# "expl:Integer cast"
        (Safe_int32.of_int (1))) in
        begin
        (assert {
        (#"/home/nik/Projects/ver/sem_6/task_6_2.c" 109 8 17#
        "expl:Pointer index bounds" true) }); _jessie_154 end));
        (raise (Goto_return_label_1_exc ())) end end;
       (raise (Goto__LAND_0_exc ())) end with Goto__LAND_0_exc _jessie_4 ->
      'U__LAND_0:
      'U__LAND_0:
      begin
      ();
       (if
       (#"/home/nik/Projects/ver/sem_6/task_6_2.c" 112 8 21#
       (Safe_int32.(<>)  !add3_res
        (#"whole_program.jc" 323 33 45# "expl:Integer cast"
        (Safe_int32.of_int (0))) ))
       then
        begin
        (__retres_3 :=
         (let _jessie_156 =
         (#"whole_program.jc" 324 33 45# "expl:Integer cast"
         (Safe_int32.of_int (0))) in
         begin
         (assert {
         (#"/home/nik/Projects/ver/sem_6/task_6_2.c" 113 8 17#
         "expl:Pointer index bounds" true) }); _jessie_156 end));
         (raise (Goto_return_label_1_exc ())) end
       else
        begin
        (__retres_3 :=
         (let _jessie_155 =
         (#"whole_program.jc" 328 33 46# "expl:Integer cast"
         (Safe_int32.of_int  (Int.(-_)  (1) ) )) in
         begin
         (assert {
         (#"/home/nik/Projects/ver/sem_6/task_6_2.c" 115 8 18#
         "expl:Pointer index bounds" true) }); _jessie_155 end));
         (raise (Goto_return_label_1_exc ())) end) end end;
      (raise (Goto_return_label_1_exc ())) end with Goto_return_label_1_exc
     _jessie_5 ->
     'Return_label_1:
     'Return_label_1:
     begin
     (#"/home/nik/Projects/ver/sem_6/task_6_2.c" 95 17 20#
     (free_struct__Queue  !obj voidP_obj_23_alloc_table ));
      begin
      (return :=
       (let _jessie_157 = !__retres_3 in
       begin
       (assert {
       (#"whole_program.jc" 334 7 24# "expl:Pointer index bounds" true) });
        _jessie_157 end)); (raise Return) end end end))))); absurd  end with
    Return -> !return end))))))))))
  
end

module Function_q_init

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import Struct_intP 
  
  use import core.Same_except 
  
  use import ref.Ref 
  
  use import core.Pset_deref 
  
  use import core.Pset_all 
  
  use import core.Pset 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_is_valid_queue 
  
  use import Logic_is_empty_queue 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import core.Assigns 
  
  use import core.Alloc_table 
  
  use import core.Alloc 
  
  use why3.Bool.Bool 
  
  val q_init
  (self_1_0 : (pointer voidP)) 
   (max_size : Int32.t) 
    (voidP_array_16_alloc_table : ref (alloc_table voidP)) 
     (voidP_self_1_8_alloc_table : ref (alloc_table voidP)) 
      (voidP_array_16_tag_table : ref (tag_table voidP)) 
       (_Queue_empty_elem_self_1_8 : ref (memory voidP Int32.t)) 
        (_Queue_curr_elem_self_1_8 : ref (memory voidP Int32.t)) 
         (_Queue_capacity_self_1_8 : ref (memory voidP Int32.t)) 
          (_Queue_array_self_1_8 : ref (memory voidP (pointer voidP))) :
           Int32.t
           requires { true } reads { _Queue_array_self_1_8,
           _Queue_capacity_self_1_8, _Queue_curr_elem_self_1_8,
           _Queue_empty_elem_self_1_8, voidP_array_16_alloc_table,
           voidP_self_1_8_alloc_table } writes { _Queue_array_self_1_8,
           _Queue_capacity_self_1_8, _Queue_curr_elem_self_1_8,
           _Queue_empty_elem_self_1_8, voidP_array_16_alloc_table,
           voidP_array_16_tag_table, voidP_self_1_8_alloc_table }
           ensures {
             ((#"whole_program.jc" 130 12 33# "expl:Allocates clause"
              (((#"whole_program.jc" 130 12 33# "expl:Allocates clause"
                (alloc_same_except (old !voidP_array_16_alloc_table)
                !voidP_array_16_alloc_table
                (pset_all
                (pset_deref !_Queue_array_self_1_8 (pset_singleton self_1_0)))))
               /\
               (#"whole_program.jc" 130 12 33# "expl:Allocates clause"
               (alloc_same_except (old !voidP_self_1_8_alloc_table)
               !voidP_self_1_8_alloc_table pset_empty)))
              /\
              (#"whole_program.jc" 130 12 33# "expl:Allocates clause"
              (tag_extends (old !voidP_array_16_tag_table)
              !voidP_array_16_tag_table))))
             /\
             (((((#"whole_program.jc" 126 10 82# "expl:Assigns clause"
                 (not_assigns (old !voidP_self_1_8_alloc_table)
                 !voidP_self_1_8_alloc_table (old !_Queue_array_self_1_8)
                 !_Queue_array_self_1_8 (pset_singleton self_1_0)))
                /\
                (#"whole_program.jc" 126 10 82# "expl:Assigns clause"
                (not_assigns (old !voidP_self_1_8_alloc_table)
                !voidP_self_1_8_alloc_table (old !_Queue_capacity_self_1_8)
                !_Queue_capacity_self_1_8 (pset_singleton self_1_0))))
               /\
               (#"whole_program.jc" 126 10 82# "expl:Assigns clause"
               (not_assigns (old !voidP_self_1_8_alloc_table)
               !voidP_self_1_8_alloc_table (old !_Queue_curr_elem_self_1_8)
               !_Queue_curr_elem_self_1_8 (pset_singleton self_1_0))))
              /\
              (#"whole_program.jc" 126 10 82# "expl:Assigns clause"
              (not_assigns (old !voidP_self_1_8_alloc_table)
              !voidP_self_1_8_alloc_table (old !_Queue_empty_elem_self_1_8)
              !_Queue_empty_elem_self_1_8 (pset_singleton self_1_0))))
             /\
             (#"/home/nik/Projects/ver/sem_6/queue.h" 44 12 51#
             "expl:Ensures clause"
             (#"/home/nik/Projects/ver/sem_6/queue.h" 44 12 51#
             "expl:Ensures clause"
             ((#"/home/nik/Projects/ver/sem_6/queue.h" 44 12 51#
              "expl:Ensures clause"
              ((Int32.(=) result (#"whole_program.jc" 131 42 54#
               "expl:Integer cast" (Int32.of_int (0)))) ->
               ((strict_left_valid_struct_intP
                (select !_Queue_array_self_1_8 self_1_0) (0)
                !voidP_array_16_alloc_table)
               /\
               (right_valid_struct_intP
               (select !_Queue_array_self_1_8 self_1_0) (Int.(-_) 1)
               !voidP_array_16_alloc_table))))
             /\
             (#"/home/nik/Projects/ver/sem_6/queue.h" 44 12 51#
             "expl:Ensures clause"
             ((#"/home/nik/Projects/ver/sem_6/queue.h" 46 12 57#
              "expl:Ensures clause"
              ((Int32.(=) result (#"whole_program.jc" 133 44 56#
               "expl:Integer cast" (Int32.of_int (0)))) ->
               (fresh_alloc_struct_intP
               (select !_Queue_array_self_1_8 self_1_0) (0) (old
               !voidP_array_16_alloc_table))))
             /\
             (#"/home/nik/Projects/ver/sem_6/queue.h" 44 12 51#
             "expl:Ensures clause"
             ((#"/home/nik/Projects/ver/sem_6/queue.h" 47 12 49#
              "expl:Ensures clause"
              ((Int32.(=) result (#"whole_program.jc" 135 46 58#
               "expl:Integer cast" (Int32.of_int (0)))) ->
               (is_valid_queue self_1_0 !voidP_array_16_alloc_table
               !voidP_self_1_8_alloc_table !_Queue_empty_elem_self_1_8
               !_Queue_curr_elem_self_1_8 !_Queue_capacity_self_1_8
               !_Queue_array_self_1_8)))
             /\
             (#"/home/nik/Projects/ver/sem_6/queue.h" 44 12 51#
             "expl:Ensures clause"
             ((#"/home/nik/Projects/ver/sem_6/queue.h" 48 12 49#
              "expl:Ensures clause"
              ((Int32.(=) result (#"whole_program.jc" 137 48 60#
               "expl:Integer cast" (Int32.of_int (0)))) ->
               (is_empty_queue self_1_0 !_Queue_empty_elem_self_1_8
               !_Queue_curr_elem_self_1_8)))
             /\
             (#"/home/nik/Projects/ver/sem_6/queue.h" 49 12 91#
             "expl:Ensures clause"
             ((Int32.(=) result (#"whole_program.jc" 139 49 61#
              "expl:Integer cast" (Int32.of_int (0)))) ->
              (((<=) (Int32.to_int max_size) (Int.(-) (2147483647) (1))) /\
              ((=) (Int32.to_int (select !_Queue_capacity_self_1_8 self_1_0))
              (Int.(+) (Int32.to_int max_size) (1))))))))))))))))) }
  
end

module Function_q_add

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import ref.Ref 
  
  use import core.Pset_range 
  
  use import core.Pset_deref 
  
  use import core.Pset 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_same_items 
  
  use import Logic_queue_size 
  
  use import Logic_is_valid_queue 
  
  use import Logic_is_full_queue 
  
  use import Logic_get_item 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import core.Assigns 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val q_add
  (self_5 : (pointer voidP)) 
   (elem : Int32.t) 
    (_Queue_empty_elem_self_10 : ref (memory voidP Int32.t)) 
     (_Queue_curr_elem_self_10 : ref (memory voidP Int32.t)) 
      (_Queue_capacity_self_10 : ref (memory voidP Int32.t)) 
       (_Queue_array_self_10 : ref (memory voidP (pointer voidP))) 
        (intP_intM_array_20 : ref (memory voidP Int32.t)) 
         (voidP_array_20_alloc_table : (alloc_table voidP)) 
          (voidP_self_10_alloc_table : (alloc_table voidP)) 
           (voidP_array_20_tag_table : (tag_table voidP)) : Int32.t
            requires { true } reads { _Queue_array_self_10,
            _Queue_capacity_self_10, _Queue_curr_elem_self_10,
            _Queue_empty_elem_self_10, intP_intM_array_20 } writes {
            _Queue_array_self_10, _Queue_capacity_self_10,
            _Queue_curr_elem_self_10, _Queue_empty_elem_self_10,
            intP_intM_array_20 }
            ensures {
              ((((((#"whole_program.jc" 188 10 135# "expl:Assigns clause"
                   (not_assigns voidP_array_20_alloc_table
                   voidP_array_20_alloc_table (old !intP_intM_array_20)
                   !intP_intM_array_20
                   (pset_range
                   (pset_deref (old !_Queue_array_self_10)
                   (pset_singleton self_5)) (0)
                   (Int.(-)
                   (Int32.to_int
                   (select (old !_Queue_capacity_self_10) self_5)) (1)))))
                  /\
                  (#"whole_program.jc" 188 10 135# "expl:Assigns clause"
                  (not_assigns voidP_self_10_alloc_table
                  voidP_self_10_alloc_table (old !_Queue_array_self_10)
                  !_Queue_array_self_10 (pset_singleton self_5))))
                 /\
                 (#"whole_program.jc" 188 10 135# "expl:Assigns clause"
                 (not_assigns voidP_self_10_alloc_table
                 voidP_self_10_alloc_table (old !_Queue_capacity_self_10)
                 !_Queue_capacity_self_10 (pset_singleton self_5))))
                /\
                (#"whole_program.jc" 188 10 135# "expl:Assigns clause"
                (not_assigns voidP_self_10_alloc_table
                voidP_self_10_alloc_table (old !_Queue_curr_elem_self_10)
                !_Queue_curr_elem_self_10 (pset_singleton self_5))))
               /\
               (#"whole_program.jc" 188 10 135# "expl:Assigns clause"
               (not_assigns voidP_self_10_alloc_table
               voidP_self_10_alloc_table (old !_Queue_empty_elem_self_10)
               !_Queue_empty_elem_self_10 (pset_singleton self_5))))
              /\
              (#"/home/nik/Projects/ver/sem_6/queue.h" 75 12 54#
              "expl:Ensures clause"
              (#"/home/nik/Projects/ver/sem_6/queue.h" 75 12 54#
              "expl:Ensures clause"
              ((#"/home/nik/Projects/ver/sem_6/queue.h" 75 12 54#
               "expl:Ensures clause"
               ((Int32.(=) result (#"whole_program.jc" 193 42 54#
                "expl:Integer cast" (Int32.of_int (0)))) ->
                (not
                (is_full_queue self_5 (old !_Queue_empty_elem_self_10) (old
                !_Queue_curr_elem_self_10) (old !_Queue_capacity_self_10)))))
              /\
              (#"/home/nik/Projects/ver/sem_6/queue.h" 75 12 54#
              "expl:Ensures clause"
              ((#"/home/nik/Projects/ver/sem_6/queue.h" 76 12 49#
               "expl:Ensures clause"
               ((Int32.(=) result (#"whole_program.jc" 195 44 56#
                "expl:Integer cast" (Int32.of_int (0)))) ->
                (is_valid_queue self_5 voidP_array_20_alloc_table
                voidP_self_10_alloc_table !_Queue_empty_elem_self_10
                !_Queue_curr_elem_self_10 !_Queue_capacity_self_10
                !_Queue_array_self_10)))
              /\
              (#"/home/nik/Projects/ver/sem_6/queue.h" 75 12 54#
              "expl:Ensures clause"
              ((#"/home/nik/Projects/ver/sem_6/queue.h" 77 12 82#
               "expl:Ensures clause"
               ((Int32.(=) result (#"whole_program.jc" 197 46 58#
                "expl:Integer cast" (Int32.of_int (0)))) ->
                (same_items self_5 (0)
                (queue_size self_5 (old !_Queue_empty_elem_self_10) (old
                !_Queue_curr_elem_self_10) (old !_Queue_capacity_self_10))
                !_Queue_curr_elem_self_10 (old !_Queue_curr_elem_self_10)
                !_Queue_capacity_self_10 (old !_Queue_capacity_self_10)
                !_Queue_array_self_10 (old !_Queue_array_self_10)
                !intP_intM_array_20 (old !intP_intM_array_20))))
              /\
              (#"/home/nik/Projects/ver/sem_6/queue.h" 75 12 54#
              "expl:Ensures clause"
              ((#"/home/nik/Projects/ver/sem_6/queue.h" 78 12 74#
               "expl:Ensures clause"
               ((Int32.(=) result (#"whole_program.jc" 201 48 60#
                "expl:Integer cast" (Int32.of_int (0)))) ->
                ((=)
                (get_item self_5
                (queue_size self_5 (old !_Queue_empty_elem_self_10) (old
                !_Queue_curr_elem_self_10) (old !_Queue_capacity_self_10))
                !_Queue_curr_elem_self_10 !_Queue_capacity_self_10
                !_Queue_array_self_10 !intP_intM_array_20)
                (Int32.to_int elem))))
              /\
              (#"/home/nik/Projects/ver/sem_6/queue.h" 79 12 74#
              "expl:Ensures clause"
              ((Int32.(=) result (#"whole_program.jc" 206 49 61#
               "expl:Integer cast" (Int32.of_int (0)))) ->
               ((=)
               (Int.(+)
               (queue_size self_5 (old !_Queue_empty_elem_self_10) (old
               !_Queue_curr_elem_self_10) (old !_Queue_capacity_self_10))
               (1))
               (queue_size self_5 !_Queue_empty_elem_self_10
               !_Queue_curr_elem_self_10 !_Queue_capacity_self_10))))))))))))))
              }
  
end

module Function_q_clear

  use import core.Voidp 
  
  use import Struct_intP 
  
  use import core.Same_except 
  
  use import ref.Ref 
  
  use import core.Pset_deref 
  
  use import core.Pset_all 
  
  use import core.Pset 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use enum.Int32 
  
  use import core.Assigns 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val q_clear
  (self_0_0 : (pointer voidP)) 
   (voidP_array_18_alloc_table : ref (alloc_table voidP)) 
    (voidP_self_0_9_alloc_table : ref (alloc_table voidP)) 
     (_Queue_empty_elem_self_0_9 : ref (memory voidP Int32.t)) 
      (_Queue_curr_elem_self_0_9 : ref (memory voidP Int32.t)) 
       (_Queue_capacity_self_0_9 : ref (memory voidP Int32.t)) 
        (_Queue_array_self_0_9 : ref (memory voidP (pointer voidP))) : unit
         requires { true } reads { _Queue_array_self_0_9,
         _Queue_capacity_self_0_9, _Queue_curr_elem_self_0_9,
         _Queue_empty_elem_self_0_9, voidP_array_18_alloc_table,
         voidP_self_0_9_alloc_table } writes { _Queue_array_self_0_9,
         _Queue_capacity_self_0_9, _Queue_curr_elem_self_0_9,
         _Queue_empty_elem_self_0_9, voidP_array_18_alloc_table,
         voidP_self_0_9_alloc_table }
         ensures {
           ((#"whole_program.jc" 172 12 33# "expl:Allocates clause"
            ((#"whole_program.jc" 172 12 33# "expl:Allocates clause"
             (alloc_same_except (old !voidP_array_18_alloc_table)
             !voidP_array_18_alloc_table
             (pset_all
             (pset_deref (old !_Queue_array_self_0_9)
             (pset_singleton self_0_0)))))
            /\
            (#"whole_program.jc" 172 12 33# "expl:Allocates clause"
            (alloc_same_except (old !voidP_self_0_9_alloc_table)
            !voidP_self_0_9_alloc_table pset_empty))))
           /\
           (((((#"whole_program.jc" 168 10 82# "expl:Assigns clause"
               (not_assigns (old !voidP_self_0_9_alloc_table)
               !voidP_self_0_9_alloc_table (old !_Queue_array_self_0_9)
               !_Queue_array_self_0_9 (pset_singleton self_0_0)))
              /\
              (#"whole_program.jc" 168 10 82# "expl:Assigns clause"
              (not_assigns (old !voidP_self_0_9_alloc_table)
              !voidP_self_0_9_alloc_table (old !_Queue_capacity_self_0_9)
              !_Queue_capacity_self_0_9 (pset_singleton self_0_0))))
             /\
             (#"whole_program.jc" 168 10 82# "expl:Assigns clause"
             (not_assigns (old !voidP_self_0_9_alloc_table)
             !voidP_self_0_9_alloc_table (old !_Queue_curr_elem_self_0_9)
             !_Queue_curr_elem_self_0_9 (pset_singleton self_0_0))))
            /\
            (#"whole_program.jc" 168 10 82# "expl:Assigns clause"
            (not_assigns (old !voidP_self_0_9_alloc_table)
            !voidP_self_0_9_alloc_table (old !_Queue_empty_elem_self_0_9)
            !_Queue_empty_elem_self_0_9 (pset_singleton self_0_0))))
           /\
           (#"/home/nik/Projects/ver/sem_6/queue.h" 63 12 45#
           "expl:Ensures clause"
           (fresh_alloc_struct_intP
           (select (old !_Queue_array_self_0_9) self_0_0) (0)
           !voidP_array_18_alloc_table)))) }
  
end

module Function_test_overflow_behaviors
#"/home/nik/Projects/ver/sem_6/task_6_2.c" 94 4 19#
"expl:test_overflow, behaviors"

  use import core.Voidp 
  
  use Unsafe_int32 
  
  use import core.Tag_table_type 
  
  use import Struct__Queue_safe 
  
  use import core.Return 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use enum.Int32 
  
  use int.Int 
  
  use Function_q_init 
  
  use Function_q_clear 
  
  use Function_q_add 
  
  use import Exceptions 
  
  use import core.Any_tag_table 
  
  use import core.Any_pointer 
  
  use import core.Any_memory 
  
  use import core.Any_alloc_table 
  
  use import core.Alloc_table 
  
  use import core.Acc_unsafe 
  
  use why3.Bool.Bool 
  
  let test_overflow_ensures_default
  #"/home/nik/Projects/ver/sem_6/task_6_2.c" 94 4 19#
  "expl:Function test_overflow, default behavior" =
  fun (tt : unit) 
   requires { (true) }
   ensures {
     ("expl:Postcondition"
     (#"/home/nik/Projects/ver/sem_6/task_6_2.c" 91 12 40#
     "expl:Ensures clause"
     ((Int32.(=) result (#"whole_program.jc" 288 33 45# "expl:Integer cast"
      (Int32.of_int (0))))
     \/
     (Int32.(=) result (#"whole_program.jc" 288 62 74# "expl:Integer cast"
     (Int32.of_int (1))))))) }  ->
   'Init:
   (let _Queue_empty_elem_obj_23 = ref
   (any_memory  () : (memory voidP Int32.t)) in
   (let _Queue_curr_elem_obj_23 = ref
   (any_memory  () : (memory voidP Int32.t)) in
   (let _Queue_capacity_obj_23 = ref
   (any_memory  () : (memory voidP Int32.t)) in
   (let _Queue_array_obj_23 = ref
   (any_memory  () : (memory voidP (pointer voidP))) in
   (let intP_intM_null_25 = ref (any_memory  () : (memory voidP Int32.t)) in
   (let voidP_obj_23_tag_table = ref (any_tag_table  () : (tag_table voidP))
   in
   (let voidP_null_25_tag_table = ref (any_tag_table  () : (tag_table voidP))
   in
   (let voidP_null_25_alloc_table = ref
   (any_alloc_table  () : (alloc_table voidP)) in
   (let voidP_obj_23_alloc_table = ref
   (any_alloc_table  () : (alloc_table voidP)) in
   (let return = ref (Unsafe_int32.any_  () ) in
   try
    begin
    (let obj = ref (any_pointer  () : (pointer voidP)) in
    (let add1_res = ref (Unsafe_int32.any_  () ) in
    (let add2_res = ref (Unsafe_int32.any_  () ) in
    (let add3_res = ref (Unsafe_int32.any_  () ) in
    (let __retres_3 = ref (Unsafe_int32.any_  () ) in
    try
     begin
     try
      begin
      try
       begin
       (obj :=
        (allocate_singleton_struct__Queue  voidP_obj_23_alloc_table
         voidP_obj_23_tag_table ));
        begin
        (let _jessie_132 =
        (let _jessie_131 = !obj in
        (let _jessie_130 =
        (#"whole_program.jc" 301 27 39# "expl:Integer cast"
        (Unsafe_int32.of_int (2))) in
        (#"/home/nik/Projects/ver/sem_6/task_6_2.c" 96 4 19#
        "expl:Precondition for q_init"
        (Function_q_init.q_init  _jessie_131 _jessie_130
         voidP_null_25_alloc_table voidP_obj_23_alloc_table
         voidP_null_25_tag_table _Queue_empty_elem_obj_23
         _Queue_curr_elem_obj_23 _Queue_capacity_obj_23 _Queue_array_obj_23 ))))
        in ());
         (if
         (#"/home/nik/Projects/ver/sem_6/task_6_2.c" 98 8 22#
         ((=)  (acc  !_Queue_array_obj_23 !obj ) (null  ) ))
         then
          begin
          (__retres_3 :=
           (#"whole_program.jc" 303 32 44# "expl:Integer cast"
           (Unsafe_int32.of_int (1)))); (raise (Goto_return_label_1_exc ()))
          end else ());
         begin
         (add1_res :=
          (let _jessie_129 = !obj in
          (let _jessie_128 =
          (#"whole_program.jc" 307 49 61# "expl:Integer cast"
          (Unsafe_int32.of_int (1))) in
          (#"/home/nik/Projects/ver/sem_6/task_6_2.c" 102 19 33#
          "expl:Precondition for q_add"
          (Function_q_add.q_add  _jessie_129 _jessie_128
           _Queue_empty_elem_obj_23 _Queue_curr_elem_obj_23
           _Queue_capacity_obj_23 _Queue_array_obj_23 intP_intM_null_25
           !voidP_null_25_alloc_table !voidP_obj_23_alloc_table
           !voidP_null_25_tag_table )))));
          begin
          (add2_res :=
           (let _jessie_126 = !obj in
           (let _jessie_125 =
           (#"whole_program.jc" 308 49 61# "expl:Integer cast"
           (Unsafe_int32.of_int (2))) in
           (#"/home/nik/Projects/ver/sem_6/task_6_2.c" 103 19 33#
           "expl:Precondition for q_add"
           (Function_q_add.q_add  _jessie_126 _jessie_125
            _Queue_empty_elem_obj_23 _Queue_curr_elem_obj_23
            _Queue_capacity_obj_23 _Queue_array_obj_23 intP_intM_null_25
            !voidP_null_25_alloc_table !voidP_obj_23_alloc_table
            !voidP_null_25_tag_table )))));
           begin
           (add3_res :=
            (let _jessie_123 = !obj in
            (let _jessie_122 =
            (#"whole_program.jc" 309 49 61# "expl:Integer cast"
            (Unsafe_int32.of_int (3))) in
            (#"/home/nik/Projects/ver/sem_6/task_6_2.c" 104 19 33#
            "expl:Precondition for q_add"
            (Function_q_add.q_add  _jessie_123 _jessie_122
             _Queue_empty_elem_obj_23 _Queue_curr_elem_obj_23
             _Queue_capacity_obj_23 _Queue_array_obj_23 intP_intM_null_25
             !voidP_null_25_alloc_table !voidP_obj_23_alloc_table
             !voidP_null_25_tag_table )))));
            begin
            (let _jessie_120 = !obj in
            (#"/home/nik/Projects/ver/sem_6/task_6_2.c" 106 4 17#
            "expl:Precondition for q_clear"
            (Function_q_clear.q_clear  _jessie_120 voidP_null_25_alloc_table
             voidP_obj_23_alloc_table _Queue_empty_elem_obj_23
             _Queue_curr_elem_obj_23 _Queue_capacity_obj_23
             _Queue_array_obj_23 )));
             (if
             (#"/home/nik/Projects/ver/sem_6/task_6_2.c" 108 10 23#
             (Unsafe_int32.(=)  !add1_res
              (#"whole_program.jc" 311 33 45# "expl:Integer cast"
              (Unsafe_int32.of_int (0))) ))
             then
              (if
              (#"/home/nik/Projects/ver/sem_6/task_6_2.c" 108 27 40#
              (Unsafe_int32.(=)  !add2_res
               (#"whole_program.jc" 312 68 80# "expl:Integer cast"
               (Unsafe_int32.of_int (0))) )) then ()
              else (raise (Goto__LAND_exc ())))
             else (raise (Goto__LAND_exc ())));
             (raise (Goto__LAND_0_exc ())); (raise (Goto__LAND_exc ())) end
           end end end end end with Goto__LAND_exc _jessie_3 ->
       'U__LAND:
       'U__LAND:
       'U__LAND:
       'U__LAND:
       begin
       (__retres_3 :=
        (#"whole_program.jc" 318 42 54# "expl:Integer cast"
        (Unsafe_int32.of_int (1)))); (raise (Goto_return_label_1_exc ())) end
       end; (raise (Goto__LAND_0_exc ())) end with Goto__LAND_0_exc _jessie_4
      ->
      'U__LAND_0:
      'U__LAND_0:
      begin
      ();
       (if
       (#"/home/nik/Projects/ver/sem_6/task_6_2.c" 112 8 21#
       (Unsafe_int32.(<>)  !add3_res
        (#"whole_program.jc" 323 33 45# "expl:Integer cast"
        (Unsafe_int32.of_int (0))) ))
       then
        begin
        (__retres_3 :=
         (#"whole_program.jc" 324 33 45# "expl:Integer cast"
         (Unsafe_int32.of_int (0)))); (raise (Goto_return_label_1_exc ()))
        end
       else
        begin
        (__retres_3 :=
         (#"whole_program.jc" 328 33 46# "expl:Integer cast"
         (Unsafe_int32.of_int  (Int.(-_)  (1) ) )));
         (raise (Goto_return_label_1_exc ())) end) end end;
      (raise (Goto_return_label_1_exc ())) end with Goto_return_label_1_exc
     _jessie_5 ->
     'Return_label_1:
     'Return_label_1:
     begin
     (#"/home/nik/Projects/ver/sem_6/task_6_2.c" 95 17 20#
     (safe_free_struct__Queue  !obj voidP_obj_23_alloc_table ));
      begin (return := !__retres_3); (raise Return) end end end))))); 
     absurd  end with Return -> !return end))))))))))
  
end

theory Logic_type_padding

  use why3.Bool.Bool 
  
  type padding 
  
end

theory Struct_charP

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import core.Tag_table 
  
  use import Struct_voidP 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Alloc_table 
  
  use import core.Alloc 
  
  use why3.Bool.Bool 
  
  use import core.Charp_tag_id 
  
  predicate frame_tag_struct_charP (p : (pointer voidP)) (old_voidP_tag_table
  : (tag_table voidP)) (voidP_tag_table : (tag_table voidP))
  =
     ((tag_extends old_voidP_tag_table voidP_tag_table) /\
     (alloc_tag_block old_voidP_tag_table voidP_tag_table p))
  
  predicate frame_free_struct_charP (p : (pointer voidP))
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((free_extends old_voidP_alloc_table voidP_alloc_table) /\
     (free_block old_voidP_alloc_table voidP_alloc_table p))
  
  predicate frame_alloc_struct_charP (p : (pointer voidP)) (n : int)
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((alloc_extends old_voidP_alloc_table voidP_alloc_table) /\
     (alloc_block old_voidP_alloc_table voidP_alloc_table p n))
  
  predicate fresh_tag_struct_charP (p : (pointer voidP)) (n : int)
  (voidP_tag_table : (tag_table voidP))
  = (fresh_tag_struct_voidP p n voidP_tag_table)
  
  predicate fresh_alloc_struct_charP (p : (pointer voidP)) (n : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (fresh_alloc_struct_voidP p n voidP_alloc_table)
  
  predicate container_of_singleton_struct_charP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP)) = true
  
  predicate container_of_struct_charP (p : (pointer voidP)) (l : int) (r :
  int) (voidP_tag_table : (tag_table voidP)) = true
  
  predicate typeof_singleton_struct_charP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = ((=) (typeof voidP_tag_table p) charP_tag)
  
  predicate typeof_struct_charP (p : (pointer voidP)) (l : int) (r : int)
  (voidP_tag_table : (tag_table voidP))
  =
     (((=) (typeof voidP_tag_table p) charP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       ((=) (typeof voidP_tag_table (shift p i)) charP_tag))))
  
  predicate instanceof_singleton_struct_charP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = (instanceof voidP_tag_table p charP_tag)
  
  predicate instanceof_struct_charP (p : (pointer voidP)) (l : int) (r : int)
  (voidP_tag_table : (tag_table voidP))
  =
     ((instanceof voidP_tag_table p charP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       (instanceof voidP_tag_table (shift p i) charP_tag))))
  
  predicate right_valid_struct_charP (p : (pointer voidP)) (b : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (right_valid_struct_voidP p b voidP_alloc_table)
  
  predicate left_valid_struct_charP (p : (pointer voidP)) (a : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (left_valid_struct_voidP p a voidP_alloc_table)
  
  predicate strict_left_valid_struct_charP (p : (pointer voidP)) (a : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (strict_left_valid_struct_voidP p a voidP_alloc_table)
  
  predicate valid_struct_charP (p : (pointer voidP)) (a : int) (b : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (valid_struct_voidP p a b voidP_alloc_table)
  
  predicate strict_valid_struct_charP (p : (pointer voidP)) (a : int) (b :
  int) (voidP_alloc_table : (alloc_table voidP))
  = (strict_valid_struct_voidP p a b voidP_alloc_table)
  
end

module Struct_charP_unsafe

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import Struct_charP 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val free_struct_charP
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires {
      (("expl:Deallocation" ((=) p null)) \/ (freeable !voidP_alloc_table p))
      }
    writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct_charP p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      (fresh_alloc_struct_charP p (offset_max (old !voidP_alloc_table) p)
      !voidP_alloc_table))) }
  
  val allocate_struct_charP_requires
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { ((>=) n (0)) } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct_charP result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct_charP result n (old !voidP_alloc_table)
        !voidP_alloc_table)
       /\
       ((frame_tag_struct_charP result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct_charP result (Int.(-) n (1)) (old
        !voidP_alloc_table))
       /\
       ((fresh_tag_struct_charP result (Int.(-) n (1)) (old
        !voidP_tag_table))
       /\
       ((typeof_struct_charP result (0) n !voidP_tag_table) /\
       (container_of_struct_charP result (0) n !voidP_tag_table))))))) }
  
end

module Struct_charP_safe

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import Struct_charP 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val safe_free_struct_charP
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires { true } writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct_charP p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      (fresh_alloc_struct_charP p (offset_max (old !voidP_alloc_table) p)
      !voidP_alloc_table))) }
  
  val allocate_struct_charP
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { true } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct_charP result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct_charP result n (old !voidP_alloc_table)
        !voidP_alloc_table)
       /\
       ((frame_tag_struct_charP result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct_charP result (Int.(-) n (1)) (old
        !voidP_alloc_table))
       /\
       ((fresh_tag_struct_charP result (Int.(-) n (1)) (old
        !voidP_tag_table))
       /\
       ((typeof_struct_charP result (0) n !voidP_tag_table) /\
       (container_of_struct_charP result (0) n !voidP_tag_table))))))) }
  
  val allocate_singleton_struct_charP
  (voidP_alloc_table : ref (alloc_table voidP)) 
   (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
    requires { true } writes { voidP_alloc_table, voidP_tag_table }
    ensures {
      ((strict_valid_struct_charP result (0) (0) !voidP_alloc_table) /\
      ((frame_alloc_struct_charP result (1) (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      ((frame_tag_struct_charP result (old !voidP_tag_table)
       !voidP_tag_table)
      /\
      ((fresh_alloc_struct_charP result (0) (old !voidP_alloc_table)) /\
      ((fresh_tag_struct_charP result (0) (old !voidP_tag_table)) /\
      ((typeof_singleton_struct_charP result !voidP_tag_table) /\
      (container_of_singleton_struct_charP result !voidP_tag_table))))))) }
  
end

module Struct_voidP_unsafe

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import Struct_voidP 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val free_struct_voidP
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires {
      (("expl:Deallocation" ((=) p null)) \/ (freeable !voidP_alloc_table p))
      }
    writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct_voidP p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      (fresh_alloc_struct_voidP p (offset_max (old !voidP_alloc_table) p)
      !voidP_alloc_table))) }
  
  val allocate_struct_voidP_requires
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { ((>=) n (0)) } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct_voidP result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct_voidP result n (old !voidP_alloc_table)
        !voidP_alloc_table)
       /\
       ((frame_tag_struct_voidP result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct_voidP result (Int.(-) n (1)) (old
        !voidP_alloc_table))
       /\
       ((fresh_tag_struct_voidP result (Int.(-) n (1)) (old
        !voidP_tag_table))
       /\
       ((typeof_struct_voidP result (0) n !voidP_tag_table) /\
       (container_of_struct_voidP result (0) n !voidP_tag_table))))))) }
  
end

module Struct_voidP_safe

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import Struct_voidP 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val safe_free_struct_voidP
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires { true } writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct_voidP p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      (fresh_alloc_struct_voidP p (offset_max (old !voidP_alloc_table) p)
      !voidP_alloc_table))) }
  
  val allocate_struct_voidP
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { true } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct_voidP result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct_voidP result n (old !voidP_alloc_table)
        !voidP_alloc_table)
       /\
       ((frame_tag_struct_voidP result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct_voidP result (Int.(-) n (1)) (old
        !voidP_alloc_table))
       /\
       ((fresh_tag_struct_voidP result (Int.(-) n (1)) (old
        !voidP_tag_table))
       /\
       ((typeof_struct_voidP result (0) n !voidP_tag_table) /\
       (container_of_struct_voidP result (0) n !voidP_tag_table))))))) }
  
  val allocate_singleton_struct_voidP
  (voidP_alloc_table : ref (alloc_table voidP)) 
   (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
    requires { true } writes { voidP_alloc_table, voidP_tag_table }
    ensures {
      ((strict_valid_struct_voidP result (0) (0) !voidP_alloc_table) /\
      ((frame_alloc_struct_voidP result (1) (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      ((frame_tag_struct_voidP result (old !voidP_tag_table)
       !voidP_tag_table)
      /\
      ((fresh_alloc_struct_voidP result (0) (old !voidP_alloc_table)) /\
      ((fresh_tag_struct_voidP result (0) (old !voidP_tag_table)) /\
      ((typeof_singleton_struct_voidP result !voidP_tag_table) /\
      (container_of_singleton_struct_voidP result !voidP_tag_table))))))) }
  
end

module Safe_bit_uint64_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use Bit_uint64_of_Bit_uint8 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use Bit_uint64_of_Bit_uint8 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use Bit_uint32_of_Bit_uint8 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use Bit_uint32_of_Bit_uint8 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint8 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint8 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint8 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Uint8.to_int n)) \/
     (Bit_int8_of_Bit_uint8.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint8 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int8.t
   requires { (Int8.in_bounds (Uint8.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint8 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint8 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint8 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint8 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint8 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint8 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use Bit_uint32_of_Bit_uint64 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint64.to_int n)))
     /\ ((=) result (Bit_uint32_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Uint64.to_int n)) \/
     (Bit_uint32_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use Bit_uint32_of_Bit_uint64 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint64.to_int n)))
     /\ ((=) result (Bit_uint32_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint32.t
   requires { (Uint32.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint64 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint64.to_int n)))
     /\ ((=) result (Bit_uint16_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Uint64.to_int n)) \/
     (Bit_uint16_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint64 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint64.to_int n)))
     /\ ((=) result (Bit_uint16_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint16.t
   requires { (Uint16.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint64 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Uint64.to_int n)) \/
     (Bit_int8_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint64 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int8.t
   requires { (Int8.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint64 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int64.t
   requires {
     ((Bit_int64.in_bounds (Uint64.to_int n)) \/
     (Bit_int64_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Int64.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint64 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int64.t
   requires { (Int64.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Int64.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint64 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int32.t
   requires {
     ((Bit_int32.in_bounds (Uint64.to_int n)) \/
     (Bit_int32_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Int32.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint64 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int32.t
   requires { (Int32.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Int32.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int32.t
   requires { true }
   ensures { ((=) (Int32.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint64 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Uint64.to_int n)) \/
     (Bit_int16_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint64 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int16.t
   requires { (Int16.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int16.t
   requires { true }
   ensures { ((=) (Int16.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint32 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint32.to_int n)))
     /\ ((=) result (Bit_uint16_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Uint32.to_int n)) \/
     (Bit_uint16_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint32 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint32.to_int n)))
     /\ ((=) result (Bit_uint16_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint16.t
   requires { (Uint16.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint32 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Uint32.to_int n)) \/
     (Bit_int8_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint32 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int8.t
   requires { (Int8.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint32 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint32 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint32 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int32.t
   requires {
     ((Bit_int32.in_bounds (Uint32.to_int n)) \/
     (Bit_int32_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Int32.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint32 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int32.t
   requires { (Int32.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Int32.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int32.t
   requires { true }
   ensures { ((=) (Int32.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint32 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Uint32.to_int n)) \/
     (Bit_int16_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint32 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int16.t
   requires { (Int16.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int16.t
   requires { true }
   ensures { ((=) (Int16.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint16 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Uint16.to_int n)) \/
     (Bit_int8_of_Bit_uint16.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint16 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int8.t
   requires { (Int8.in_bounds (Uint16.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint16 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint16 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint16 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint16 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures { ((=) (Int32.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures { ((=) (Int32.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint16 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Uint16.to_int n)) \/
     (Bit_int16_of_Bit_uint16.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint16 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int16.t
   requires { (Int16.in_bounds (Uint16.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int16.t
   requires { true }
   ensures { ((=) (Int16.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_int8

  use enum.Int8 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_int8 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_int8

  use enum.Int8 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_int8 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_int8

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_int8

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_int8

  use enum.Int8 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_int8 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_int8

  use enum.Int8 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_int8 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_int8

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_int8

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_int8

  use enum.Int8 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int8 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_int8

  use enum.Int8 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int8 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_int8

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_int8

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_int64

  use enum.Int64 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_int64 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int32.t
   requires {
     ((Bit_int32.in_bounds (Int64.to_int n)) \/
     (Bit_int32_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Int32.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_int64

  use enum.Int64 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_int64 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_int64

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int32.t
   requires { (Int32.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Int32.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_int64

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_int64

  use enum.Int64 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int64 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Int64.to_int n)) \/
     (Bit_int16_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_int64

  use enum.Int64 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int64 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_int64

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int16.t
   requires { (Int16.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_int64

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_int32

  use enum.Int32 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int32 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Int32.to_int n)) \/
     (Bit_int16_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_int32

  use enum.Int32 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int32 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_int32

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int16.t
   requires { (Int16.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_int32

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use Bit_uint8_of_Bit_uint64 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Uint64.to_int n)) \/
     (Bit_uint8_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use Bit_uint8_of_Bit_uint64 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint8.t
   requires { (Uint8.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint8.t
   requires { true }
   ensures { ((=) (Uint8.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use Bit_uint8_of_Bit_uint32 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Uint32.to_int n)) \/
     (Bit_uint8_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use Bit_uint8_of_Bit_uint32 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint8.t
   requires { (Uint8.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint8.t
   requires { true }
   ensures { ((=) (Uint8.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use Bit_uint8_of_Bit_uint16 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Uint16.to_int n)) \/
     (Bit_uint8_of_Bit_uint16.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use Bit_uint8_of_Bit_uint16 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint8.t
   requires { (Uint8.in_bounds (Uint16.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint8.t
   requires { true }
   ensures { ((=) (Uint8.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use Bit_uint8_of_Bit_int8 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Int8.to_int n)) \/
     (Bit_uint8_of_Bit_int8.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use Bit_uint8_of_Bit_int8 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint8.t
   requires { (Uint8.in_bounds (Int8.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint8.t
   requires { true } ensures { ((=) (Uint8.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use Bit_uint8_of_Bit_int64 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Int64.to_int n)) \/
     (Bit_uint8_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use Bit_uint8_of_Bit_int64 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint8.t
   requires { (Uint8.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint8.t
   requires { true } ensures { ((=) (Uint8.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use Bit_uint8_of_Bit_int32 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Int32.to_int n)) \/
     (Bit_uint8_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use Bit_uint8_of_Bit_int32 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint8.t
   requires { (Uint8.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint8.t
   requires { true } ensures { ((=) (Uint8.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use Bit_uint8_of_Bit_int16 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Int16.to_int n)) \/
     (Bit_uint8_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use Bit_uint8_of_Bit_int16 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint8.t
   requires { (Uint8.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint8.t
   requires { true } ensures { ((=) (Uint8.to_int result) (Int16.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use Bit_uint64_of_Bit_uint32 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint32.to_int n)))
     /\ ((=) result (Bit_uint64_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use Bit_uint64_of_Bit_uint32 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint32.to_int n)))
     /\ ((=) result (Bit_uint64_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use Bit_uint64_of_Bit_uint16 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint16.to_int n)))
     /\ ((=) result (Bit_uint64_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use Bit_uint64_of_Bit_uint16 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint16.to_int n)))
     /\ ((=) result (Bit_uint64_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use Bit_uint64_of_Bit_int8 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint64.t
   requires {
     ((Bit_uint64.in_bounds (Int8.to_int n)) \/
     (Bit_uint64_of_Bit_int8.is_safe n)) }
   ensures {
     (((=) (Uint64.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use Bit_uint64_of_Bit_int8 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint64.t
   requires { (Uint64.in_bounds (Int8.to_int n)) }
   ensures { ((=) (Uint64.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint64.t
   requires { true } ensures { ((=) (Uint64.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use Bit_uint64_of_Bit_int64 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint64.t
   requires {
     ((Bit_uint64.in_bounds (Int64.to_int n)) \/
     (Bit_uint64_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Uint64.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use Bit_uint64_of_Bit_int64 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint64.t
   requires { (Uint64.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Uint64.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use Bit_uint64_of_Bit_int32 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint64.t
   requires {
     ((Bit_uint64.in_bounds (Int32.to_int n)) \/
     (Bit_uint64_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Uint64.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use Bit_uint64_of_Bit_int32 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_bit_uint64_of_Safe_bit_int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use Bit_uint64_of_Bit_int16 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint64.t
   requires {
     ((Bit_uint64.in_bounds (Int16.to_int n)) \/
     (Bit_uint64_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Uint64.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use Bit_uint64_of_Bit_int16 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint64.t
   requires { (Uint64.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Uint64.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Int16.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use Bit_uint32_of_Bit_uint16 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint16.to_int n)))
     /\ ((=) result (Bit_uint32_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use Bit_uint32_of_Bit_uint16 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint16.to_int n)))
     /\ ((=) result (Bit_uint32_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use Bit_uint32_of_Bit_int8 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Int8.to_int n)) \/
     (Bit_uint32_of_Bit_int8.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use Bit_uint32_of_Bit_int8 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint32.t
   requires { (Uint32.in_bounds (Int8.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint32.t
   requires { true } ensures { ((=) (Uint32.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use Bit_uint32_of_Bit_int64 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Int64.to_int n)) \/
     (Bit_uint32_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use Bit_uint32_of_Bit_int64 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint32.t
   requires { (Uint32.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use Bit_uint32_of_Bit_int32 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Int32.to_int n)) \/
     (Bit_uint32_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use Bit_uint32_of_Bit_int32 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint32.t
   requires { (Uint32.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use Bit_uint32_of_Bit_int16 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Int16.to_int n)) \/
     (Bit_uint32_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use Bit_uint32_of_Bit_int16 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint32.t
   requires { (Uint32.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Int16.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use Bit_uint16_of_Bit_int8 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Int8.to_int n)) \/
     (Bit_uint16_of_Bit_int8.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use Bit_uint16_of_Bit_int8 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint16.t
   requires { (Uint16.in_bounds (Int8.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint16.t
   requires { true } ensures { ((=) (Uint16.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use Bit_uint16_of_Bit_int64 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Int64.to_int n)) \/
     (Bit_uint16_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use Bit_uint16_of_Bit_int64 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint16.t
   requires { (Uint16.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use Bit_uint16_of_Bit_int32 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Int32.to_int n)) \/
     (Bit_uint16_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use Bit_uint16_of_Bit_int32 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint16.t
   requires { (Uint16.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use Bit_uint16_of_Bit_int16 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Int16.to_int n)) \/
     (Bit_uint16_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use Bit_uint16_of_Bit_int16 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint16.t
   requires { (Uint16.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Int16.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_int64

  use enum.Int8 
  
  use enum.Int64 
  
  use Bit_int8_of_Bit_int64 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Int64.to_int n)) \/
     (Bit_int8_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_int64

  use enum.Int8 
  
  use enum.Int64 
  
  use Bit_int8_of_Bit_int64 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_int64

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int8.t
   requires { (Int8.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_int64

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_int32

  use enum.Int8 
  
  use enum.Int32 
  
  use Bit_int8_of_Bit_int32 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Int32.to_int n)) \/
     (Bit_int8_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_int32

  use enum.Int8 
  
  use enum.Int32 
  
  use Bit_int8_of_Bit_int32 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_int32

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int8.t
   requires { (Int8.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_int32

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_int16

  use enum.Int8 
  
  use enum.Int16 
  
  use Bit_int8_of_Bit_int16 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Int16.to_int n)) \/
     (Bit_int8_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_int16

  use enum.Int8 
  
  use enum.Int16 
  
  use Bit_int8_of_Bit_int16 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_int16

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int8.t
   requires { (Int8.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_int16

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Int16.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_int32

  use enum.Int64 
  
  use enum.Int32 
  
  use Bit_int64_of_Bit_int32 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_int32

  use enum.Int64 
  
  use enum.Int32 
  
  use Bit_int64_of_Bit_int32 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_int32

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_int32

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_int16

  use enum.Int64 
  
  use enum.Int16 
  
  use Bit_int64_of_Bit_int16 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_int16

  use enum.Int64 
  
  use enum.Int16 
  
  use Bit_int64_of_Bit_int16 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_int16

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_int16

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int16.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_int16

  use enum.Int32 
  
  use enum.Int16 
  
  use Bit_int32_of_Bit_int16 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_int16

  use enum.Int32 
  
  use enum.Int16 
  
  use Bit_int32_of_Bit_int16 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_int16

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_int16

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int16.to_int n)) }
  
end

theory Axiomatic_Memory_reinterpretation_predicates

  use Uint8_of_Int8 
  
  use enum.Uint8 
  
  use Uint32_of_Int32 
  
  use enum.Uint32 
  
  use enum.Int8 
  
  use enum.Int32 
  
  use import int.Int 
  
  use int.ComputerDivision 
  
  use enum.Bit_uint8_of_bit_uint32 
  
  use enum.Bit_uint8_of_bit_int32 
  
  use enum.Bit_uint32_of_bit_uint8 
  
  use enum.Bit_int8_of_bit_int32 
  
  use enum.Bit_int32_of_bit_uint8 
  
  use enum.Bit_int32_of_bit_int8 
  
  use why3.Bool.Bool 
  
  predicate uint32_as_uint8 (d0_1 : Uint32.t) (a0_1 : Uint8.t) (a1_1 :
  Uint8.t) (a2_1 : Uint8.t) (a3_1 : Uint8.t)
  =
     (((=) (Uint8.to_int a0_1)
      (ComputerDivision.mod (Uint32.to_int d0_1) (256)))
     /\
     ((let d1 = (ComputerDivision.div (Uint32.to_int d0_1) (256)) in
       (((=) (Uint8.to_int a1_1) (ComputerDivision.mod d1 (256))) /\
       (let d2 = (ComputerDivision.div d1 (256)) in
        (((=) (Uint8.to_int a2_1) (ComputerDivision.mod d2 (256))) /\
        (let d3 = (ComputerDivision.div d2 (256)) in
         ((=) (Uint8.to_int a3_1) d3))))))
     /\
     (Bit_uint8_of_bit_uint32.bit_uint32_as_bit_uint8 d0_1 a0_1 a1_1 a2_1
     a3_1)))
  
  
  function complement_to_uint32 (v : Int32.t) : Uint32.t
  =
     (if ((>=) (Int32.to_int v) (0)) then (#"whole_program.jc" 15 20 33#
      "expl:Integer cast" (Uint32_of_Int32.cast v)) else
      (#"whole_program.jc" 15 39 80# "expl:Integer cast"
      (Uint32.of_int (Int.(+) (Int32.to_int v) (4294967296)))))
  
  
  predicate int32_as_uint8 (d0_2 : Int32.t) (a3_2 : Uint8.t) (a2_2 : Uint8.t)
  (a1_2 : Uint8.t) (a0_2 : Uint8.t)
  =
     ((uint32_as_uint8 (complement_to_uint32 d0_2) a3_2 a2_2 a1_2 a0_2) /\
     (Bit_uint8_of_bit_int32.bit_int32_as_bit_uint8 d0_2 a3_2 a2_2 a1_2 a0_2))
  
  
  function complement_to_uint8 (v_0 : Int8.t) : Uint8.t
  =
     (if ((>=) (Int8.to_int v_0) (0)) then (#"whole_program.jc" 34 20 32#
      "expl:Integer cast" (Uint8_of_Int8.cast v_0)) else
      (#"whole_program.jc" 34 38 71# "expl:Integer cast"
      (Uint8.of_int (Int.(+) (Int8.to_int v_0) (256)))))
  
  
  predicate int32_as_int8 (d0_4 : Int32.t) (a3_4 : Int8.t) (a2_4 : Int8.t)
  (a1_4 : Int8.t) (a0_4 : Int8.t)
  =
     ((int32_as_uint8 d0_4 (complement_to_uint8 a3_4)
      (complement_to_uint8 a2_4) (complement_to_uint8 a1_4)
      (complement_to_uint8 a0_4))
     /\
     (Bit_int8_of_bit_int32.bit_int32_as_bit_int8 d0_4 a3_4 a2_4 a1_4 a0_4))
  
  
  predicate uint8_as_uint32 (d0 : Uint32.t) (a0 : Uint8.t) (a1 : Uint8.t) (a2
  : Uint8.t) (a3 : Uint8.t)
  =
     (((=) (Uint32.to_int d0)
      (Int.(+)
      (Int.( *)
      (Int.(+)
      (Int.( *)
      (Int.(+) (Int.( *) (Uint8.to_int a3) (256)) (Uint8.to_int a2)) (256))
      (Uint8.to_int a1)) (256)) (Uint8.to_int a0)))
     /\ (Bit_uint32_of_bit_uint8.bit_uint8_as_bit_uint32 d0 a0 a1 a2 a3))
  
  
  predicate uint8_as_int32 (d0_0 : Int32.t) (a3_0 : Uint8.t) (a2_0 : Uint8.t)
  (a1_0 : Uint8.t) (a0_0 : Uint8.t)
  =
     ((uint8_as_uint32 (complement_to_uint32 d0_0) a3_0 a2_0 a1_0 a0_0) /\
     (Bit_int32_of_bit_uint8.bit_uint8_as_bit_int32 d0_0 a3_0 a2_0 a1_0 a0_0))
  
  
  predicate int8_as_int32 (d0_3 : Int32.t) (a3_3 : Int8.t) (a2_3 : Int8.t)
  (a1_3 : Int8.t) (a0_3 : Int8.t)
  =
     ((uint8_as_int32 d0_3 (complement_to_uint8 a3_3)
      (complement_to_uint8 a2_3) (complement_to_uint8 a1_3)
      (complement_to_uint8 a0_3))
     /\
     (Bit_int32_of_bit_int8.bit_int8_as_bit_int32 d0_3 a3_3 a2_3 a1_3 a0_3))
  
  
end

module Function_q_remove

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use enum.Int32 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val q_remove
  (self_3_0 : (pointer voidP)) 
   (elem_0 : (pointer voidP)) 
    (_Queue_curr_elem_self_3_11 : ref (memory voidP Int32.t)) 
     (intP_intM_elem_0_12 : ref (memory voidP Int32.t)) 
      (voidP_array_22_alloc_table : (alloc_table voidP)) 
       (voidP_elem_0_12_alloc_table : (alloc_table voidP)) 
        (voidP_self_3_11_alloc_table : (alloc_table voidP)) 
         (voidP_array_22_tag_table : (tag_table voidP)) 
          (_Queue_empty_elem_self_3_11 : (memory voidP Int32.t)) 
           (_Queue_capacity_self_3_11 : (memory voidP Int32.t)) 
            (_Queue_array_self_3_11 : (memory voidP (pointer voidP))) 
             (intP_intM_array_22 : (memory voidP Int32.t)) : Int32.t
              requires { true } reads { _Queue_curr_elem_self_3_11 } writes {
              _Queue_curr_elem_self_3_11, intP_intM_elem_0_12 }
              ensures { true }
  
end

module Function_q_remove_safe

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_is_valid_queue 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val q_remove
  (self_3_0 : (pointer voidP)) 
   (elem_0 : (pointer voidP)) 
    (_Queue_curr_elem_self_3_11 : ref (memory voidP Int32.t)) 
     (intP_intM_elem_0_12 : ref (memory voidP Int32.t)) 
      (voidP_array_22_alloc_table : (alloc_table voidP)) 
       (voidP_elem_0_12_alloc_table : (alloc_table voidP)) 
        (voidP_self_3_11_alloc_table : (alloc_table voidP)) 
         (voidP_array_22_tag_table : (tag_table voidP)) 
          (_Queue_empty_elem_self_3_11 : (memory voidP Int32.t)) 
           (_Queue_capacity_self_3_11 : (memory voidP Int32.t)) 
            (_Queue_array_self_3_11 : (memory voidP (pointer voidP))) 
             (intP_intM_array_22 : (memory voidP Int32.t)) : Int32.t
              requires {
                ("expl:Internal"
                (#"whole_program.jc" 242 12 250# "expl:Requires clause"
                ((#"/home/nik/Projects/ver/sem_6/queue.h" 85 13 25#
                 "expl:Requires clause"
                 (#"whole_program.jc" 242 12 250# "expl:Requires clause"
                 ((#"whole_program.jc" 242 12 250# "expl:Requires clause"
                  ((<=) (offset_min voidP_self_3_11_alloc_table self_3_0)
                  (0)))
                 /\
                 (#"whole_program.jc" 242 12 250# "expl:Requires clause"
                 ((#"whole_program.jc" 242 12 250# "expl:Requires clause"
                  ((>=) (offset_max voidP_self_3_11_alloc_table self_3_0)
                  (0)))
                 /\
                 (#"whole_program.jc" 242 12 250# "expl:Requires clause"
                 ((=) true true)))))))
                /\
                (#"/home/nik/Projects/ver/sem_6/queue.h" 86 13 33#
                "expl:Requires clause"
                (is_valid_queue self_3_0 voidP_array_22_alloc_table
                voidP_self_3_11_alloc_table _Queue_empty_elem_self_3_11
                !_Queue_curr_elem_self_3_11 _Queue_capacity_self_3_11
                _Queue_array_self_3_11))))) }
              reads { _Queue_curr_elem_self_3_11 } writes {
              _Queue_curr_elem_self_3_11, intP_intM_elem_0_12 }
              ensures { true }
  
end

module Function_test_overflow

  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val test_overflow
  (tt : unit) : Int32.t
   requires { true }
   ensures {
     (#"/home/nik/Projects/ver/sem_6/task_6_2.c" 91 12 40#
     "expl:Ensures clause"
     ((Int32.(=) result (#"whole_program.jc" 288 33 45# "expl:Integer cast"
      (Int32.of_int (0))))
     \/
     (Int32.(=) result (#"whole_program.jc" 288 62 74# "expl:Integer cast"
     (Int32.of_int (1)))))) }
  
end

module Function_test_overflow_safe

  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val test_overflow
  (tt : unit) : Int32.t
   requires { (true) }
   ensures {
     (#"/home/nik/Projects/ver/sem_6/task_6_2.c" 91 12 40#
     "expl:Ensures clause"
     ((Int32.(=) result (#"whole_program.jc" 288 33 45# "expl:Integer cast"
      (Int32.of_int (0))))
     \/
     (Int32.(=) result (#"whole_program.jc" 288 62 74# "expl:Integer cast"
     (Int32.of_int (1)))))) }
  
end
