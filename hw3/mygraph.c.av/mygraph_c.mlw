
theory Axiomatic_Padding 
                           use why3.Bool.Bool 
                           
end

theory Int32_of_Int16

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Int32.t = (Int32.of_int (Int16.to_int n))
  
end

theory Bit_int32_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Int32_of_Int16
  
  use export enum.Bit_int32_of_bit_int16
  
end

theory Int64_of_Int16

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Int64.t = (Int64.of_int (Int16.to_int n))
  
end

theory Bit_int64_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Int64_of_Int16
  
  use export enum.Bit_int64_of_bit_int16
  
end

theory Int64_of_Int32

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Int64.t = (Int64.of_int (Int32.to_int n))
  
end

theory Bit_int64_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Int64_of_Int32
  
  use export enum.Bit_int64_of_bit_int32
  
end

theory Int8_of_Int16

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Int8.t = (Int8.of_int (Int16.to_int n))
  
end

theory Bit_int8_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Int8_of_Int16
  
  use export enum.Bit_int8_of_bit_int16
  
end

theory Int8_of_Int32

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Int8.t = (Int8.of_int (Int32.to_int n))
  
end

theory Bit_int8_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Int8_of_Int32
  
  use export enum.Bit_int8_of_bit_int32
  
end

theory Int8_of_Int64

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Int8.t = (Int8.of_int (Int64.to_int n))
  
end

theory Bit_int8_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Int8_of_Int64
  
  use export enum.Bit_int8_of_bit_int64
  
end

theory Uint16_of_Int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Uint16.t = (Uint16.of_int (Int16.to_int n))
  
end

theory Bit_uint16_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Uint16_of_Int16
  
  use export enum.Bit_uint16_of_bit_int16
  
end

theory Uint16_of_Int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Uint16.t = (Uint16.of_int (Int32.to_int n))
  
end

theory Bit_uint16_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Uint16_of_Int32
  
  use export enum.Bit_uint16_of_bit_int32
  
end

theory Uint16_of_Int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Uint16.t = (Uint16.of_int (Int64.to_int n))
  
end

theory Bit_uint16_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Uint16_of_Int64
  
  use export enum.Bit_uint16_of_bit_int64
  
end

theory Uint16_of_Int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Uint16.t = (Uint16.of_int (Int8.to_int n))
  
end

theory Bit_uint16_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Uint16_of_Int8
  
  use export enum.Bit_uint16_of_bit_int8
  
end

theory Uint32_of_Int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Uint32.t = (Uint32.of_int (Int16.to_int n))
  
end

theory Bit_uint32_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Uint32_of_Int16
  
  use export enum.Bit_uint32_of_bit_int16
  
end

theory Uint32_of_Int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Uint32.t = (Uint32.of_int (Int32.to_int n))
  
end

theory Bit_uint32_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Uint32_of_Int32
  
  use export enum.Bit_uint32_of_bit_int32
  
end

theory Uint32_of_Int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Uint32.t = (Uint32.of_int (Int64.to_int n))
  
end

theory Bit_uint32_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Uint32_of_Int64
  
  use export enum.Bit_uint32_of_bit_int64
  
end

theory Uint32_of_Int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Uint32.t = (Uint32.of_int (Int8.to_int n))
  
end

theory Bit_uint32_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Uint32_of_Int8
  
  use export enum.Bit_uint32_of_bit_int8
  
end

theory Uint32_of_Uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Uint32.t = (Uint32.of_int (Uint16.to_int n))
  
end

theory Bit_uint32_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Uint32_of_Uint16
  
  use export enum.Bit_uint32_of_bit_uint16
  
end

theory Uint64_of_Int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Uint64.t = (Uint64.of_int (Int16.to_int n))
  
end

theory Bit_uint64_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Uint64_of_Int16
  
  use export enum.Bit_uint64_of_bit_int16
  
end

theory Uint64_of_Int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Uint64.t = (Uint64.of_int (Int32.to_int n))
  
end

theory Bit_uint64_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Uint64_of_Int32
  
  use export enum.Bit_uint64_of_bit_int32
  
end

theory Uint64_of_Int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Uint64.t = (Uint64.of_int (Int64.to_int n))
  
end

theory Bit_uint64_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Uint64_of_Int64
  
  use export enum.Bit_uint64_of_bit_int64
  
end

theory Uint64_of_Int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Uint64.t = (Uint64.of_int (Int8.to_int n))
  
end

theory Bit_uint64_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Uint64_of_Int8
  
  use export enum.Bit_uint64_of_bit_int8
  
end

theory Uint64_of_Uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Uint64.t = (Uint64.of_int (Uint16.to_int n))
  
end

theory Bit_uint64_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Uint64_of_Uint16
  
  use export enum.Bit_uint64_of_bit_uint16
  
end

theory Uint64_of_Uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Uint64.t = (Uint64.of_int (Uint32.to_int n))
  
end

theory Bit_uint64_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Uint64_of_Uint32
  
  use export enum.Bit_uint64_of_bit_uint32
  
end

theory Uint8_of_Int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Uint8.t = (Uint8.of_int (Int16.to_int n))
  
end

theory Bit_uint8_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Uint8_of_Int16
  
  use export enum.Bit_uint8_of_bit_int16
  
end

theory Uint8_of_Int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Uint8.t = (Uint8.of_int (Int32.to_int n))
  
end

theory Bit_uint8_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Uint8_of_Int32
  
  use export enum.Bit_uint8_of_bit_int32
  
end

theory Uint8_of_Int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Uint8.t = (Uint8.of_int (Int64.to_int n))
  
end

theory Bit_uint8_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Uint8_of_Int64
  
  use export enum.Bit_uint8_of_bit_int64
  
end

theory Uint8_of_Int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Uint8.t = (Uint8.of_int (Int8.to_int n))
  
end

theory Bit_uint8_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Uint8_of_Int8
  
  use export enum.Bit_uint8_of_bit_int8
  
end

theory Uint8_of_Uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Uint8.t = (Uint8.of_int (Uint16.to_int n))
  
end

theory Bit_uint8_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Uint8_of_Uint16
  
  use export enum.Bit_uint8_of_bit_uint16
  
end

theory Uint8_of_Uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Uint8.t = (Uint8.of_int (Uint32.to_int n))
  
end

theory Bit_uint8_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Uint8_of_Uint32
  
  use export enum.Bit_uint8_of_bit_uint32
  
end

theory Uint8_of_Uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Uint8.t = (Uint8.of_int (Uint64.to_int n))
  
end

theory Bit_uint8_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Uint8_of_Uint64
  
  use export enum.Bit_uint8_of_bit_uint64
  
end

theory Int16_of_Int32

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Int16.t = (Int16.of_int (Int32.to_int n))
  
end

theory Bit_int16_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Int16_of_Int32
  
  use export enum.Bit_int16_of_bit_int32
  
end

theory Int16_of_Int64

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Int16.t = (Int16.of_int (Int64.to_int n))
  
end

theory Bit_int16_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Int16_of_Int64
  
  use export enum.Bit_int16_of_bit_int64
  
end

theory Int32_of_Int64

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Int32.t = (Int32.of_int (Int64.to_int n))
  
end

theory Bit_int32_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Int32_of_Int64
  
  use export enum.Bit_int32_of_bit_int64
  
end

theory Int16_of_Int8

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Int16.t = (Int16.of_int (Int8.to_int n))
  
end

theory Bit_int16_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Int16_of_Int8
  
  use export enum.Bit_int16_of_bit_int8
  
end

theory Int32_of_Int8

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Int32.t = (Int32.of_int (Int8.to_int n))
  
end

theory Bit_int32_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Int32_of_Int8
  
  use export enum.Bit_int32_of_bit_int8
  
end

theory Int64_of_Int8

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Int64.t = (Int64.of_int (Int8.to_int n))
  
end

theory Bit_int64_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Int64_of_Int8
  
  use export enum.Bit_int64_of_bit_int8
  
end

theory Int16_of_Uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Int16.t = (Int16.of_int (Uint16.to_int n))
  
end

theory Bit_int16_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Int16_of_Uint16
  
  use export enum.Bit_int16_of_bit_uint16
  
end

theory Int32_of_Uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Int32.t = (Int32.of_int (Uint16.to_int n))
  
end

theory Bit_int32_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Int32_of_Uint16
  
  use export enum.Bit_int32_of_bit_uint16
  
end

theory Int64_of_Uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Int64.t = (Int64.of_int (Uint16.to_int n))
  
end

theory Bit_int64_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Int64_of_Uint16
  
  use export enum.Bit_int64_of_bit_uint16
  
end

theory Int8_of_Uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Int8.t = (Int8.of_int (Uint16.to_int n))
  
end

theory Bit_int8_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Int8_of_Uint16
  
  use export enum.Bit_int8_of_bit_uint16
  
end

theory Int16_of_Uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Int16.t = (Int16.of_int (Uint32.to_int n))
  
end

theory Bit_int16_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Int16_of_Uint32
  
  use export enum.Bit_int16_of_bit_uint32
  
end

theory Int32_of_Uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Int32.t = (Int32.of_int (Uint32.to_int n))
  
end

theory Bit_int32_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Int32_of_Uint32
  
  use export enum.Bit_int32_of_bit_uint32
  
end

theory Int64_of_Uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Int64.t = (Int64.of_int (Uint32.to_int n))
  
end

theory Bit_int64_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Int64_of_Uint32
  
  use export enum.Bit_int64_of_bit_uint32
  
end

theory Int8_of_Uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Int8.t = (Int8.of_int (Uint32.to_int n))
  
end

theory Bit_int8_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Int8_of_Uint32
  
  use export enum.Bit_int8_of_bit_uint32
  
end

theory Uint16_of_Uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Uint16.t = (Uint16.of_int (Uint32.to_int n))
  
end

theory Bit_uint16_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Uint16_of_Uint32
  
  use export enum.Bit_uint16_of_bit_uint32
  
end

theory Int16_of_Uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Int16.t = (Int16.of_int (Uint64.to_int n))
  
end

theory Bit_int16_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Int16_of_Uint64
  
  use export enum.Bit_int16_of_bit_uint64
  
end

theory Int32_of_Uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Int32.t = (Int32.of_int (Uint64.to_int n))
  
end

theory Bit_int32_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Int32_of_Uint64
  
  use export enum.Bit_int32_of_bit_uint64
  
end

theory Int64_of_Uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Int64.t = (Int64.of_int (Uint64.to_int n))
  
end

theory Bit_int64_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Int64_of_Uint64
  
  use export enum.Bit_int64_of_bit_uint64
  
end

theory Int8_of_Uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Int8.t = (Int8.of_int (Uint64.to_int n))
  
end

theory Bit_int8_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Int8_of_Uint64
  
  use export enum.Bit_int8_of_bit_uint64
  
end

theory Uint16_of_Uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Uint16.t = (Uint16.of_int (Uint64.to_int n))
  
end

theory Bit_uint16_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Uint16_of_Uint64
  
  use export enum.Bit_uint16_of_bit_uint64
  
end

theory Uint32_of_Uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Uint32.t = (Uint32.of_int (Uint64.to_int n))
  
end

theory Bit_uint32_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Uint32_of_Uint64
  
  use export enum.Bit_uint32_of_bit_uint64
  
end

theory Int16_of_Uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Int16.t = (Int16.of_int (Uint8.to_int n))
  
end

theory Bit_int16_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Int16_of_Uint8
  
  use export enum.Bit_int16_of_bit_uint8
  
end

theory Int32_of_Uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Int32.t = (Int32.of_int (Uint8.to_int n))
  
end

theory Bit_int32_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Int32_of_Uint8
  
  use export enum.Bit_int32_of_bit_uint8
  
end

theory Int64_of_Uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Int64.t = (Int64.of_int (Uint8.to_int n))
  
end

theory Bit_int64_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Int64_of_Uint8
  
  use export enum.Bit_int64_of_bit_uint8
  
end

theory Int8_of_Uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Int8.t = (Int8.of_int (Uint8.to_int n))
  
end

theory Bit_int8_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Int8_of_Uint8
  
  use export enum.Bit_int8_of_bit_uint8
  
end

theory Uint16_of_Uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Uint16.t = (Uint16.of_int (Uint8.to_int n))
  
end

theory Bit_uint16_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Uint16_of_Uint8
  
  use export enum.Bit_uint16_of_bit_uint8
  
end

theory Uint32_of_Uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Uint32.t = (Uint32.of_int (Uint8.to_int n))
  
end

theory Bit_uint32_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Uint32_of_Uint8
  
  use export enum.Bit_uint32_of_bit_uint8
  
end

theory Uint64_of_Uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Uint64.t = (Uint64.of_int (Uint8.to_int n))
  
end

theory Bit_uint64_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Uint64_of_Uint8
  
  use export enum.Bit_uint64_of_bit_uint8
  
end

module Unsafe_uint8

  use why3.Bool.Bool 
  
  use import enum.Uint8 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_uint8

  use why3.Bool.Bool 
  
  use import enum.Uint8 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_uint8

  use why3.Bool.Bool 
  
  use import enum.Bit_uint8 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_uint8

  use why3.Bool.Bool 
  
  use import enum.Bit_uint8 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_uint64

  use why3.Bool.Bool 
  
  use import enum.Uint64 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_uint64

  use why3.Bool.Bool 
  
  use import enum.Uint64 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_uint64

  use why3.Bool.Bool 
  
  use import enum.Bit_uint64 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_uint64

  use why3.Bool.Bool 
  
  use import enum.Bit_uint64 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_uint32

  use why3.Bool.Bool 
  
  use import enum.Uint32 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_uint32

  use why3.Bool.Bool 
  
  use import enum.Uint32 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_uint32

  use why3.Bool.Bool 
  
  use import enum.Bit_uint32 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_uint32

  use why3.Bool.Bool 
  
  use import enum.Bit_uint32 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_uint16

  use why3.Bool.Bool 
  
  use import enum.Uint16 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_uint16

  use why3.Bool.Bool 
  
  use import enum.Uint16 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_uint16

  use why3.Bool.Bool 
  
  use import enum.Bit_uint16 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_uint16

  use why3.Bool.Bool 
  
  use import enum.Bit_uint16 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_int8

  use why3.Bool.Bool 
  
  use import enum.Int8 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_int8

  use why3.Bool.Bool 
  
  use import enum.Int8 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_int8

  use why3.Bool.Bool 
  
  use import enum.Bit_int8 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_int8

  use why3.Bool.Bool 
  
  use import enum.Bit_int8 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_int64

  use why3.Bool.Bool 
  
  use import enum.Int64 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_int64

  use why3.Bool.Bool 
  
  use import enum.Int64 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_int64

  use why3.Bool.Bool 
  
  use import enum.Bit_int64 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_int64

  use why3.Bool.Bool 
  
  use import enum.Bit_int64 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_int32

  use why3.Bool.Bool 
  
  use import enum.Int32 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_int32

  use why3.Bool.Bool 
  
  use import enum.Int32 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_int32

  use why3.Bool.Bool 
  
  use import enum.Bit_int32 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_int32

  use why3.Bool.Bool 
  
  use import enum.Bit_int32 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_int16

  use why3.Bool.Bool 
  
  use import enum.Int16 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_int16

  use why3.Bool.Bool 
  
  use import enum.Int16 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_int16

  use why3.Bool.Bool 
  
  use import enum.Bit_int16 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_int16

  use why3.Bool.Bool 
  
  use import enum.Bit_int16 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Globals_simple

  use why3.Bool.Bool 
  
end

theory Root_voidP

  use why3.Bool.Bool 
  
  use import core.Voidp 
  
end

module Root_voidP_safe

  use why3.Bool.Bool 
  
end

module Root_voidP_unsafe

  use why3.Bool.Bool 
  
end

module Root___anonstruct_Vertex_2_safe

  use why3.Bool.Bool 
  
end

module Root___anonstruct_Vertex_2_unsafe

  use why3.Bool.Bool 
  
end

module Root___anonstruct_Graph_4_safe

  use why3.Bool.Bool 
  
end

module Root___anonstruct_Graph_4_unsafe

  use why3.Bool.Bool 
  
end

module Root___anonstruct_Edge_3_safe

  use why3.Bool.Bool 
  
end

module Root___anonstruct_Edge_3_unsafe

  use why3.Bool.Bool 
  
end

theory Root___anonstruct_Graph_4

  use why3.Bool.Bool 
  
  type __anonstruct_Graph_4 
  
end

theory Root___anonstruct_Edge_3

  use why3.Bool.Bool 
  
  type __anonstruct_Edge_3 
  
end

theory Axiomatic_EdgesCount

  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use enum.Int32 
  
  use import int.Int 
  
  use bool.Bool 
  
  use why3.Bool.Bool 
  
  function count (pointer __anonstruct_Graph_4) int int int int (memory
  __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)) (memory
  __anonstruct_Edge_3 Int32.t) (memory __anonstruct_Edge_3 Int32.t) (memory
  __anonstruct_Edge_3 Int32.t) : int
  
  
  axiom Count_zero #"/home/nik/Projects/ver/hw3/mygraph.c" 84 81 188#
  "expl:Axiom count_zero"  :
  (forall __anonstruct_Graph_4_edges_g_5_8_at_L : (memory
   __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)).
   (forall __anonstruct_Edge_3_existent_0_edges_21_at_L : (memory
    __anonstruct_Edge_3 Int32.t).
    (forall __anonstruct_Edge_3_to_edges_21_at_L : (memory
     __anonstruct_Edge_3 Int32.t).
     (forall __anonstruct_Edge_3_from_edges_21_at_L : (memory
      __anonstruct_Edge_3 Int32.t).
      (#"/home/nik/Projects/ver/hw3/mygraph.c" 86 22 104#
      (forall g_6_0 : (pointer __anonstruct_Graph_4).
       (forall f_0_0 : int.
        (forall t_0_0 : int.
         (forall m_1_0 : int.
          (forall n_4 : int.
           (((>=) m_1_0 n_4) ->
            ((=)
            (count g_6_0 f_0_0 t_0_0 m_1_0 n_4
            __anonstruct_Graph_4_edges_g_5_8_at_L
            __anonstruct_Edge_3_existent_0_edges_21_at_L
            __anonstruct_Edge_3_to_edges_21_at_L
            __anonstruct_Edge_3_from_edges_21_at_L) (0)))))))))))))
  
  predicate count_one_p (g_7 : (pointer __anonstruct_Graph_4)) (f_1 : int)
  (t_1 : int) (m_2 : int) (__anonstruct_Graph_4_edges_g_5_8_at_L : (memory
  __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)))
  (__anonstruct_Edge_3_existent_0_edges_21_at_L : (memory __anonstruct_Edge_3
  Int32.t)) (__anonstruct_Edge_3_to_edges_21_at_L : (memory
  __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_from_edges_21_at_L :
  (memory __anonstruct_Edge_3 Int32.t))
  =
     ((=)
     (count g_7 f_1 t_1 m_2 (Int.(+) m_2 (1))
     __anonstruct_Graph_4_edges_g_5_8_at_L
     __anonstruct_Edge_3_existent_0_edges_21_at_L
     __anonstruct_Edge_3_to_edges_21_at_L
     __anonstruct_Edge_3_from_edges_21_at_L)
     (if
      (Bool.andb
      (Bool.andb
      ((<>)
      (Int32.to_int
      (select __anonstruct_Edge_3_existent_0_edges_21_at_L
      (shift (select __anonstruct_Graph_4_edges_g_5_8_at_L g_7) m_2))) (0))
      ((=)
      (Int32.to_int
      (select __anonstruct_Edge_3_from_edges_21_at_L
      (shift (select __anonstruct_Graph_4_edges_g_5_8_at_L g_7) m_2))) f_1))
      ((=)
      (Int32.to_int
      (select __anonstruct_Edge_3_to_edges_21_at_L
      (shift (select __anonstruct_Graph_4_edges_g_5_8_at_L g_7) m_2))) t_1))
      then (1) else (0)))
  
  
  axiom Count_one #"/home/nik/Projects/ver/hw3/mygraph.c" 90 115 200#
  "expl:Axiom count_one"  :
  (forall __anonstruct_Graph_4_edges_g_5_8_at_L : (memory
   __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)).
   (forall __anonstruct_Edge_3_existent_0_edges_21_at_L : (memory
    __anonstruct_Edge_3 Int32.t).
    (forall __anonstruct_Edge_3_to_edges_21_at_L : (memory
     __anonstruct_Edge_3 Int32.t).
     (forall __anonstruct_Edge_3_from_edges_21_at_L : (memory
      __anonstruct_Edge_3 Int32.t).
      (#"/home/nik/Projects/ver/hw3/mygraph.c" 92 24 82#
      (forall g_8 : (pointer __anonstruct_Graph_4).
       (forall f_2_0 : int.
        (forall t_2_0 : int.
         (forall m_3 : int.
          (count_one_p g_8 f_2_0 t_2_0 m_3
          __anonstruct_Graph_4_edges_g_5_8_at_L
          __anonstruct_Edge_3_existent_0_edges_21_at_L
          __anonstruct_Edge_3_to_edges_21_at_L
          __anonstruct_Edge_3_from_edges_21_at_L))))))))))
  
  predicate count_split_p (g_9 : (pointer __anonstruct_Graph_4)) (f_3 : int)
  (t_3 : int) (m_4 : int) (n_5 : int) (k_5 : int)
  (__anonstruct_Graph_4_edges_g_5_8_at_L : (memory __anonstruct_Graph_4
  (pointer __anonstruct_Edge_3)))
  (__anonstruct_Edge_3_existent_0_edges_21_at_L : (memory __anonstruct_Edge_3
  Int32.t)) (__anonstruct_Edge_3_to_edges_21_at_L : (memory
  __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_from_edges_21_at_L :
  (memory __anonstruct_Edge_3 Int32.t))
  =
     ((=)
     (count g_9 f_3 t_3 m_4 k_5 __anonstruct_Graph_4_edges_g_5_8_at_L
     __anonstruct_Edge_3_existent_0_edges_21_at_L
     __anonstruct_Edge_3_to_edges_21_at_L
     __anonstruct_Edge_3_from_edges_21_at_L)
     (Int.(+)
     (count g_9 f_3 t_3 m_4 n_5 __anonstruct_Graph_4_edges_g_5_8_at_L
     __anonstruct_Edge_3_existent_0_edges_21_at_L
     __anonstruct_Edge_3_to_edges_21_at_L
     __anonstruct_Edge_3_from_edges_21_at_L)
     (count g_9 f_3 t_3 n_5 k_5 __anonstruct_Graph_4_edges_g_5_8_at_L
     __anonstruct_Edge_3_existent_0_edges_21_at_L
     __anonstruct_Edge_3_to_edges_21_at_L
     __anonstruct_Edge_3_from_edges_21_at_L)))
  
  
  axiom Count_split #"/home/nik/Projects/ver/hw3/mygraph.c" 95 76 201#
  "expl:Axiom count_split"  :
  (forall __anonstruct_Graph_4_edges_g_5_8_at_L : (memory
   __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)).
   (forall __anonstruct_Edge_3_existent_0_edges_21_at_L : (memory
    __anonstruct_Edge_3 Int32.t).
    (forall __anonstruct_Edge_3_to_edges_21_at_L : (memory
     __anonstruct_Edge_3 Int32.t).
     (forall __anonstruct_Edge_3_from_edges_21_at_L : (memory
      __anonstruct_Edge_3 Int32.t).
      (#"/home/nik/Projects/ver/hw3/mygraph.c" 97 26 122#
      (forall g_10 : (pointer __anonstruct_Graph_4).
       (forall f_4 : int.
        (forall t_4 : int.
         (forall m_5 : int.
          (forall n_6 : int.
           (forall k_6 : int.
            ((((<=) m_5 n_6) /\ ((<=) n_6 k_6)) ->
             (count_split_p g_10 f_4 t_4 m_5 n_6 k_6
             __anonstruct_Graph_4_edges_g_5_8_at_L
             __anonstruct_Edge_3_existent_0_edges_21_at_L
             __anonstruct_Edge_3_to_edges_21_at_L
             __anonstruct_Edge_3_from_edges_21_at_L)))))))))))))
  
end

theory Root___anonstruct_Vertex_2

  use why3.Bool.Bool 
  
  type __anonstruct_Vertex_2 
  
end

theory Logic_is_vertex

  use import Root___anonstruct_Graph_4 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use enum.Int32 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  predicate is_vertex (g : (pointer __anonstruct_Graph_4)) (v : int)
  (__anonstruct_Graph_4_vsize_g_2_at_L : (memory __anonstruct_Graph_4
  Int32.t))
  =
     (((<=) (0) v) /\
     ((<) v (Int32.to_int (select __anonstruct_Graph_4_vsize_g_2_at_L g))))
  
  
end

theory Logic_edge_valid

  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_is_vertex 
  
  use enum.Int32 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  predicate edge_valid (g_0 : (pointer __anonstruct_Graph_4)) (k_1 : int)
  (__anonstruct_Graph_4_edges_g_0_3_at_L : (memory __anonstruct_Graph_4
  (pointer __anonstruct_Edge_3))) (__anonstruct_Graph_4_vsize_g_0_3_at_L :
  (memory __anonstruct_Graph_4 Int32.t))
  (__anonstruct_Graph_4_vertices_g_0_3_at_L : (memory __anonstruct_Graph_4
  (pointer __anonstruct_Vertex_2)))
  (__anonstruct_Edge_3_existent_0_edges_15_at_L : (memory __anonstruct_Edge_3
  Int32.t)) (__anonstruct_Edge_3_to_edges_15_at_L : (memory
  __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_from_edges_15_at_L :
  (memory __anonstruct_Edge_3 Int32.t))
  (__anonstruct_Vertex_2_existent_vertices_16_at_L : (memory
  __anonstruct_Vertex_2 Int32.t))
  =
     ((not
      ((=)
      (Int32.to_int
      (select __anonstruct_Edge_3_existent_0_edges_15_at_L
      (shift (select __anonstruct_Graph_4_edges_g_0_3_at_L g_0) k_1))) (0)))
      ->
      ((is_vertex g_0
       (Int32.to_int
       (select __anonstruct_Edge_3_from_edges_15_at_L
       (shift (select __anonstruct_Graph_4_edges_g_0_3_at_L g_0) k_1)))
       __anonstruct_Graph_4_vsize_g_0_3_at_L)
      /\
      ((is_vertex g_0
       (Int32.to_int
       (select __anonstruct_Edge_3_to_edges_15_at_L
       (shift (select __anonstruct_Graph_4_edges_g_0_3_at_L g_0) k_1)))
       __anonstruct_Graph_4_vsize_g_0_3_at_L)
      /\
      ((not
       ((=)
       (Int32.to_int
       (select __anonstruct_Vertex_2_existent_vertices_16_at_L
       (shift (select __anonstruct_Graph_4_vertices_g_0_3_at_L g_0)
       (Int32.to_int
       (select __anonstruct_Edge_3_from_edges_15_at_L
       (shift (select __anonstruct_Graph_4_edges_g_0_3_at_L g_0) k_1))))))
       (0)))
      /\
      (not
      ((=)
      (Int32.to_int
      (select __anonstruct_Vertex_2_existent_vertices_16_at_L
      (shift (select __anonstruct_Graph_4_vertices_g_0_3_at_L g_0)
      (Int32.to_int
      (select __anonstruct_Edge_3_to_edges_15_at_L
      (shift (select __anonstruct_Graph_4_edges_g_0_3_at_L g_0) k_1))))))
      (0)))))))
  
  
end

theory Logic_edges_valid

  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_edge_valid 
  
  use enum.Int32 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  predicate edges_valid (g_1 : (pointer __anonstruct_Graph_4)) (n_1 : int)
  (__anonstruct_Graph_4_edges_g_1_4_at_L : (memory __anonstruct_Graph_4
  (pointer __anonstruct_Edge_3))) (__anonstruct_Graph_4_vsize_g_1_4_at_L :
  (memory __anonstruct_Graph_4 Int32.t))
  (__anonstruct_Graph_4_vertices_g_1_4_at_L : (memory __anonstruct_Graph_4
  (pointer __anonstruct_Vertex_2)))
  (__anonstruct_Edge_3_existent_0_edges_37_at_L : (memory __anonstruct_Edge_3
  Int32.t)) (__anonstruct_Edge_3_to_edges_37_at_L : (memory
  __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_from_edges_37_at_L :
  (memory __anonstruct_Edge_3 Int32.t))
  (__anonstruct_Vertex_2_existent_vertices_38_at_L : (memory
  __anonstruct_Vertex_2 Int32.t))
  =
     (forall k_2 : int.
      ((((<=) (0) k_2) /\ ((<) k_2 n_1)) ->
       (edge_valid g_1 k_2 __anonstruct_Graph_4_edges_g_1_4_at_L
       __anonstruct_Graph_4_vsize_g_1_4_at_L
       __anonstruct_Graph_4_vertices_g_1_4_at_L
       __anonstruct_Edge_3_existent_0_edges_37_at_L
       __anonstruct_Edge_3_to_edges_37_at_L
       __anonstruct_Edge_3_from_edges_37_at_L
       __anonstruct_Vertex_2_existent_vertices_38_at_L)))
  
  
end

theory Logic_graph_valid

  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_edges_valid 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  predicate graph_valid (g_2 : (pointer __anonstruct_Graph_4))
  (__anonstruct_Vertex_2_vertices_17_alloc_table_at_L : (alloc_table
  __anonstruct_Vertex_2)) (__anonstruct_Edge_3_edges_18_alloc_table_at_L :
  (alloc_table __anonstruct_Edge_3)) (__anonstruct_Graph_4_esize_g_2_5_at_L :
  (memory __anonstruct_Graph_4 Int32.t))
  (__anonstruct_Graph_4_ecnt_g_2_5_at_L : (memory __anonstruct_Graph_4
  Int32.t)) (__anonstruct_Graph_4_edges_g_2_5_at_L : (memory
  __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)))
  (__anonstruct_Graph_4_vsize_g_2_5_at_L : (memory __anonstruct_Graph_4
  Int32.t)) (__anonstruct_Graph_4_vertices_g_2_5_at_L : (memory
  __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2)))
  (__anonstruct_Edge_3_existent_0_edges_18_at_L : (memory __anonstruct_Edge_3
  Int32.t)) (__anonstruct_Edge_3_to_edges_18_at_L : (memory
  __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_from_edges_18_at_L :
  (memory __anonstruct_Edge_3 Int32.t))
  (__anonstruct_Vertex_2_existent_vertices_17_at_L : (memory
  __anonstruct_Vertex_2 Int32.t))
  =
     ((Int32.(>) (select __anonstruct_Graph_4_vsize_g_2_5_at_L g_2)
      (#"mygraph_c.jc" 59 24 36# "expl:Integer cast" (Int32.of_int (0))))
     /\
     ((Int32.(>) (select __anonstruct_Graph_4_esize_g_2_5_at_L g_2)
      (#"mygraph_c.jc" 59 54 66# "expl:Integer cast" (Int32.of_int (0))))
     /\
     ((Int32.(>=) (select __anonstruct_Graph_4_esize_g_2_5_at_L g_2)
      (select __anonstruct_Graph_4_ecnt_g_2_5_at_L g_2))
     /\
     ((Int32.(>=) (select __anonstruct_Graph_4_ecnt_g_2_5_at_L g_2)
      (#"mygraph_c.jc" 61 23 35# "expl:Integer cast" (Int32.of_int (0))))
     /\
     ((if
       ((<=) (0)
       (Int.(-)
       (Int32.to_int (select __anonstruct_Graph_4_vsize_g_2_5_at_L g_2)) (1)))
       then
       (((<=)
        (offset_min __anonstruct_Vertex_2_vertices_17_alloc_table_at_L
        (select __anonstruct_Graph_4_vertices_g_2_5_at_L g_2)) (0))
       /\
       (((>=)
        (offset_max __anonstruct_Vertex_2_vertices_17_alloc_table_at_L
        (select __anonstruct_Graph_4_vertices_g_2_5_at_L g_2))
        (Int.(-)
        (Int32.to_int (select __anonstruct_Graph_4_vsize_g_2_5_at_L g_2))
        (1)))
       /\
       (forall __framac_tmp2 : int.
        ((((<=) (0) __framac_tmp2) /\
         ((<=) __framac_tmp2
         (Int.(-)
         (Int32.to_int (select __anonstruct_Graph_4_vsize_g_2_5_at_L g_2))
         (1)))) -> ((=) true true))))) else ((=) true true))
     /\
     ((if
       ((<=) (0)
       (Int.(-)
       (Int32.to_int (select __anonstruct_Graph_4_esize_g_2_5_at_L g_2)) (1)))
       then
       (((<=)
        (offset_min __anonstruct_Edge_3_edges_18_alloc_table_at_L
        (select __anonstruct_Graph_4_edges_g_2_5_at_L g_2)) (0))
       /\
       (((>=)
        (offset_max __anonstruct_Edge_3_edges_18_alloc_table_at_L
        (select __anonstruct_Graph_4_edges_g_2_5_at_L g_2))
        (Int.(-)
        (Int32.to_int (select __anonstruct_Graph_4_esize_g_2_5_at_L g_2))
        (1)))
       /\
       (forall __framac_tmp1 : int.
        ((((<=) (0) __framac_tmp1) /\
         ((<=) __framac_tmp1
         (Int.(-)
         (Int32.to_int (select __anonstruct_Graph_4_esize_g_2_5_at_L g_2))
         (1)))) -> ((=) true true))))) else ((=) true true))
     /\
     ((edges_valid g_2
      (Int32.to_int (select __anonstruct_Graph_4_ecnt_g_2_5_at_L g_2))
      __anonstruct_Graph_4_edges_g_2_5_at_L
      __anonstruct_Graph_4_vsize_g_2_5_at_L
      __anonstruct_Graph_4_vertices_g_2_5_at_L
      __anonstruct_Edge_3_existent_0_edges_18_at_L
      __anonstruct_Edge_3_to_edges_18_at_L
      __anonstruct_Edge_3_from_edges_18_at_L
      __anonstruct_Vertex_2_existent_vertices_17_at_L)
     /\
     (forall k_3 : int.
      ((((<=)
        (Int32.to_int (select __anonstruct_Graph_4_ecnt_g_2_5_at_L g_2)) k_3)
       /\
       ((<) k_3
       (Int32.to_int (select __anonstruct_Graph_4_esize_g_2_5_at_L g_2)))) ->
       ((=)
       (Int32.to_int
       (select __anonstruct_Edge_3_existent_0_edges_18_at_L
       (shift (select __anonstruct_Graph_4_edges_g_2_5_at_L g_2) k_3))) (0)))))))))))
  
  
end

theory Lemma_zeros #"mygraph_c.jc" 142 0 362# "expl:Lemma zeros"

  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_graph_valid 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  lemma Zeros #"/home/nik/Projects/ver/hw3/mygraph.c" 103 3 134#
  "expl:Lemma zeros"  :
  (forall __anonstruct_Vertex_2_vertices_86_alloc_table_at_L : (alloc_table
   __anonstruct_Vertex_2).
   (forall __anonstruct_Edge_3_edges_25_alloc_table_at_L : (alloc_table
    __anonstruct_Edge_3).
    (forall __anonstruct_Graph_4_esize_g_12_24_at_L : (memory
     __anonstruct_Graph_4 Int32.t).
     (forall __anonstruct_Graph_4_ecnt_g_12_24_at_L : (memory
      __anonstruct_Graph_4 Int32.t).
      (forall __anonstruct_Graph_4_edges_g_12_24_at_L : (memory
       __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)).
       (forall __anonstruct_Graph_4_vsize_g_12_24_at_L : (memory
        __anonstruct_Graph_4 Int32.t).
        (forall __anonstruct_Graph_4_vertices_g_12_24_at_L : (memory
         __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2)).
         (forall __anonstruct_Edge_3_existent_0_edges_25_at_L : (memory
          __anonstruct_Edge_3 Int32.t).
          (forall __anonstruct_Edge_3_to_edges_25_at_L : (memory
           __anonstruct_Edge_3 Int32.t).
           (forall __anonstruct_Edge_3_from_edges_25_at_L : (memory
            __anonstruct_Edge_3 Int32.t).
            (forall __anonstruct_Vertex_2_existent_vertices_86_at_L : (memory
             __anonstruct_Vertex_2 Int32.t).
             (#"/home/nik/Projects/ver/hw3/mygraph.c" 104 4 113#
             (forall g_12 : (pointer __anonstruct_Graph_4).
              (forall f_6 : int.
               (forall t_6 : int.
                (forall m_6 : int.
                 (((graph_valid g_12
                   __anonstruct_Vertex_2_vertices_86_alloc_table_at_L
                   __anonstruct_Edge_3_edges_25_alloc_table_at_L
                   __anonstruct_Graph_4_esize_g_12_24_at_L
                   __anonstruct_Graph_4_ecnt_g_12_24_at_L
                   __anonstruct_Graph_4_edges_g_12_24_at_L
                   __anonstruct_Graph_4_vsize_g_12_24_at_L
                   __anonstruct_Graph_4_vertices_g_12_24_at_L
                   __anonstruct_Edge_3_existent_0_edges_25_at_L
                   __anonstruct_Edge_3_to_edges_25_at_L
                   __anonstruct_Edge_3_from_edges_25_at_L
                   __anonstruct_Vertex_2_existent_vertices_86_at_L)
                  /\
                  (((>)
                   (Int32.to_int
                   (select __anonstruct_Graph_4_esize_g_12_24_at_L g_12))
                   m_6)
                  /\
                  ((>=) m_6
                  (Int32.to_int
                  (select __anonstruct_Graph_4_ecnt_g_12_24_at_L g_12))))) ->
                  ((=)
                  (Int32.to_int
                  (select __anonstruct_Edge_3_existent_0_edges_25_at_L
                  (shift
                  (select __anonstruct_Graph_4_edges_g_12_24_at_L g_12) m_6)))
                  (0)))))))))))))))))))
  
end

theory Lemma_count_prop #"mygraph_c.jc" 151 0 444# "expl:Lemma count_prop"

  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Axiomatic_EdgesCount 
  
  use why3.Bool.Bool 
  
  lemma Count_prop #"/home/nik/Projects/ver/hw3/mygraph.c" 106 3 155#
  "expl:Lemma count_prop"  :
  (forall __anonstruct_Graph_4_edges_g_13_26_at_L : (memory
   __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)).
   (forall __anonstruct_Edge_3_existent_0_edges_71_at_L : (memory
    __anonstruct_Edge_3 Int32.t).
    (forall __anonstruct_Edge_3_to_edges_71_at_L : (memory
     __anonstruct_Edge_3 Int32.t).
     (forall __anonstruct_Edge_3_from_edges_71_at_L : (memory
      __anonstruct_Edge_3 Int32.t).
      (#"/home/nik/Projects/ver/hw3/mygraph.c" 107 4 129#
      (forall g_13 : (pointer __anonstruct_Graph_4).
       (forall f_7 : int.
        (forall t_7 : int.
         (forall m_7 : int.
          (forall n_7 : int.
           (((<=) m_7 n_7) ->
            ((=)
            (count g_13 f_7 t_7 m_7 (Int.(+) n_7 (1))
            __anonstruct_Graph_4_edges_g_13_26_at_L
            __anonstruct_Edge_3_existent_0_edges_71_at_L
            __anonstruct_Edge_3_to_edges_71_at_L
            __anonstruct_Edge_3_from_edges_71_at_L)
            (Int.(+)
            (count g_13 f_7 t_7 m_7 n_7
            __anonstruct_Graph_4_edges_g_13_26_at_L
            __anonstruct_Edge_3_existent_0_edges_71_at_L
            __anonstruct_Edge_3_to_edges_71_at_L
            __anonstruct_Edge_3_from_edges_71_at_L)
            (count g_13 f_7 t_7 n_7 (Int.(+) n_7 (1))
            __anonstruct_Graph_4_edges_g_13_26_at_L
            __anonstruct_Edge_3_existent_0_edges_71_at_L
            __anonstruct_Edge_3_to_edges_71_at_L
            __anonstruct_Edge_3_from_edges_71_at_L))))))))))))))
  
end

theory Lemma_count_prop2 #"mygraph_c.jc" 162 0 633# "expl:Lemma count_prop2"

  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Axiomatic_EdgesCount 
  
  use why3.Bool.Bool 
  
  lemma Count_prop2 #"/home/nik/Projects/ver/hw3/mygraph.c" 109 3 202#
  "expl:Lemma count_prop2"  :
  (forall __anonstruct_Graph_4_edges_g_14_27_at_L : (memory
   __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)).
   (forall __anonstruct_Edge_3_existent_0_edges_77_at_L : (memory
    __anonstruct_Edge_3 Int32.t).
    (forall __anonstruct_Edge_3_to_edges_77_at_L : (memory
     __anonstruct_Edge_3 Int32.t).
     (forall __anonstruct_Edge_3_from_edges_77_at_L : (memory
      __anonstruct_Edge_3 Int32.t).
      (#"/home/nik/Projects/ver/hw3/mygraph.c" 110 4 175#
      (forall g_14 : (pointer __anonstruct_Graph_4).
       (forall f_8 : int.
        (forall t_8 : int.
         (forall m_8 : int.
          (forall n_8 : int.
           (forall z : int.
            (forall k_7 : int.
             ((((=) z (Int.(+) k_7 (1))) /\ (((<=) m_8 k_7) /\ ((<=) z n_8)))
              ->
              ((=)
              (count g_14 f_8 t_8 m_8 n_8
              __anonstruct_Graph_4_edges_g_14_27_at_L
              __anonstruct_Edge_3_existent_0_edges_77_at_L
              __anonstruct_Edge_3_to_edges_77_at_L
              __anonstruct_Edge_3_from_edges_77_at_L)
              (Int.(+)
              (Int.(+)
              (count g_14 f_8 t_8 m_8 k_7
              __anonstruct_Graph_4_edges_g_14_27_at_L
              __anonstruct_Edge_3_existent_0_edges_77_at_L
              __anonstruct_Edge_3_to_edges_77_at_L
              __anonstruct_Edge_3_from_edges_77_at_L)
              (count g_14 f_8 t_8 k_7 z
              __anonstruct_Graph_4_edges_g_14_27_at_L
              __anonstruct_Edge_3_existent_0_edges_77_at_L
              __anonstruct_Edge_3_to_edges_77_at_L
              __anonstruct_Edge_3_from_edges_77_at_L))
              (count g_14 f_8 t_8 z n_8
              __anonstruct_Graph_4_edges_g_14_27_at_L
              __anonstruct_Edge_3_existent_0_edges_77_at_L
              __anonstruct_Edge_3_to_edges_77_at_L
              __anonstruct_Edge_3_from_edges_77_at_L))))))))))))))))
  
end

theory Axiomatic_LF__Axiomatic__count_after

  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_graph_valid 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Axiomatic_EdgesCount 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  axiom LF__Lemma__count_after
  #"/home/nik/Projects/ver/hw3/mygraph.c" 119 9 49#
  "expl:Axiom LF__Lemma__count_after" "W:non_conservative_extension:N" :
  (forall __anonstruct_Vertex_2_vertices_95_alloc_table : (alloc_table
   __anonstruct_Vertex_2).
   (forall __anonstruct_Graph_4_g_15_28_alloc_table : (alloc_table
    __anonstruct_Graph_4).
    (forall __anonstruct_Edge_3_edges_94_alloc_table : (alloc_table
     __anonstruct_Edge_3).
     (forall __anonstruct_Graph_4_esize_g_15_28 : (memory
      __anonstruct_Graph_4 Int32.t).
      (forall __anonstruct_Graph_4_ecnt_g_15_28 : (memory
       __anonstruct_Graph_4 Int32.t).
       (forall __anonstruct_Graph_4_edges_g_15_28 : (memory
        __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)).
        (forall __anonstruct_Graph_4_vsize_g_15_28 : (memory
         __anonstruct_Graph_4 Int32.t).
         (forall __anonstruct_Graph_4_vertices_g_15_28 : (memory
          __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2)).
          (forall __anonstruct_Edge_3_existent_0_edges_94 : (memory
           __anonstruct_Edge_3 Int32.t).
           (forall __anonstruct_Edge_3_to_edges_94 : (memory
            __anonstruct_Edge_3 Int32.t).
            (forall __anonstruct_Edge_3_from_edges_94 : (memory
             __anonstruct_Edge_3 Int32.t).
             (forall __anonstruct_Vertex_2_existent_vertices_95 : (memory
              __anonstruct_Vertex_2 Int32.t).
              (#"/home/nik/Projects/ver/hw3/mygraph.c" 119 9 49#
              (forall g_15 : (pointer __anonstruct_Graph_4).
               (forall f_9 : Int32.t.
                (forall t_9 : Int32.t.
                 (forall m_9 : Int32.t.
                  (((((<=)
                     (offset_min __anonstruct_Graph_4_g_15_28_alloc_table
                     g_15) (0))
                    /\
                    (((>=)
                     (offset_max __anonstruct_Graph_4_g_15_28_alloc_table
                     g_15) (0))
                    /\ ((=) true true)))
                   /\
                   (graph_valid g_15
                   __anonstruct_Vertex_2_vertices_95_alloc_table
                   __anonstruct_Edge_3_edges_94_alloc_table
                   __anonstruct_Graph_4_esize_g_15_28
                   __anonstruct_Graph_4_ecnt_g_15_28
                   __anonstruct_Graph_4_edges_g_15_28
                   __anonstruct_Graph_4_vsize_g_15_28
                   __anonstruct_Graph_4_vertices_g_15_28
                   __anonstruct_Edge_3_existent_0_edges_94
                   __anonstruct_Edge_3_to_edges_94
                   __anonstruct_Edge_3_from_edges_94
                   __anonstruct_Vertex_2_existent_vertices_95)) ->
                   ((=)
                   (count g_15 (Int32.to_int f_9) (Int32.to_int t_9)
                   (Int32.to_int
                   (select __anonstruct_Graph_4_ecnt_g_15_28 g_15))
                   (Int32.to_int
                   (select __anonstruct_Graph_4_esize_g_15_28 g_15))
                   __anonstruct_Graph_4_edges_g_15_28
                   __anonstruct_Edge_3_existent_0_edges_94
                   __anonstruct_Edge_3_to_edges_94
                   __anonstruct_Edge_3_from_edges_94) (0))))))))))))))))))))
  
  predicate _LF__Predicate__count_after  = ((=) true true)
  
  
end

module Exceptions

  use why3.Bool.Bool 
  
  exception Goto_while_0_break_exc unit
  
  exception Goto_while_0_break_0_exc unit
  
  exception Goto_while_0_break_0_0_exc unit
  
  exception Goto_while_0_break_1_exc unit
  
  exception Goto_while_0_break_1_0_exc unit
  
  exception Goto_while_1_break_exc unit
  
  exception Goto_while_1_break_0_exc unit
  
  exception Loop_continue_exc unit
  
  exception Loop_exit_exc unit
  
  exception Return_label_exc unit
  
end

module Function_count_after_safety
#"/home/nik/Projects/ver/hw3/mygraph.c" 119 9 49# "expl:count_after, safety"

  use Safe_int32 
  
  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Return 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_graph_valid 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Exceptions 
  
  use import Axiomatic_EdgesCount 
  
  use import core.Alloc_table 
  
  use import core.Acc_safe 
  
  use why3.Bool.Bool 
  
  use import Lemma_zeros 
  
  use import Lemma_count_prop2 
  
  use import Lemma_count_prop 
  
  let count_after #"/home/nik/Projects/ver/hw3/mygraph.c" 119 9 49#
  "expl:Function count_after, safety" =
  fun
   (g_1_0 : (pointer __anonstruct_Graph_4)) (f_1_0 : Int32.t) (t_1_0 :
   Int32.t) (m_1 : Int32.t) (__anonstruct_Edge_3_edges_99_alloc_table :
   (alloc_table __anonstruct_Edge_3))
   (__anonstruct_Graph_4_g_1_12_alloc_table : (alloc_table
   __anonstruct_Graph_4)) (__anonstruct_Vertex_2_vertices_100_alloc_table :
   (alloc_table __anonstruct_Vertex_2))
   (__anonstruct_Vertex_2_existent_vertices_100 : (memory
   __anonstruct_Vertex_2 Int32.t)) (__anonstruct_Edge_3_from_edges_99 :
   (memory __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_to_edges_99 :
   (memory __anonstruct_Edge_3 Int32.t))
   (__anonstruct_Edge_3_existent_0_edges_99 : (memory __anonstruct_Edge_3
   Int32.t)) (__anonstruct_Graph_4_vertices_g_1_12 : (memory
   __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2)))
   (__anonstruct_Graph_4_vsize_g_1_12 : (memory __anonstruct_Graph_4
   Int32.t)) (__anonstruct_Graph_4_edges_g_1_12 : (memory
   __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)))
   (__anonstruct_Graph_4_ecnt_g_1_12 : (memory __anonstruct_Graph_4 Int32.t))
   (__anonstruct_Graph_4_esize_g_1_12 : (memory __anonstruct_Graph_4
   Int32.t)) 
   requires {
   (#"mygraph_c.jc" 177 12 238#
   ((#"/home/nik/Projects/ver/hw3/mygraph.c" 115 17 26#
    (#"mygraph_c.jc" 177 12 238#
    ((#"mygraph_c.jc" 177 12 238#
     ((<=) (offset_min __anonstruct_Graph_4_g_1_12_alloc_table g_1_0) (0)))
    /\
    (#"mygraph_c.jc" 177 12 238#
    ((#"mygraph_c.jc" 177 12 238#
     ((>=) (offset_max __anonstruct_Graph_4_g_1_12_alloc_table g_1_0) (0)))
    /\ (#"mygraph_c.jc" 177 12 238# ((=) true true)))))))
   /\
   (#"/home/nik/Projects/ver/hw3/mygraph.c" 116 17 31#
   (graph_valid g_1_0 __anonstruct_Vertex_2_vertices_100_alloc_table
   __anonstruct_Edge_3_edges_99_alloc_table __anonstruct_Graph_4_esize_g_1_12
   __anonstruct_Graph_4_ecnt_g_1_12 __anonstruct_Graph_4_edges_g_1_12
   __anonstruct_Graph_4_vsize_g_1_12 __anonstruct_Graph_4_vertices_g_1_12
   __anonstruct_Edge_3_existent_0_edges_99 __anonstruct_Edge_3_to_edges_99
   __anonstruct_Edge_3_from_edges_99
   __anonstruct_Vertex_2_existent_vertices_100)))) }
   ensures { ("expl:Postcondition" true) }  ->
   'Init:
   try
    begin
    (let i = ref (Safe_int32.any_  () ) in
    begin
    try
     begin
     (i :=
      (let _jessie_26 =
      (#"/home/nik/Projects/ver/hw3/mygraph.c" 124 21 28#
      "expl:Pointer dereference"
      (acc  __anonstruct_Graph_4_g_1_12_alloc_table
       __anonstruct_Graph_4_ecnt_g_1_12 g_1_0 )) in
      begin
      (assert {
      (#"/home/nik/Projects/ver/hw3/mygraph.c" 124 17 18#
      "expl:Pointer index bounds" true) }); _jessie_26 end));
      'LoopEntry:
      begin
      'LoopEntry:
      'Loop_2:
      loop
      invariant { (#"mygraph_c.jc" 195 9 834# true) }
        variant { (#"/home/nik/Projects/ver/hw3/mygraph.c" 122 24 36#
          (Int.(-)
          (Int32.to_int (select __anonstruct_Graph_4_esize_g_1_12 g_1_0))
          (Int32.to_int !i))) }
       begin
       any unit
       requires { true } reads { f_1_0, g_1_0, t_1_0 }
       ensures {
         ((#"/home/nik/Projects/ver/hw3/mygraph.c" 121 26 57#
          ((=)
          (count g_1_0 (Int32.to_int f_1_0) (Int32.to_int t_1_0)
          (Int32.to_int (select __anonstruct_Graph_4_ecnt_g_1_12 g_1_0))
          (Int32.to_int !i) __anonstruct_Graph_4_edges_g_1_12
          __anonstruct_Edge_3_existent_0_edges_99
          __anonstruct_Edge_3_to_edges_99 __anonstruct_Edge_3_from_edges_99)
          (0)))
         /\
         (#"/home/nik/Projects/ver/hw3/mygraph.c" 120 26 44#
         (#"/home/nik/Projects/ver/hw3/mygraph.c" 120 26 44#
         ((#"/home/nik/Projects/ver/hw3/mygraph.c" 120 26 32#
          (Int32.(<=) (#"mygraph_c.jc" 197 41 53# "expl:Integer cast"
          (Int32.of_int (0))) !i))
         /\
         (#"/home/nik/Projects/ver/hw3/mygraph.c" 120 31 44#
         (Int32.(<=) !i (select __anonstruct_Graph_4_esize_g_1_12 g_1_0)))))))
         } ;
        try
         begin
         'LoopCurrent:
         begin
         'LoopCurrent:
         (if
         (#"/home/nik/Projects/ver/hw3/mygraph.c" 124 30 42#
         (Safe_int32.(<)  !i
          (#"/home/nik/Projects/ver/hw3/mygraph.c" 124 34 42#
          "expl:Pointer dereference"
          (acc  __anonstruct_Graph_4_g_1_12_alloc_table
           __anonstruct_Graph_4_esize_g_1_12 g_1_0 )) )) then ()
         else (raise (Goto_while_0_break_exc ())));
          (i :=
           (let _jessie_25 =
           (Safe_int32.(+)  !i
            (#"mygraph_c.jc" 210 53 65# "expl:Integer cast"
            (Safe_int32.of_int (1))) ) in
           begin
           (assert {
           (#"/home/nik/Projects/ver/hw3/mygraph.c" 124 44 47#
           "expl:Pointer index bounds" true) }); _jessie_25 end)) end;
          (raise (Loop_continue_exc ())) end with Loop_continue_exc _jessie_3
         -> () end end end; (raise (Goto_while_0_break_exc ())) end end with
     Goto_while_0_break_exc _jessie_1 -> 'While_0_break: 'While_0_break: ()
     end; (raise Return) end); (raise Return) end with Return -> () end
  
end

module Function_count_after_behaviors
#"/home/nik/Projects/ver/hw3/mygraph.c" 119 9 49#
"expl:count_after, behaviors"

  use Unsafe_int32 
  
  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Return 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_graph_valid 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Exceptions 
  
  use import Axiomatic_EdgesCount 
  
  use import core.Alloc_table 
  
  use import core.Acc_unsafe 
  
  use why3.Bool.Bool 
  
  use import Lemma_zeros 
  
  use import Lemma_count_prop2 
  
  use import Lemma_count_prop 
  
  let count_after_ensures_default
  #"/home/nik/Projects/ver/hw3/mygraph.c" 119 9 49#
  "expl:Function count_after, default behavior" =
  fun
   (g_1_0 : (pointer __anonstruct_Graph_4)) (f_1_0 : Int32.t) (t_1_0 :
   Int32.t) (m_1 : Int32.t) (__anonstruct_Edge_3_edges_99_alloc_table :
   (alloc_table __anonstruct_Edge_3))
   (__anonstruct_Graph_4_g_1_12_alloc_table : (alloc_table
   __anonstruct_Graph_4)) (__anonstruct_Vertex_2_vertices_100_alloc_table :
   (alloc_table __anonstruct_Vertex_2))
   (__anonstruct_Vertex_2_existent_vertices_100 : (memory
   __anonstruct_Vertex_2 Int32.t)) (__anonstruct_Edge_3_from_edges_99 :
   (memory __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_to_edges_99 :
   (memory __anonstruct_Edge_3 Int32.t))
   (__anonstruct_Edge_3_existent_0_edges_99 : (memory __anonstruct_Edge_3
   Int32.t)) (__anonstruct_Graph_4_vertices_g_1_12 : (memory
   __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2)))
   (__anonstruct_Graph_4_vsize_g_1_12 : (memory __anonstruct_Graph_4
   Int32.t)) (__anonstruct_Graph_4_edges_g_1_12 : (memory
   __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)))
   (__anonstruct_Graph_4_ecnt_g_1_12 : (memory __anonstruct_Graph_4 Int32.t))
   (__anonstruct_Graph_4_esize_g_1_12 : (memory __anonstruct_Graph_4
   Int32.t)) 
   requires {
   (#"mygraph_c.jc" 177 12 238#
   ((#"/home/nik/Projects/ver/hw3/mygraph.c" 115 17 26#
    (#"mygraph_c.jc" 177 12 238#
    ((#"mygraph_c.jc" 177 12 238#
     ((<=) (offset_min __anonstruct_Graph_4_g_1_12_alloc_table g_1_0) (0)))
    /\
    (#"mygraph_c.jc" 177 12 238#
    ((#"mygraph_c.jc" 177 12 238#
     ((>=) (offset_max __anonstruct_Graph_4_g_1_12_alloc_table g_1_0) (0)))
    /\ (#"mygraph_c.jc" 177 12 238# ((=) true true)))))))
   /\
   (#"/home/nik/Projects/ver/hw3/mygraph.c" 116 17 31#
   (graph_valid g_1_0 __anonstruct_Vertex_2_vertices_100_alloc_table
   __anonstruct_Edge_3_edges_99_alloc_table __anonstruct_Graph_4_esize_g_1_12
   __anonstruct_Graph_4_ecnt_g_1_12 __anonstruct_Graph_4_edges_g_1_12
   __anonstruct_Graph_4_vsize_g_1_12 __anonstruct_Graph_4_vertices_g_1_12
   __anonstruct_Edge_3_existent_0_edges_99 __anonstruct_Edge_3_to_edges_99
   __anonstruct_Edge_3_from_edges_99
   __anonstruct_Vertex_2_existent_vertices_100)))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/nik/Projects/ver/hw3/mygraph.c" 117 16 53#
     "expl:Ensures clause"
     ((=)
     (count g_1_0 (Int32.to_int f_1_0) (Int32.to_int t_1_0)
     (Int32.to_int (select __anonstruct_Graph_4_ecnt_g_1_12 g_1_0))
     (Int32.to_int (select __anonstruct_Graph_4_esize_g_1_12 g_1_0))
     __anonstruct_Graph_4_edges_g_1_12
     __anonstruct_Edge_3_existent_0_edges_99 __anonstruct_Edge_3_to_edges_99
     __anonstruct_Edge_3_from_edges_99) (0)))) } diverges  ->
   'Init:
   try
    begin
    (let i = ref (Unsafe_int32.any_  () ) in
    begin
    try
     begin
     (i := (acc  __anonstruct_Graph_4_ecnt_g_1_12 g_1_0 ));
      'LoopEntry:
      begin
      'LoopEntry:
      'Loop_1:
      loop
      invariant
        { ((#"/home/nik/Projects/ver/hw3/mygraph.c" 120 26 44#
           (#"/home/nik/Projects/ver/hw3/mygraph.c" 120 26 44#
           ((#"/home/nik/Projects/ver/hw3/mygraph.c" 120 26 32#
            (Int32.(<=) (#"mygraph_c.jc" 197 41 53# "expl:Integer cast"
            (Int32.of_int (0))) !i))
           /\
           (#"/home/nik/Projects/ver/hw3/mygraph.c" 120 31 44#
           (Int32.(<=) !i (select __anonstruct_Graph_4_esize_g_1_12 g_1_0))))))
          &&
          (#"/home/nik/Projects/ver/hw3/mygraph.c" 121 26 57#
          ((=)
          (count g_1_0 (Int32.to_int f_1_0) (Int32.to_int t_1_0)
          (Int32.to_int (select __anonstruct_Graph_4_ecnt_g_1_12 g_1_0))
          (Int32.to_int !i) __anonstruct_Graph_4_edges_g_1_12
          __anonstruct_Edge_3_existent_0_edges_99
          __anonstruct_Edge_3_to_edges_99 __anonstruct_Edge_3_from_edges_99)
          (0)))) } 
       begin
       any unit requires { true } ensures { true } ;
        try
         begin
         'LoopCurrent:
         begin
         'LoopCurrent:
         (if
         (#"/home/nik/Projects/ver/hw3/mygraph.c" 124 30 42#
         (Unsafe_int32.(<)  !i
          (acc  __anonstruct_Graph_4_esize_g_1_12 g_1_0 ) )) then ()
         else (raise (Goto_while_0_break_exc ())));
          (i :=
           (Unsafe_int32.(+)  !i
            (#"mygraph_c.jc" 210 53 65# "expl:Integer cast"
            (Unsafe_int32.of_int (1))) )) end; (raise (Loop_continue_exc ()))
         end with Loop_continue_exc _jessie_3 -> () end end end;
       (raise (Goto_while_0_break_exc ())) end end with
     Goto_while_0_break_exc _jessie_1 -> 'While_0_break: 'While_0_break: ()
     end; (raise Return) end); (raise Return) end with Return -> () end
  
end

theory Logic_all_count

  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use enum.Int32 
  
  use import Axiomatic_EdgesCount 
  
  use why3.Bool.Bool 
  
  function all_count (g_11 : (pointer __anonstruct_Graph_4)) (f_5 : int) (t_5
  : int) (__anonstruct_Graph_4_esize_g_11_11_at_L : (memory
  __anonstruct_Graph_4 Int32.t)) (__anonstruct_Graph_4_edges_g_11_11_at_L :
  (memory __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)))
  (__anonstruct_Edge_3_existent_0_edges_67_at_L : (memory __anonstruct_Edge_3
  Int32.t)) (__anonstruct_Edge_3_to_edges_67_at_L : (memory
  __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_from_edges_67_at_L :
  (memory __anonstruct_Edge_3 Int32.t)) : int
  =
     (count g_11 f_5 t_5 (0)
     (Int32.to_int (select __anonstruct_Graph_4_esize_g_11_11_at_L g_11))
     __anonstruct_Graph_4_edges_g_11_11_at_L
     __anonstruct_Edge_3_existent_0_edges_67_at_L
     __anonstruct_Edge_3_to_edges_67_at_L
     __anonstruct_Edge_3_from_edges_67_at_L)
  
  
end

module Function_count_0_safety
#"/home/nik/Projects/ver/hw3/mygraph.c" 139 0 29# "expl:count, safety"

  use import core.Tag_table_type 
  
  use Safe_int32 
  
  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Return 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_is_vertex 
  
  use import Logic_graph_valid 
  
  use import Logic_all_count 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Exceptions 
  
  use import Axiomatic_LF__Axiomatic__count_after 
  
  use import Axiomatic_EdgesCount 
  
  use import core.Alloc_table 
  
  use import core.Acc_safe 
  
  use import core.Acc_offset_safe 
  
  use why3.Bool.Bool 
  
  use import Lemma_zeros 
  
  use import Lemma_count_prop2 
  
  use import Lemma_count_prop 
  
  let count_0 #"/home/nik/Projects/ver/hw3/mygraph.c" 139 0 29#
  "expl:Function count, safety" =
  fun
   (g_0_0 : (pointer __anonstruct_Graph_4)) (f_0 : Int32.t) (t_0 : Int32.t)
   (__anonstruct_Edge_3_edges_30_alloc_table : (alloc_table
   __anonstruct_Edge_3)) (__anonstruct_Graph_4_g_0_13_alloc_table :
   (alloc_table __anonstruct_Graph_4))
   (__anonstruct_Vertex_2_vertices_29_alloc_table : (alloc_table
   __anonstruct_Vertex_2)) (__anonstruct_Edge_3_edges_30_tag_table :
   (tag_table __anonstruct_Edge_3))
   (__anonstruct_Vertex_2_existent_vertices_29 : (memory
   __anonstruct_Vertex_2 Int32.t)) (__anonstruct_Edge_3_from_edges_30 :
   (memory __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_to_edges_30 :
   (memory __anonstruct_Edge_3 Int32.t))
   (__anonstruct_Edge_3_existent_0_edges_30 : (memory __anonstruct_Edge_3
   Int32.t)) (__anonstruct_Graph_4_vertices_g_0_13 : (memory
   __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2)))
   (__anonstruct_Graph_4_vsize_g_0_13 : (memory __anonstruct_Graph_4
   Int32.t)) (__anonstruct_Graph_4_edges_g_0_13 : (memory
   __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)))
   (__anonstruct_Graph_4_ecnt_g_0_13 : (memory __anonstruct_Graph_4 Int32.t))
   (__anonstruct_Graph_4_esize_g_0_13 : (memory __anonstruct_Graph_4
   Int32.t)) 
   requires {
   (#"mygraph_c.jc" 242 12 802#
   ((#"mygraph_c.jc" 242 12 802# _LF__Predicate__count_after) /\
   (#"mygraph_c.jc" 242 12 802#
   ((#"/home/nik/Projects/ver/hw3/mygraph.c" 131 13 22#
    (#"mygraph_c.jc" 242 12 802#
    ((#"mygraph_c.jc" 242 12 802#
     ((<=) (offset_min __anonstruct_Graph_4_g_0_13_alloc_table g_0_0) (0)))
    /\
    (#"mygraph_c.jc" 242 12 802#
    ((#"mygraph_c.jc" 242 12 802#
     ((>=) (offset_max __anonstruct_Graph_4_g_0_13_alloc_table g_0_0) (0)))
    /\ (#"mygraph_c.jc" 242 12 802# ((=) true true)))))))
   /\
   (#"mygraph_c.jc" 242 12 802#
   ((#"/home/nik/Projects/ver/hw3/mygraph.c" 131 26 40#
    (graph_valid g_0_0 __anonstruct_Vertex_2_vertices_29_alloc_table
    __anonstruct_Edge_3_edges_30_alloc_table
    __anonstruct_Graph_4_esize_g_0_13 __anonstruct_Graph_4_ecnt_g_0_13
    __anonstruct_Graph_4_edges_g_0_13 __anonstruct_Graph_4_vsize_g_0_13
    __anonstruct_Graph_4_vertices_g_0_13
    __anonstruct_Edge_3_existent_0_edges_30 __anonstruct_Edge_3_to_edges_30
    __anonstruct_Edge_3_from_edges_30
    __anonstruct_Vertex_2_existent_vertices_29))
   /\
   (#"mygraph_c.jc" 242 12 802#
   ((#"/home/nik/Projects/ver/hw3/mygraph.c" 132 13 28#
    (is_vertex g_0_0 (Int32.to_int f_0) __anonstruct_Graph_4_vsize_g_0_13))
   /\
   (#"mygraph_c.jc" 242 12 802#
   ((#"/home/nik/Projects/ver/hw3/mygraph.c" 133 13 28#
    (is_vertex g_0_0 (Int32.to_int t_0) __anonstruct_Graph_4_vsize_g_0_13))
   /\
   (#"mygraph_c.jc" 242 12 802#
   ((#"/home/nik/Projects/ver/hw3/mygraph.c" 134 13 36#
    (not
    ((=)
    (Int32.to_int
    (select __anonstruct_Vertex_2_existent_vertices_29
    (shift (select __anonstruct_Graph_4_vertices_g_0_13 g_0_0)
    (Int32.to_int f_0)))) (0))))
   /\
   (#"/home/nik/Projects/ver/hw3/mygraph.c" 135 13 36#
   (not
   ((=)
   (Int32.to_int
   (select __anonstruct_Vertex_2_existent_vertices_29
   (shift (select __anonstruct_Graph_4_vertices_g_0_13 g_0_0)
   (Int32.to_int t_0)))) (0)))))))))))))))) }
   ensures { ("expl:Postcondition" true) }  ->
   'Init:
   (let return = ref (Safe_int32.any_  () ) in
   try
    begin
    (let c = ref (Safe_int32.any_  () ) in
    (let i_0 = ref (Safe_int32.any_  () ) in
    begin
    (c :=
     (let _jessie_32 =
     (#"mygraph_c.jc" 264 20 32# "expl:Integer cast" (Safe_int32.of_int (0)))
     in
     begin
     (assert {
     (#"/home/nik/Projects/ver/hw3/mygraph.c" 141 8 9#
     "expl:Pointer index bounds" true) }); _jessie_32 end));
     try
      begin
      (i_0 :=
       (let _jessie_35 =
       (#"mygraph_c.jc" 266 25 37# "expl:Integer cast"
       (Safe_int32.of_int (0))) in
       begin
       (assert {
       (#"/home/nik/Projects/ver/hw3/mygraph.c" 147 13 14#
       "expl:Pointer index bounds" true) }); _jessie_35 end));
       'LoopEntry:
       begin
       'LoopEntry:
       'Loop_4:
       loop
       invariant { (#"mygraph_c.jc" 268 9 2301# true) }
         variant { (#"/home/nik/Projects/ver/hw3/mygraph.c" 145 21 32#
           (Int.(-)
           (Int32.to_int (select __anonstruct_Graph_4_ecnt_g_0_13 g_0_0))
           (Int32.to_int !i_0))) }
        begin
        any unit
        requires { true } reads { f_0, g_0_0, t_0 }
        ensures {
          ((#"/home/nik/Projects/ver/hw3/mygraph.c" 144 23 34#
           (#"/home/nik/Projects/ver/hw3/mygraph.c" 144 23 34#
           ((#"/home/nik/Projects/ver/hw3/mygraph.c" 144 23 29#
            (Int32.(<=) (#"mygraph_c.jc" 278 41 53# "expl:Integer cast"
            (Int32.of_int (0))) !c))
           /\
           (#"/home/nik/Projects/ver/hw3/mygraph.c" 144 28 34#
           (Int32.(<=) !c !i_0)))))
          /\
          ((#"/home/nik/Projects/ver/hw3/mygraph.c" 143 23 48#
           ((=) (Int32.to_int !c)
           (count g_0_0 (Int32.to_int f_0) (Int32.to_int t_0) (0)
           (Int32.to_int !i_0) __anonstruct_Graph_4_edges_g_0_13
           __anonstruct_Edge_3_existent_0_edges_30
           __anonstruct_Edge_3_to_edges_30 __anonstruct_Edge_3_from_edges_30)))
          /\
          (#"/home/nik/Projects/ver/hw3/mygraph.c" 142 23 40#
          (#"/home/nik/Projects/ver/hw3/mygraph.c" 142 23 40#
          ((#"/home/nik/Projects/ver/hw3/mygraph.c" 142 23 29#
           (Int32.(<=) (#"mygraph_c.jc" 270 41 53# "expl:Integer cast"
           (Int32.of_int (0))) !i_0))
          /\
          (#"/home/nik/Projects/ver/hw3/mygraph.c" 142 28 40#
          (Int32.(<=) !i_0 (select __anonstruct_Graph_4_ecnt_g_0_13 g_0_0))))))))
          } ;
         try
          begin
          'LoopCurrent:
          begin
          'LoopCurrent:
          (if
          (#"/home/nik/Projects/ver/hw3/mygraph.c" 147 20 31#
          (Safe_int32.(<)  !i_0
           (#"/home/nik/Projects/ver/hw3/mygraph.c" 147 24 31#
           "expl:Pointer dereference"
           (acc  __anonstruct_Graph_4_g_0_13_alloc_table
            __anonstruct_Graph_4_ecnt_g_0_13 g_0_0 )) )) then ()
          else (raise (Goto_while_0_break_0_exc ())));
           (if
           (#"/home/nik/Projects/ver/hw3/mygraph.c" 148 12 32#
           (Safe_int32.(<>) 
            (#"/home/nik/Projects/ver/hw3/mygraph.c" 148 12 32#
            "expl:Pointer dereference"
            (acc_offset_typesafe  __anonstruct_Edge_3_edges_30_alloc_table
             __anonstruct_Edge_3_existent_0_edges_30
             (#"/home/nik/Projects/ver/hw3/mygraph.c" 148 12 20#
             "expl:Pointer dereference"
             (acc  __anonstruct_Graph_4_g_0_13_alloc_table
              __anonstruct_Graph_4_edges_g_0_13 g_0_0 ))
             (Safe_int32.to_int  !i_0 ) ))
            (#"mygraph_c.jc" 288 33 45# "expl:Integer cast"
            (Safe_int32.of_int (0))) ))
           then
            (if
            (#"/home/nik/Projects/ver/hw3/mygraph.c" 148 36 57#
            (Safe_int32.(=) 
             (#"/home/nik/Projects/ver/hw3/mygraph.c" 148 36 52#
             "expl:Pointer dereference"
             (acc_offset_typesafe  __anonstruct_Edge_3_edges_30_alloc_table
              __anonstruct_Edge_3_from_edges_30
              (#"/home/nik/Projects/ver/hw3/mygraph.c" 148 36 44#
              "expl:Pointer dereference"
              (acc  __anonstruct_Graph_4_g_0_13_alloc_table
               __anonstruct_Graph_4_edges_g_0_13 g_0_0 ))
              (Safe_int32.to_int  !i_0 ) )) f_0 ))
            then
             (if
             (#"/home/nik/Projects/ver/hw3/mygraph.c" 148 61 80#
             (Safe_int32.(=) 
              (#"/home/nik/Projects/ver/hw3/mygraph.c" 148 61 75#
              "expl:Pointer dereference"
              (acc_offset_typesafe  __anonstruct_Edge_3_edges_30_alloc_table
               __anonstruct_Edge_3_to_edges_30
               (#"/home/nik/Projects/ver/hw3/mygraph.c" 148 61 69#
               "expl:Pointer dereference"
               (acc  __anonstruct_Graph_4_g_0_13_alloc_table
                __anonstruct_Graph_4_edges_g_0_13 g_0_0 ))
               (Safe_int32.to_int  !i_0 ) )) t_0 ))
             then
              (c :=
               (let _jessie_33 =
               (Safe_int32.(+)  !c
                (#"mygraph_c.jc" 301 68 80# "expl:Integer cast"
                (Safe_int32.of_int (1))) ) in
               begin
               (assert {
               (#"/home/nik/Projects/ver/hw3/mygraph.c" 149 12 16#
               "expl:Pointer index bounds" true) }); _jessie_33 end))
             else ()) else ()) else ());
           (i_0 :=
            (let _jessie_34 =
            (Safe_int32.(+)  !i_0
             (#"mygraph_c.jc" 303 57 69# "expl:Integer cast"
             (Safe_int32.of_int (1))) ) in
            begin
            (assert {
            (#"/home/nik/Projects/ver/hw3/mygraph.c" 147 33 36#
            "expl:Pointer index bounds" true) }); _jessie_34 end)) end;
           (raise (Loop_continue_exc ())) end with Loop_continue_exc
          _jessie_6 -> () end end end; (raise (Goto_while_0_break_0_exc ()))
       end end with Goto_while_0_break_0_exc _jessie_4 ->
      'While_0_break_0: 'While_0_break_0: () end;
     begin
     any unit
     requires { true } reads { f_0, g_0_0, t_0 }
     ensures {
       (#"/home/nik/Projects/ver/hw3/mygraph.c" 152 12 90#
       ((=)
       (all_count g_0_0 (Int32.to_int f_0) (Int32.to_int t_0)
       __anonstruct_Graph_4_esize_g_0_13 __anonstruct_Graph_4_edges_g_0_13
       __anonstruct_Edge_3_existent_0_edges_30
       __anonstruct_Edge_3_to_edges_30 __anonstruct_Edge_3_from_edges_30)
       (Int.(+)
       (count g_0_0 (Int32.to_int f_0) (Int32.to_int t_0) (0)
       (Int32.to_int (select __anonstruct_Graph_4_ecnt_g_0_13 g_0_0))
       __anonstruct_Graph_4_edges_g_0_13
       __anonstruct_Edge_3_existent_0_edges_30
       __anonstruct_Edge_3_to_edges_30 __anonstruct_Edge_3_from_edges_30)
       (count g_0_0 (Int32.to_int f_0) (Int32.to_int t_0)
       (Int32.to_int (select __anonstruct_Graph_4_ecnt_g_0_13 g_0_0))
       (Int32.to_int (select __anonstruct_Graph_4_esize_g_0_13 g_0_0))
       __anonstruct_Graph_4_edges_g_0_13
       __anonstruct_Edge_3_existent_0_edges_30
       __anonstruct_Edge_3_to_edges_30 __anonstruct_Edge_3_from_edges_30))))
       } ; () end;
     begin
     any unit
     requires { true } reads { f_0, g_0_0, t_0 }
     ensures {
       (#"/home/nik/Projects/ver/hw3/mygraph.c" 153 12 47#
       ((=)
       (count g_0_0 (Int32.to_int f_0) (Int32.to_int t_0)
       (Int32.to_int (select __anonstruct_Graph_4_ecnt_g_0_13 g_0_0))
       (Int32.to_int (select __anonstruct_Graph_4_esize_g_0_13 g_0_0))
       __anonstruct_Graph_4_edges_g_0_13
       __anonstruct_Edge_3_existent_0_edges_30
       __anonstruct_Edge_3_to_edges_30 __anonstruct_Edge_3_from_edges_30)
       (0))) } ; () end;
     begin
     (return :=
      (let _jessie_36 = !c in
      begin
      (assert { (#"mygraph_c.jc" 336 7 15# "expl:Pointer index bounds" true)
      }); _jessie_36 end)); (raise Return) end end)); absurd  end with Return
    -> !return end)
  
end

module Function_count_0_behaviors
#"/home/nik/Projects/ver/hw3/mygraph.c" 139 0 29# "expl:count, behaviors"

  use Unsafe_int32 
  
  use import core.Tag_table_type 
  
  use import core.Shift_unsafe 
  
  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Return 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_is_vertex 
  
  use import Logic_graph_valid 
  
  use import Logic_all_count 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Exceptions 
  
  use import Axiomatic_LF__Axiomatic__count_after 
  
  use import Axiomatic_EdgesCount 
  
  use import core.Alloc_table 
  
  use import core.Acc_unsafe 
  
  use why3.Bool.Bool 
  
  use import Lemma_zeros 
  
  use import Lemma_count_prop2 
  
  use import Lemma_count_prop 
  
  let count_ensures_default #"/home/nik/Projects/ver/hw3/mygraph.c" 139 0 29#
  "expl:Function count, default behavior" =
  fun
   (g_0_0 : (pointer __anonstruct_Graph_4)) (f_0 : Int32.t) (t_0 : Int32.t)
   (__anonstruct_Edge_3_edges_30_alloc_table : (alloc_table
   __anonstruct_Edge_3)) (__anonstruct_Graph_4_g_0_13_alloc_table :
   (alloc_table __anonstruct_Graph_4))
   (__anonstruct_Vertex_2_vertices_29_alloc_table : (alloc_table
   __anonstruct_Vertex_2)) (__anonstruct_Edge_3_edges_30_tag_table :
   (tag_table __anonstruct_Edge_3))
   (__anonstruct_Vertex_2_existent_vertices_29 : (memory
   __anonstruct_Vertex_2 Int32.t)) (__anonstruct_Edge_3_from_edges_30 :
   (memory __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_to_edges_30 :
   (memory __anonstruct_Edge_3 Int32.t))
   (__anonstruct_Edge_3_existent_0_edges_30 : (memory __anonstruct_Edge_3
   Int32.t)) (__anonstruct_Graph_4_vertices_g_0_13 : (memory
   __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2)))
   (__anonstruct_Graph_4_vsize_g_0_13 : (memory __anonstruct_Graph_4
   Int32.t)) (__anonstruct_Graph_4_edges_g_0_13 : (memory
   __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)))
   (__anonstruct_Graph_4_ecnt_g_0_13 : (memory __anonstruct_Graph_4 Int32.t))
   (__anonstruct_Graph_4_esize_g_0_13 : (memory __anonstruct_Graph_4
   Int32.t)) 
   requires {
   (#"mygraph_c.jc" 242 12 802#
   ((#"mygraph_c.jc" 242 12 802# _LF__Predicate__count_after) /\
   (#"mygraph_c.jc" 242 12 802#
   ((#"/home/nik/Projects/ver/hw3/mygraph.c" 131 13 22#
    (#"mygraph_c.jc" 242 12 802#
    ((#"mygraph_c.jc" 242 12 802#
     ((<=) (offset_min __anonstruct_Graph_4_g_0_13_alloc_table g_0_0) (0)))
    /\
    (#"mygraph_c.jc" 242 12 802#
    ((#"mygraph_c.jc" 242 12 802#
     ((>=) (offset_max __anonstruct_Graph_4_g_0_13_alloc_table g_0_0) (0)))
    /\ (#"mygraph_c.jc" 242 12 802# ((=) true true)))))))
   /\
   (#"mygraph_c.jc" 242 12 802#
   ((#"/home/nik/Projects/ver/hw3/mygraph.c" 131 26 40#
    (graph_valid g_0_0 __anonstruct_Vertex_2_vertices_29_alloc_table
    __anonstruct_Edge_3_edges_30_alloc_table
    __anonstruct_Graph_4_esize_g_0_13 __anonstruct_Graph_4_ecnt_g_0_13
    __anonstruct_Graph_4_edges_g_0_13 __anonstruct_Graph_4_vsize_g_0_13
    __anonstruct_Graph_4_vertices_g_0_13
    __anonstruct_Edge_3_existent_0_edges_30 __anonstruct_Edge_3_to_edges_30
    __anonstruct_Edge_3_from_edges_30
    __anonstruct_Vertex_2_existent_vertices_29))
   /\
   (#"mygraph_c.jc" 242 12 802#
   ((#"/home/nik/Projects/ver/hw3/mygraph.c" 132 13 28#
    (is_vertex g_0_0 (Int32.to_int f_0) __anonstruct_Graph_4_vsize_g_0_13))
   /\
   (#"mygraph_c.jc" 242 12 802#
   ((#"/home/nik/Projects/ver/hw3/mygraph.c" 133 13 28#
    (is_vertex g_0_0 (Int32.to_int t_0) __anonstruct_Graph_4_vsize_g_0_13))
   /\
   (#"mygraph_c.jc" 242 12 802#
   ((#"/home/nik/Projects/ver/hw3/mygraph.c" 134 13 36#
    (not
    ((=)
    (Int32.to_int
    (select __anonstruct_Vertex_2_existent_vertices_29
    (shift (select __anonstruct_Graph_4_vertices_g_0_13 g_0_0)
    (Int32.to_int f_0)))) (0))))
   /\
   (#"/home/nik/Projects/ver/hw3/mygraph.c" 135 13 36#
   (not
   ((=)
   (Int32.to_int
   (select __anonstruct_Vertex_2_existent_vertices_29
   (shift (select __anonstruct_Graph_4_vertices_g_0_13 g_0_0)
   (Int32.to_int t_0)))) (0)))))))))))))))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/nik/Projects/ver/hw3/mygraph.c" 136 12 41#
     "expl:Ensures clause"
     ((=) (Int32.to_int result)
     (all_count g_0_0 (Int32.to_int f_0) (Int32.to_int t_0)
     __anonstruct_Graph_4_esize_g_0_13 __anonstruct_Graph_4_edges_g_0_13
     __anonstruct_Edge_3_existent_0_edges_30 __anonstruct_Edge_3_to_edges_30
     __anonstruct_Edge_3_from_edges_30)))) } diverges  ->
   'Init:
   (let return = ref (Unsafe_int32.any_  () ) in
   try
    begin
    (let c = ref (Unsafe_int32.any_  () ) in
    (let i_0 = ref (Unsafe_int32.any_  () ) in
    begin
    (c :=
     (#"mygraph_c.jc" 264 20 32# "expl:Integer cast"
     (Unsafe_int32.of_int (0))));
     try
      begin
      (i_0 :=
       (#"mygraph_c.jc" 266 25 37# "expl:Integer cast"
       (Unsafe_int32.of_int (0))));
       'LoopEntry:
       begin
       'LoopEntry:
       'Loop_3:
       loop
       invariant
         { ((#"/home/nik/Projects/ver/hw3/mygraph.c" 142 23 40#
            (#"/home/nik/Projects/ver/hw3/mygraph.c" 142 23 40#
            ((#"/home/nik/Projects/ver/hw3/mygraph.c" 142 23 29#
             (Int32.(<=) (#"mygraph_c.jc" 270 41 53# "expl:Integer cast"
             (Int32.of_int (0))) !i_0))
            /\
            (#"/home/nik/Projects/ver/hw3/mygraph.c" 142 28 40#
            (Int32.(<=) !i_0 (select __anonstruct_Graph_4_ecnt_g_0_13 g_0_0))))))
           &&
           ((#"/home/nik/Projects/ver/hw3/mygraph.c" 143 23 48#
            ((=) (Int32.to_int !c)
            (count g_0_0 (Int32.to_int f_0) (Int32.to_int t_0) (0)
            (Int32.to_int !i_0) __anonstruct_Graph_4_edges_g_0_13
            __anonstruct_Edge_3_existent_0_edges_30
            __anonstruct_Edge_3_to_edges_30
            __anonstruct_Edge_3_from_edges_30)))
           &&
           (#"/home/nik/Projects/ver/hw3/mygraph.c" 144 23 34#
           (#"/home/nik/Projects/ver/hw3/mygraph.c" 144 23 34#
           ((#"/home/nik/Projects/ver/hw3/mygraph.c" 144 23 29#
            (Int32.(<=) (#"mygraph_c.jc" 278 41 53# "expl:Integer cast"
            (Int32.of_int (0))) !c))
           /\
           (#"/home/nik/Projects/ver/hw3/mygraph.c" 144 28 34#
           (Int32.(<=) !c !i_0))))))) } 
        begin
        any unit requires { true } ensures { true } ;
         try
          begin
          'LoopCurrent:
          begin
          'LoopCurrent:
          (if
          (#"/home/nik/Projects/ver/hw3/mygraph.c" 147 20 31#
          (Unsafe_int32.(<)  !i_0
           (acc  __anonstruct_Graph_4_ecnt_g_0_13 g_0_0 ) )) then ()
          else (raise (Goto_while_0_break_0_exc ())));
           (if
           (#"/home/nik/Projects/ver/hw3/mygraph.c" 148 12 32#
           (Unsafe_int32.(<>) 
            (acc  __anonstruct_Edge_3_existent_0_edges_30
             (shift_  (acc  __anonstruct_Graph_4_edges_g_0_13 g_0_0 )
              (Unsafe_int32.to_int  !i_0 ) ) )
            (#"mygraph_c.jc" 288 33 45# "expl:Integer cast"
            (Unsafe_int32.of_int (0))) ))
           then
            (if
            (#"/home/nik/Projects/ver/hw3/mygraph.c" 148 36 57#
            (Unsafe_int32.(=) 
             (acc  __anonstruct_Edge_3_from_edges_30
              (shift_  (acc  __anonstruct_Graph_4_edges_g_0_13 g_0_0 )
               (Unsafe_int32.to_int  !i_0 ) ) ) f_0 ))
            then
             (if
             (#"/home/nik/Projects/ver/hw3/mygraph.c" 148 61 80#
             (Unsafe_int32.(=) 
              (acc  __anonstruct_Edge_3_to_edges_30
               (shift_  (acc  __anonstruct_Graph_4_edges_g_0_13 g_0_0 )
                (Unsafe_int32.to_int  !i_0 ) ) ) t_0 ))
             then
              (c :=
               (Unsafe_int32.(+)  !c
                (#"mygraph_c.jc" 301 68 80# "expl:Integer cast"
                (Unsafe_int32.of_int (1))) )) else ()) else ()) else ());
           (i_0 :=
            (Unsafe_int32.(+)  !i_0
             (#"mygraph_c.jc" 303 57 69# "expl:Integer cast"
             (Unsafe_int32.of_int (1))) )) end;
           (raise (Loop_continue_exc ())) end with Loop_continue_exc
          _jessie_6 -> () end end end; (raise (Goto_while_0_break_0_exc ()))
       end end with Goto_while_0_break_0_exc _jessie_4 ->
      'While_0_break_0: 'While_0_break_0: () end;
     begin
     (assert {
     (#"/home/nik/Projects/ver/hw3/mygraph.c" 152 12 90#
     "expl:Assertion in line 152"
     ((=)
     (all_count g_0_0 (Int32.to_int f_0) (Int32.to_int t_0)
     __anonstruct_Graph_4_esize_g_0_13 __anonstruct_Graph_4_edges_g_0_13
     __anonstruct_Edge_3_existent_0_edges_30 __anonstruct_Edge_3_to_edges_30
     __anonstruct_Edge_3_from_edges_30)
     (Int.(+)
     (count g_0_0 (Int32.to_int f_0) (Int32.to_int t_0) (0)
     (Int32.to_int (select __anonstruct_Graph_4_ecnt_g_0_13 g_0_0))
     __anonstruct_Graph_4_edges_g_0_13
     __anonstruct_Edge_3_existent_0_edges_30 __anonstruct_Edge_3_to_edges_30
     __anonstruct_Edge_3_from_edges_30)
     (count g_0_0 (Int32.to_int f_0) (Int32.to_int t_0)
     (Int32.to_int (select __anonstruct_Graph_4_ecnt_g_0_13 g_0_0))
     (Int32.to_int (select __anonstruct_Graph_4_esize_g_0_13 g_0_0))
     __anonstruct_Graph_4_edges_g_0_13
     __anonstruct_Edge_3_existent_0_edges_30 __anonstruct_Edge_3_to_edges_30
     __anonstruct_Edge_3_from_edges_30)))) }); () end;
     begin
     (assert {
     (#"/home/nik/Projects/ver/hw3/mygraph.c" 153 12 47#
     "expl:Assertion in line 153"
     ((=)
     (count g_0_0 (Int32.to_int f_0) (Int32.to_int t_0)
     (Int32.to_int (select __anonstruct_Graph_4_ecnt_g_0_13 g_0_0))
     (Int32.to_int (select __anonstruct_Graph_4_esize_g_0_13 g_0_0))
     __anonstruct_Graph_4_edges_g_0_13
     __anonstruct_Edge_3_existent_0_edges_30 __anonstruct_Edge_3_to_edges_30
     __anonstruct_Edge_3_from_edges_30) (0))) }); () end;
     begin (return := !c); (raise Return) end end)); absurd  end with Return
    -> !return end)
  
end

theory Logic_range_existent

  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use enum.Int32 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  predicate range_existent (g_4 : (pointer __anonstruct_Graph_4)) (m : int)
  (n_2 : int) (__anonstruct_Graph_4_edges_g_4_7_at_L : (memory
  __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)))
  (__anonstruct_Edge_3_existent_0_edges_19_at_L : (memory __anonstruct_Edge_3
  Int32.t))
  =
     (forall k_4 : int.
      ((((<=) m k_4) /\ ((<) k_4 n_2)) ->
       (not
       ((=)
       (Int32.to_int
       (select __anonstruct_Edge_3_existent_0_edges_19_at_L
       (shift (select __anonstruct_Graph_4_edges_g_4_7_at_L g_4) k_4))) (0)))))
  
  
end

theory Logic_full

  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_range_existent 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  predicate full (g_3 : (pointer __anonstruct_Graph_4))
  (__anonstruct_Graph_4_esize_g_3_6_at_L : (memory __anonstruct_Graph_4
  Int32.t)) (__anonstruct_Graph_4_edges_g_3_6_at_L : (memory
  __anonstruct_Graph_4 (pointer __anonstruct_Edge_3)))
  (__anonstruct_Edge_3_existent_0_edges_49_at_L : (memory __anonstruct_Edge_3
  Int32.t))
  =
     (range_existent g_3 (0)
     (Int32.to_int (select __anonstruct_Graph_4_esize_g_3_6_at_L g_3))
     __anonstruct_Graph_4_edges_g_3_6_at_L
     __anonstruct_Edge_3_existent_0_edges_49_at_L)
  
  
end

module Function_add_edge_safety
#"/home/nik/Projects/ver/hw3/mygraph.c" 169 0 32# "expl:add_edge, safety"

  use import core.Upd_safe 
  
  use import core.Upd_offset_safe 
  
  use import core.Tag_table_type 
  
  use import core.Shift_safe 
  
  use Safe_int32 
  
  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Return 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_is_vertex 
  
  use import Logic_graph_valid 
  
  use import Logic_full 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Exceptions 
  
  use bool.Bool 
  
  use import Axiomatic_LF__Axiomatic__count_after 
  
  use import Axiomatic_EdgesCount 
  
  use import core.Alloc_table 
  
  use import core.Acc_safe 
  
  use import core.Acc_offset_safe 
  
  use why3.Bool.Bool 
  
  use import Lemma_zeros 
  
  use import Lemma_count_prop2 
  
  use import Lemma_count_prop 
  
  let add_edge #"/home/nik/Projects/ver/hw3/mygraph.c" 169 0 32#
  "expl:Function add_edge, safety" =
  fun
   (g_6 : (pointer __anonstruct_Graph_4)) (f_2 : Int32.t) (t_2 : Int32.t)
   (__anonstruct_Edge_3_from_edges_32 : ref (memory __anonstruct_Edge_3
   Int32.t)) (__anonstruct_Edge_3_to_edges_32 : ref (memory
   __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_existent_0_edges_32 :
   ref (memory __anonstruct_Edge_3 Int32.t)) (__anonstruct_Graph_4_ecnt_g_14
   : ref (memory __anonstruct_Graph_4 Int32.t))
   (__anonstruct_Edge_3_edges_32_alloc_table : (alloc_table
   __anonstruct_Edge_3)) (__anonstruct_Graph_4_g_14_alloc_table :
   (alloc_table __anonstruct_Graph_4))
   (__anonstruct_Vertex_2_vertices_31_alloc_table : (alloc_table
   __anonstruct_Vertex_2)) (__anonstruct_Edge_3_edges_32_tag_table :
   (tag_table __anonstruct_Edge_3))
   (__anonstruct_Vertex_2_existent_vertices_31 : (memory
   __anonstruct_Vertex_2 Int32.t)) (__anonstruct_Graph_4_vertices_g_14 :
   (memory __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2)))
   (__anonstruct_Graph_4_vsize_g_14 : (memory __anonstruct_Graph_4 Int32.t))
   (__anonstruct_Graph_4_edges_g_14 : (memory __anonstruct_Graph_4 (pointer
   __anonstruct_Edge_3))) (__anonstruct_Graph_4_esize_g_14 : (memory
   __anonstruct_Graph_4 Int32.t)) 
   requires {
   (#"mygraph_c.jc" 341 12 856#
   ((#"mygraph_c.jc" 341 12 856# _LF__Predicate__count_after) /\
   (#"mygraph_c.jc" 341 12 856#
   ((#"/home/nik/Projects/ver/hw3/mygraph.c" 158 11 20#
    (#"mygraph_c.jc" 341 12 856#
    ((#"mygraph_c.jc" 341 12 856#
     ((<=) (offset_min __anonstruct_Graph_4_g_14_alloc_table g_6) (0)))
    /\
    (#"mygraph_c.jc" 341 12 856#
    ((#"mygraph_c.jc" 341 12 856#
     ((>=) (offset_max __anonstruct_Graph_4_g_14_alloc_table g_6) (0)))
    /\ (#"mygraph_c.jc" 341 12 856# ((=) true true)))))))
   /\
   (#"mygraph_c.jc" 341 12 856#
   ((#"/home/nik/Projects/ver/hw3/mygraph.c" 158 24 38#
    (graph_valid g_6 __anonstruct_Vertex_2_vertices_31_alloc_table
    __anonstruct_Edge_3_edges_32_alloc_table __anonstruct_Graph_4_esize_g_14
    !__anonstruct_Graph_4_ecnt_g_14 __anonstruct_Graph_4_edges_g_14
    __anonstruct_Graph_4_vsize_g_14 __anonstruct_Graph_4_vertices_g_14
    !__anonstruct_Edge_3_existent_0_edges_32 !__anonstruct_Edge_3_to_edges_32
    !__anonstruct_Edge_3_from_edges_32
    __anonstruct_Vertex_2_existent_vertices_31))
   /\
   (#"mygraph_c.jc" 341 12 856#
   ((#"/home/nik/Projects/ver/hw3/mygraph.c" 159 11 26#
    (is_vertex g_6 (Int32.to_int f_2) __anonstruct_Graph_4_vsize_g_14))
   /\
   (#"mygraph_c.jc" 341 12 856#
   ((#"/home/nik/Projects/ver/hw3/mygraph.c" 160 11 26#
    (is_vertex g_6 (Int32.to_int t_2) __anonstruct_Graph_4_vsize_g_14))
   /\
   (#"mygraph_c.jc" 341 12 856#
   ((#"/home/nik/Projects/ver/hw3/mygraph.c" 161 11 34#
    (not
    ((=)
    (Int32.to_int
    (select __anonstruct_Vertex_2_existent_vertices_31
    (shift (select __anonstruct_Graph_4_vertices_g_14 g_6)
    (Int32.to_int f_2)))) (0))))
   /\
   (#"mygraph_c.jc" 341 12 856#
   ((#"/home/nik/Projects/ver/hw3/mygraph.c" 162 11 34#
    (not
    ((=)
    (Int32.to_int
    (select __anonstruct_Vertex_2_existent_vertices_31
    (shift (select __anonstruct_Graph_4_vertices_g_14 g_6)
    (Int32.to_int t_2)))) (0))))
   /\
   (#"/home/nik/Projects/ver/hw3/mygraph.c" 163 11 19#
   (not
   (full g_6 __anonstruct_Graph_4_esize_g_14 __anonstruct_Graph_4_edges_g_14
   !__anonstruct_Edge_3_existent_0_edges_32))))))))))))))))) }
   ensures { ("expl:Postcondition" true) }  ->
   'Init:
   try
    begin
    (let r = ref (Safe_int32.any_  () ) in
    (let i_0_0 = ref (Safe_int32.any_  () ) in
    (let i_1 = ref (Safe_int32.any_  () ) in
    (let i_1_0 = ref (Safe_int32.any_  () ) in
    (let r_0 = ref (Safe_int32.any_  () ) in
    (let k = ref (Safe_int32.any_  () ) in
    (let k_0 = ref (Safe_int32.any_  () ) in
    try
     'U__Before:
     begin
     'U__Before: ();
      (if
      (#"/home/nik/Projects/ver/hw3/mygraph.c" 172 8 26#
      (Safe_int32.(<) 
       (#"/home/nik/Projects/ver/hw3/mygraph.c" 172 8 15#
       "expl:Pointer dereference"
       (acc  __anonstruct_Graph_4_g_14_alloc_table
        !__anonstruct_Graph_4_ecnt_g_14 g_6 ))
       (#"/home/nik/Projects/ver/hw3/mygraph.c" 172 18 26#
       "expl:Pointer dereference"
       (acc  __anonstruct_Graph_4_g_14_alloc_table
        __anonstruct_Graph_4_esize_g_14 g_6 )) ))
      then
       begin
       begin
       any unit
       requires { true } reads { __anonstruct_Edge_3_existent_0_edges_32,
       __anonstruct_Edge_3_from_edges_32, __anonstruct_Edge_3_to_edges_32,
       __anonstruct_Graph_4_ecnt_g_14, g_6 }
       ensures {
         (#"/home/nik/Projects/ver/hw3/mygraph.c" 173 23 201#
         (forall f2 : int.
          (forall t2 : int.
           ((=)
           (count g_6 f2 t2 (0)
           (Int32.to_int (select __anonstruct_Graph_4_esize_g_14 g_6))
           __anonstruct_Graph_4_edges_g_14 (at
           !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
           !__anonstruct_Edge_3_to_edges_32 'Init) (at
           !__anonstruct_Edge_3_from_edges_32 'Init))
           (Int.(+)
           (Int.(+)
           (count g_6 f2 t2 (0)
           (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_14 g_6))
           __anonstruct_Graph_4_edges_g_14 (at
           !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
           !__anonstruct_Edge_3_to_edges_32 'Init) (at
           !__anonstruct_Edge_3_from_edges_32 'Init))
           (count g_6 f2 t2
           (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_14 g_6))
           (Int.(+)
           (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_14 g_6)) (1))
           __anonstruct_Graph_4_edges_g_14 (at
           !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
           !__anonstruct_Edge_3_to_edges_32 'Init) (at
           !__anonstruct_Edge_3_from_edges_32 'Init)))
           (count g_6 f2 t2
           (Int.(+)
           (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_14 g_6)) (1))
           (Int32.to_int (select __anonstruct_Graph_4_esize_g_14 g_6))
           __anonstruct_Graph_4_edges_g_14 (at
           !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
           !__anonstruct_Edge_3_to_edges_32 'Init) (at
           !__anonstruct_Edge_3_from_edges_32 'Init))))))) } ; () end;
        begin
        any unit
        requires { true } reads { __anonstruct_Edge_3_existent_0_edges_32,
        __anonstruct_Edge_3_from_edges_32, __anonstruct_Edge_3_to_edges_32,
        __anonstruct_Graph_4_ecnt_g_14, g_6 }
        ensures {
          (#"/home/nik/Projects/ver/hw3/mygraph.c" 174 22 90#
          (forall f2_0 : int.
           (forall t2_0 : int.
            ((=)
            (count g_6 f2_0 t2_0
            (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_14 g_6))
            (Int.(+)
            (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_14 g_6)) (1))
            __anonstruct_Graph_4_edges_g_14 (at
            !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
            !__anonstruct_Edge_3_to_edges_32 'Init) (at
            !__anonstruct_Edge_3_from_edges_32 'Init)) (0))))) } ; () end;
        begin
        (let _jessie_105 =
        (let _jessie_104 = f_2 in
        begin
        (assert {
        (#"/home/nik/Projects/ver/hw3/mygraph.c" 175 8 34#
        "expl:Pointer index bounds" true) }); _jessie_104 end) in
        (let _jessie_106 =
        (#"/home/nik/Projects/ver/hw3/mygraph.c" 175 8 16#
        "expl:Pointer dereference"
        (acc  __anonstruct_Graph_4_g_14_alloc_table
         __anonstruct_Graph_4_edges_g_14 g_6 )) in
        (let _jessie_107 =
        (Safe_int32.to_int 
         (#"/home/nik/Projects/ver/hw3/mygraph.c" 175 17 24#
         "expl:Pointer dereference"
         (acc  __anonstruct_Graph_4_g_14_alloc_table
          !__anonstruct_Graph_4_ecnt_g_14 g_6 )) ) in
        (let _jessie_108 = (shift_typesafe  _jessie_106 _jessie_107 ) in
        (#"/home/nik/Projects/ver/hw3/mygraph.c" 175 8 34#
        "expl:Pointer dereference"
        (upd_offset_typesafe  __anonstruct_Edge_3_edges_32_alloc_table
         __anonstruct_Edge_3_from_edges_32 _jessie_106 _jessie_107
         _jessie_105 ))))));
         begin
         (let _jessie_100 =
         (let _jessie_99 = t_2 in
         begin
         (assert {
         (#"/home/nik/Projects/ver/hw3/mygraph.c" 176 8 32#
         "expl:Pointer index bounds" true) }); _jessie_99 end) in
         (let _jessie_101 =
         (#"/home/nik/Projects/ver/hw3/mygraph.c" 176 8 16#
         "expl:Pointer dereference"
         (acc  __anonstruct_Graph_4_g_14_alloc_table
          __anonstruct_Graph_4_edges_g_14 g_6 )) in
         (let _jessie_102 =
         (Safe_int32.to_int 
          (#"/home/nik/Projects/ver/hw3/mygraph.c" 176 17 24#
          "expl:Pointer dereference"
          (acc  __anonstruct_Graph_4_g_14_alloc_table
           !__anonstruct_Graph_4_ecnt_g_14 g_6 )) ) in
         (let _jessie_103 = (shift_typesafe  _jessie_101 _jessie_102 ) in
         (#"/home/nik/Projects/ver/hw3/mygraph.c" 176 8 32#
         "expl:Pointer dereference"
         (upd_offset_typesafe  __anonstruct_Edge_3_edges_32_alloc_table
          __anonstruct_Edge_3_to_edges_32 _jessie_101 _jessie_102 _jessie_100
          ))))));
          begin
          (let _jessie_95 =
          (let _jessie_94 =
          (#"mygraph_c.jc" 426 91 103# "expl:Integer cast"
          (Safe_int32.of_int (1))) in
          begin
          (assert {
          (#"/home/nik/Projects/ver/hw3/mygraph.c" 177 8 38#
          "expl:Pointer index bounds" true) }); _jessie_94 end) in
          (let _jessie_96 =
          (#"/home/nik/Projects/ver/hw3/mygraph.c" 177 8 16#
          "expl:Pointer dereference"
          (acc  __anonstruct_Graph_4_g_14_alloc_table
           __anonstruct_Graph_4_edges_g_14 g_6 )) in
          (let _jessie_97 =
          (Safe_int32.to_int 
           (#"/home/nik/Projects/ver/hw3/mygraph.c" 177 17 24#
           "expl:Pointer dereference"
           (acc  __anonstruct_Graph_4_g_14_alloc_table
            !__anonstruct_Graph_4_ecnt_g_14 g_6 )) ) in
          (let _jessie_98 = (shift_typesafe  _jessie_96 _jessie_97 ) in
          (#"/home/nik/Projects/ver/hw3/mygraph.c" 177 8 38#
          "expl:Pointer dereference"
          (upd_offset_typesafe  __anonstruct_Edge_3_edges_32_alloc_table
           __anonstruct_Edge_3_existent_0_edges_32 _jessie_96 _jessie_97
           _jessie_95 ))))));
           begin
           (let _jessie_90 =
           (let _jessie_89 =
           (Safe_int32.(+) 
            (#"/home/nik/Projects/ver/hw3/mygraph.c" 178 8 15#
            "expl:Pointer dereference"
            (acc  __anonstruct_Graph_4_g_14_alloc_table
             !__anonstruct_Graph_4_ecnt_g_14 g_6 ))
            (#"mygraph_c.jc" 428 59 71# "expl:Integer cast"
            (Safe_int32.of_int (1))) ) in
           begin
           (assert {
           (#"/home/nik/Projects/ver/hw3/mygraph.c" 178 5 15#
           "expl:Pointer index bounds" true) }); _jessie_89 end) in
           (let _jessie_91 = g_6 in
           (let _jessie_92 = (0) in
           (let _jessie_93 = _jessie_91 in
           (#"/home/nik/Projects/ver/hw3/mygraph.c" 178 5 15#
           "expl:Pointer dereference"
           (upd  __anonstruct_Graph_4_g_14_alloc_table
            __anonstruct_Graph_4_ecnt_g_14 _jessie_91 _jessie_90 ))))));
            begin
            (r :=
             (let _jessie_84 =
             (Safe_int32.(-) 
              (#"/home/nik/Projects/ver/hw3/mygraph.c" 180 22 29#
              "expl:Pointer dereference"
              (acc  __anonstruct_Graph_4_g_14_alloc_table
               !__anonstruct_Graph_4_ecnt_g_14 g_6 ))
              (#"mygraph_c.jc" 429 62 74# "expl:Integer cast"
              (Safe_int32.of_int (1))) ) in
             begin
             (assert {
             (#"/home/nik/Projects/ver/hw3/mygraph.c" 180 18 19#
             "expl:Pointer index bounds" true) }); _jessie_84 end));
             try
              begin
              (i_0_0 :=
               (let _jessie_86 =
               (#"mygraph_c.jc" 431 30 42# "expl:Integer cast"
               (Safe_int32.of_int (0))) in
               begin
               (assert {
               (#"/home/nik/Projects/ver/hw3/mygraph.c" 192 17 18#
               "expl:Pointer index bounds" true) }); _jessie_86 end));
               'LoopEntry:
               begin
               'LoopEntry:
               'Loop_10:
               loop
               invariant { (#"mygraph_c.jc" 433 12 5094# true) }
                 variant {
                   (#"/home/nik/Projects/ver/hw3/mygraph.c" 190 24 29#
                   (Int.(-) (Int32.to_int !r) (Int32.to_int !i_0_0))) }
                begin
                any unit
                requires { true } reads {
                __anonstruct_Edge_3_existent_0_edges_32,
                __anonstruct_Edge_3_from_edges_32,
                __anonstruct_Edge_3_to_edges_32,
                __anonstruct_Graph_4_ecnt_g_14, g_6 }
                ensures {
                  ((#"/home/nik/Projects/ver/hw3/mygraph.c" 188 26 40#
                   (graph_valid g_6
                   __anonstruct_Vertex_2_vertices_31_alloc_table
                   __anonstruct_Edge_3_edges_32_alloc_table
                   __anonstruct_Graph_4_esize_g_14
                   !__anonstruct_Graph_4_ecnt_g_14
                   __anonstruct_Graph_4_edges_g_14
                   __anonstruct_Graph_4_vsize_g_14
                   __anonstruct_Graph_4_vertices_g_14
                   !__anonstruct_Edge_3_existent_0_edges_32
                   !__anonstruct_Edge_3_to_edges_32
                   !__anonstruct_Edge_3_from_edges_32
                   __anonstruct_Vertex_2_existent_vertices_31))
                  /\
                  ((#"/home/nik/Projects/ver/hw3/mygraph.c" 187 27 100#
                   (forall f2_4 : int.
                    (forall t2_4 : int.
                     ((=)
                     (count g_6 f2_4 t2_4 (0) (Int32.to_int !i_0_0)
                     __anonstruct_Graph_4_edges_g_14
                     !__anonstruct_Edge_3_existent_0_edges_32
                     !__anonstruct_Edge_3_to_edges_32
                     !__anonstruct_Edge_3_from_edges_32)
                     (count g_6 f2_4 t2_4 (0) (Int32.to_int !i_0_0)
                     __anonstruct_Graph_4_edges_g_14 (at
                     !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                     !__anonstruct_Edge_3_to_edges_32 'Init) (at
                     !__anonstruct_Edge_3_from_edges_32 'Init))))))
                  /\
                  ((#"/home/nik/Projects/ver/hw3/mygraph.c" 186 27 151#
                   (forall f2_3 : int.
                    (forall t2_3 : int.
                     (((<=) (Int.(+) (Int32.to_int !i_0_0) (1))
                      (Int32.to_int !r)) ->
                      ((=)
                      (count g_6 f2_3 t2_3 (0)
                      (Int.(+) (Int32.to_int !i_0_0) (1))
                      __anonstruct_Graph_4_edges_g_14 (at
                      !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                      !__anonstruct_Edge_3_to_edges_32 'Init) (at
                      !__anonstruct_Edge_3_from_edges_32 'Init))
                      (Int.(+)
                      (count g_6 f2_3 t2_3 (0) (Int32.to_int !i_0_0)
                      __anonstruct_Graph_4_edges_g_14 (at
                      !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                      !__anonstruct_Edge_3_to_edges_32 'Init) (at
                      !__anonstruct_Edge_3_from_edges_32 'Init))
                      (count g_6 f2_3 t2_3 (Int32.to_int !i_0_0)
                      (Int.(+) (Int32.to_int !i_0_0) (1))
                      __anonstruct_Graph_4_edges_g_14 (at
                      !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                      !__anonstruct_Edge_3_to_edges_32 'Init) (at
                      !__anonstruct_Edge_3_from_edges_32 'Init))))))))
                  /\
                  ((#"/home/nik/Projects/ver/hw3/mygraph.c" 185 27 118#
                   (forall f2_2 : int.
                    (forall t2_2 : int.
                     (((<=) (Int.(+) (Int32.to_int !i_0_0) (1))
                      (Int32.to_int !r)) ->
                      ((=)
                      (count g_6 f2_2 t2_2 (Int32.to_int !i_0_0)
                      (Int.(+) (Int32.to_int !i_0_0) (1))
                      __anonstruct_Graph_4_edges_g_14
                      !__anonstruct_Edge_3_existent_0_edges_32
                      !__anonstruct_Edge_3_to_edges_32
                      !__anonstruct_Edge_3_from_edges_32)
                      (count g_6 f2_2 t2_2 (Int32.to_int !i_0_0)
                      (Int.(+) (Int32.to_int !i_0_0) (1))
                      __anonstruct_Graph_4_edges_g_14 (at
                      !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                      !__anonstruct_Edge_3_to_edges_32 'Init) (at
                      !__anonstruct_Edge_3_from_edges_32 'Init)))))))
                  /\
                  ((#"/home/nik/Projects/ver/hw3/mygraph.c" 184 28 85#
                   ((Int32.(<) !i_0_0 !r) ->
                    ((Int32.(=)
                     (select !__anonstruct_Edge_3_from_edges_32
                     (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                     (Int32.to_int !i_0_0)))
                     (select (at !__anonstruct_Edge_3_from_edges_32 'Init)
                     (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                     (Int32.to_int !i_0_0))))
                    /\
                    ((Int32.(=)
                     (select !__anonstruct_Edge_3_to_edges_32
                     (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                     (Int32.to_int !i_0_0)))
                     (select (at !__anonstruct_Edge_3_to_edges_32 'Init)
                     (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                     (Int32.to_int !i_0_0))))
                    /\
                    (Int32.(=)
                    (select !__anonstruct_Edge_3_existent_0_edges_32
                    (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                    (Int32.to_int !i_0_0)))
                    (select (at !__anonstruct_Edge_3_existent_0_edges_32
                    'Init)
                    (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                    (Int32.to_int !i_0_0))))))))
                  /\
                  ((#"/home/nik/Projects/ver/hw3/mygraph.c" 183 27 136#
                   (forall f2_1 : int.
                    (forall t2_1 : int.
                     (((<=) (Int.(+) (Int32.to_int !i_0_0) (1))
                      (Int32.to_int !r)) ->
                      ((=)
                      (count g_6 f2_1 t2_1 (0)
                      (Int.(+) (Int32.to_int !i_0_0) (1))
                      __anonstruct_Graph_4_edges_g_14
                      !__anonstruct_Edge_3_existent_0_edges_32
                      !__anonstruct_Edge_3_to_edges_32
                      !__anonstruct_Edge_3_from_edges_32)
                      (Int.(+)
                      (count g_6 f2_1 t2_1 (0) (Int32.to_int !i_0_0)
                      __anonstruct_Graph_4_edges_g_14
                      !__anonstruct_Edge_3_existent_0_edges_32
                      !__anonstruct_Edge_3_to_edges_32
                      !__anonstruct_Edge_3_from_edges_32)
                      (count g_6 f2_1 t2_1 (Int32.to_int !i_0_0)
                      (Int.(+) (Int32.to_int !i_0_0) (1))
                      __anonstruct_Graph_4_edges_g_14
                      !__anonstruct_Edge_3_existent_0_edges_32
                      !__anonstruct_Edge_3_to_edges_32
                      !__anonstruct_Edge_3_from_edges_32)))))))
                  /\
                  ((#"/home/nik/Projects/ver/hw3/mygraph.c" 182 26 111#
                   (forall k_8 : int.
                    ((((<=) (0) k_8) /\
                     (((<) k_8
                      (Int32.to_int
                      (select __anonstruct_Graph_4_esize_g_14 g_6)))
                     /\ (not ((=) k_8 (Int32.to_int !r))))) ->
                     ((Int32.(=)
                      (select !__anonstruct_Edge_3_from_edges_32
                      (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                      k_8))
                      (select (at !__anonstruct_Edge_3_from_edges_32 'Init)
                      (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                      k_8)))
                     /\
                     ((Int32.(=)
                      (select !__anonstruct_Edge_3_to_edges_32
                      (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                      k_8))
                      (select (at !__anonstruct_Edge_3_to_edges_32 'Init)
                      (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                      k_8)))
                     /\
                     (Int32.(=)
                     (select !__anonstruct_Edge_3_existent_0_edges_32
                     (shift (select __anonstruct_Graph_4_edges_g_14 g_6) k_8))
                     (select (at !__anonstruct_Edge_3_existent_0_edges_32
                     'Init)
                     (shift (select __anonstruct_Graph_4_edges_g_14 g_6) k_8))))))))
                  /\
                  (#"/home/nik/Projects/ver/hw3/mygraph.c" 181 26 37#
                  (#"/home/nik/Projects/ver/hw3/mygraph.c" 181 26 37#
                  ((#"/home/nik/Projects/ver/hw3/mygraph.c" 181 26 32#
                   (Int32.(<=) (#"mygraph_c.jc" 438 44 56#
                   "expl:Integer cast" (Int32.of_int (0))) !i_0_0))
                  /\
                  (#"/home/nik/Projects/ver/hw3/mygraph.c" 181 31 37#
                  (Int32.(<=) !i_0_0 !r)))))))))))) } ;
                 try
                  begin
                  'LoopCurrent:
                  begin
                  'LoopCurrent:
                  (if
                  (#"/home/nik/Projects/ver/hw3/mygraph.c" 192 24 29#
                  (Safe_int32.(<)  !i_0_0 !r )) then ()
                  else (raise (Goto_while_0_break_1_exc ())));
                   (i_0_0 :=
                    (let _jessie_85 =
                    (Safe_int32.(+)  !i_0_0
                     (#"mygraph_c.jc" 514 60 72# "expl:Integer cast"
                     (Safe_int32.of_int (1))) ) in
                    begin
                    (assert {
                    (#"/home/nik/Projects/ver/hw3/mygraph.c" 192 31 34#
                    "expl:Pointer index bounds" true) }); _jessie_85 end))
                  end; (raise (Loop_continue_exc ())) end with
                  Loop_continue_exc _jessie_14 -> () end end end;
                (raise (Goto_while_0_break_1_exc ())) end end with
              Goto_while_0_break_1_exc _jessie_7 ->
              'While_0_break_1: 'While_0_break_1: () end;
             try
              begin
              (i_1 :=
               (let _jessie_88 =
               (Safe_int32.(+)  !r
                (#"mygraph_c.jc" 520 55 67# "expl:Integer cast"
                (Safe_int32.of_int (1))) ) in
               begin
               (assert {
               (#"/home/nik/Projects/ver/hw3/mygraph.c" 207 17 18#
               "expl:Pointer index bounds" true) }); _jessie_88 end));
               'LoopEntry:
               begin
               'LoopEntry:
               'Loop_11:
               loop
               invariant { (#"mygraph_c.jc" 522 12 5606# true) }
                 variant {
                   (#"/home/nik/Projects/ver/hw3/mygraph.c" 204 24 35#
                   (Int.(-)
                   (Int32.to_int
                   (select __anonstruct_Graph_4_esize_g_14 g_6))
                   (Int32.to_int !i_1))) }
                begin
                any unit
                requires { true } reads {
                __anonstruct_Edge_3_existent_0_edges_32,
                __anonstruct_Edge_3_from_edges_32,
                __anonstruct_Edge_3_to_edges_32,
                __anonstruct_Graph_4_ecnt_g_14, g_6 }
                ensures {
                  ((#"/home/nik/Projects/ver/hw3/mygraph.c" 202 26 106#
                   (forall f2_8 : int.
                    (forall t2_8 : int.
                     ((=)
                     (count g_6 f2_8 t2_8 (Int.(+) (Int32.to_int !r) (1))
                     (Int32.to_int !i_1) __anonstruct_Graph_4_edges_g_14
                     !__anonstruct_Edge_3_existent_0_edges_32
                     !__anonstruct_Edge_3_to_edges_32
                     !__anonstruct_Edge_3_from_edges_32)
                     (count g_6 f2_8 t2_8 (Int.(+) (Int32.to_int !r) (1))
                     (Int32.to_int !i_1) __anonstruct_Graph_4_edges_g_14 (at
                     !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                     !__anonstruct_Edge_3_to_edges_32 'Init) (at
                     !__anonstruct_Edge_3_from_edges_32 'Init))))))
                  /\
                  ((#"/home/nik/Projects/ver/hw3/mygraph.c" 201 27 159#
                   (forall f2_7 : int.
                    (forall t2_7 : int.
                     (((<=) (Int.(+) (Int32.to_int !i_1) (1))
                      (Int32.to_int
                      (select __anonstruct_Graph_4_esize_g_14 g_6))) ->
                      ((=)
                      (count g_6 f2_7 t2_7 (Int.(+) (Int32.to_int !r) (1))
                      (Int.(+) (Int32.to_int !i_1) (1))
                      __anonstruct_Graph_4_edges_g_14 (at
                      !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                      !__anonstruct_Edge_3_to_edges_32 'Init) (at
                      !__anonstruct_Edge_3_from_edges_32 'Init))
                      (Int.(+)
                      (count g_6 f2_7 t2_7 (Int.(+) (Int32.to_int !r) (1))
                      (Int32.to_int !i_1) __anonstruct_Graph_4_edges_g_14 (at
                      !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                      !__anonstruct_Edge_3_to_edges_32 'Init) (at
                      !__anonstruct_Edge_3_from_edges_32 'Init))
                      (count g_6 f2_7 t2_7 (Int32.to_int !i_1)
                      (Int.(+) (Int32.to_int !i_1) (1))
                      __anonstruct_Graph_4_edges_g_14 (at
                      !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                      !__anonstruct_Edge_3_to_edges_32 'Init) (at
                      !__anonstruct_Edge_3_from_edges_32 'Init))))))))
                  /\
                  ((#"/home/nik/Projects/ver/hw3/mygraph.c" 200 27 126#
                   (forall f2_6 : int.
                    (forall t2_6 : int.
                     (((<=) (Int.(+) (Int32.to_int !i_1) (1))
                      (Int32.to_int
                      (select __anonstruct_Graph_4_esize_g_14 g_6))) ->
                      ((=)
                      (count g_6 f2_6 t2_6 (Int32.to_int !i_1)
                      (Int.(+) (Int32.to_int !i_1) (1))
                      __anonstruct_Graph_4_edges_g_14
                      !__anonstruct_Edge_3_existent_0_edges_32
                      !__anonstruct_Edge_3_to_edges_32
                      !__anonstruct_Edge_3_from_edges_32)
                      (count g_6 f2_6 t2_6 (Int32.to_int !i_1)
                      (Int.(+) (Int32.to_int !i_1) (1))
                      __anonstruct_Graph_4_edges_g_14 (at
                      !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                      !__anonstruct_Edge_3_to_edges_32 'Init) (at
                      !__anonstruct_Edge_3_from_edges_32 'Init)))))))
                  /\
                  ((#"/home/nik/Projects/ver/hw3/mygraph.c" 199 27 84#
                   ((Int32.(>) !i_1 !r) ->
                    ((Int32.(=)
                     (select !__anonstruct_Edge_3_from_edges_32
                     (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                     (Int32.to_int !i_1)))
                     (select (at !__anonstruct_Edge_3_from_edges_32 'Init)
                     (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                     (Int32.to_int !i_1))))
                    /\
                    ((Int32.(=)
                     (select !__anonstruct_Edge_3_to_edges_32
                     (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                     (Int32.to_int !i_1)))
                     (select (at !__anonstruct_Edge_3_to_edges_32 'Init)
                     (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                     (Int32.to_int !i_1))))
                    /\
                    (Int32.(=)
                    (select !__anonstruct_Edge_3_existent_0_edges_32
                    (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                    (Int32.to_int !i_1)))
                    (select (at !__anonstruct_Edge_3_existent_0_edges_32
                    'Init)
                    (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                    (Int32.to_int !i_1))))))))
                  /\
                  ((#"/home/nik/Projects/ver/hw3/mygraph.c" 198 27 156#
                   (forall f2_5 : int.
                    (forall t2_5 : int.
                     ((((<) (Int.(+) (Int32.to_int !r) (1))
                       (Int.(+) (Int32.to_int !i_1) (1)))
                      /\
                      ((<=) (Int.(+) (Int32.to_int !i_1) (1))
                      (Int32.to_int
                      (select __anonstruct_Graph_4_esize_g_14 g_6)))) ->
                      ((=)
                      (count g_6 f2_5 t2_5 (Int.(+) (Int32.to_int !r) (1))
                      (Int.(+) (Int32.to_int !i_1) (1))
                      __anonstruct_Graph_4_edges_g_14
                      !__anonstruct_Edge_3_existent_0_edges_32
                      !__anonstruct_Edge_3_to_edges_32
                      !__anonstruct_Edge_3_from_edges_32)
                      (Int.(+)
                      (count g_6 f2_5 t2_5 (Int.(+) (Int32.to_int !r) (1))
                      (Int32.to_int !i_1) __anonstruct_Graph_4_edges_g_14
                      !__anonstruct_Edge_3_existent_0_edges_32
                      !__anonstruct_Edge_3_to_edges_32
                      !__anonstruct_Edge_3_from_edges_32)
                      (count g_6 f2_5 t2_5 (Int32.to_int !i_1)
                      (Int.(+) (Int32.to_int !i_1) (1))
                      __anonstruct_Graph_4_edges_g_14
                      !__anonstruct_Edge_3_existent_0_edges_32
                      !__anonstruct_Edge_3_to_edges_32
                      !__anonstruct_Edge_3_from_edges_32)))))))
                  /\
                  ((#"/home/nik/Projects/ver/hw3/mygraph.c" 197 26 103#
                   (forall k_9 : int.
                    ((((<) (Int32.to_int !r) k_9) /\
                     ((<) k_9
                     (Int32.to_int
                     (select __anonstruct_Graph_4_esize_g_14 g_6)))) ->
                     ((Int32.(=)
                      (select !__anonstruct_Edge_3_from_edges_32
                      (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                      k_9))
                      (select (at !__anonstruct_Edge_3_from_edges_32 'Init)
                      (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                      k_9)))
                     /\
                     ((Int32.(=)
                      (select !__anonstruct_Edge_3_to_edges_32
                      (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                      k_9))
                      (select (at !__anonstruct_Edge_3_to_edges_32 'Init)
                      (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                      k_9)))
                     /\
                     (Int32.(=)
                     (select !__anonstruct_Edge_3_existent_0_edges_32
                     (shift (select __anonstruct_Graph_4_edges_g_14 g_6) k_9))
                     (select (at !__anonstruct_Edge_3_existent_0_edges_32
                     'Init)
                     (shift (select __anonstruct_Graph_4_edges_g_14 g_6) k_9))))))))
                  /\
                  ((#"/home/nik/Projects/ver/hw3/mygraph.c" 196 26 40#
                   (graph_valid g_6
                   __anonstruct_Vertex_2_vertices_31_alloc_table
                   __anonstruct_Edge_3_edges_32_alloc_table
                   __anonstruct_Graph_4_esize_g_14
                   !__anonstruct_Graph_4_ecnt_g_14
                   __anonstruct_Graph_4_edges_g_14
                   __anonstruct_Graph_4_vsize_g_14
                   __anonstruct_Graph_4_vertices_g_14
                   !__anonstruct_Edge_3_existent_0_edges_32
                   !__anonstruct_Edge_3_to_edges_32
                   !__anonstruct_Edge_3_from_edges_32
                   __anonstruct_Vertex_2_existent_vertices_31))
                  /\
                  (#"/home/nik/Projects/ver/hw3/mygraph.c" 195 26 46#
                  (#"/home/nik/Projects/ver/hw3/mygraph.c" 195 26 46#
                  ((#"/home/nik/Projects/ver/hw3/mygraph.c" 195 26 34#
                   ((<=) (Int.(+) (Int32.to_int !r) (1)) (Int32.to_int !i_1)))
                  /\
                  (#"/home/nik/Projects/ver/hw3/mygraph.c" 195 33 46#
                  (Int32.(<=) !i_1
                  (select __anonstruct_Graph_4_esize_g_14 g_6))))))))))))) } ;
                 try
                  begin
                  'LoopCurrent:
                  begin
                  'LoopCurrent:
                  (if
                  (#"/home/nik/Projects/ver/hw3/mygraph.c" 207 26 38#
                  (Safe_int32.(<)  !i_1
                   (#"/home/nik/Projects/ver/hw3/mygraph.c" 207 30 38#
                   "expl:Pointer dereference"
                   (acc  __anonstruct_Graph_4_g_14_alloc_table
                    __anonstruct_Graph_4_esize_g_14 g_6 )) )) then ()
                  else (raise (Goto_while_0_break_0_0_exc ())));
                   (i_1 :=
                    (let _jessie_87 =
                    (Safe_int32.(+)  !i_1
                     (#"mygraph_c.jc" 609 63 75# "expl:Integer cast"
                     (Safe_int32.of_int (1))) ) in
                    begin
                    (assert {
                    (#"/home/nik/Projects/ver/hw3/mygraph.c" 207 40 43#
                    "expl:Pointer index bounds" true) }); _jessie_87 end))
                  end; (raise (Loop_continue_exc ())) end with
                  Loop_continue_exc _jessie_16 -> () end end end;
                (raise (Goto_while_0_break_0_0_exc ())) end end with
              Goto_while_0_break_0_0_exc _jessie_8 ->
              'While_0_break_0_0: 'While_0_break_0_0: () end;
             begin
             any unit
             requires { true } reads {
             __anonstruct_Edge_3_existent_0_edges_32,
             __anonstruct_Edge_3_from_edges_32,
             __anonstruct_Edge_3_to_edges_32, __anonstruct_Graph_4_ecnt_g_14,
             g_6 }
             ensures {
               (#"/home/nik/Projects/ver/hw3/mygraph.c" 211 19 106#
               (forall f2_9 : int.
                (forall t2_9 : int.
                 ((=)
                 (count g_6 f2_9 t2_9 (0)
                 (Int.(-)
                 (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_14 g_6))
                 (1)) __anonstruct_Graph_4_edges_g_14
                 !__anonstruct_Edge_3_existent_0_edges_32
                 !__anonstruct_Edge_3_to_edges_32
                 !__anonstruct_Edge_3_from_edges_32)
                 (count g_6 f2_9 t2_9 (0)
                 (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_14 g_6))
                 __anonstruct_Graph_4_edges_g_14 (at
                 !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                 !__anonstruct_Edge_3_to_edges_32 'Init) (at
                 !__anonstruct_Edge_3_from_edges_32 'Init)))))) } ; () end;
             begin
             any unit
             requires { true } reads {
             __anonstruct_Edge_3_existent_0_edges_32,
             __anonstruct_Edge_3_from_edges_32,
             __anonstruct_Edge_3_to_edges_32, g_6 }
             ensures {
               (#"/home/nik/Projects/ver/hw3/mygraph.c" 212 19 109#
               (forall f2_10 : int.
                (forall t2_10 : int.
                 ((=)
                 (count g_6 f2_10 t2_10 (Int.(+) (Int32.to_int !r) (1))
                 (Int32.to_int (select __anonstruct_Graph_4_esize_g_14 g_6))
                 __anonstruct_Graph_4_edges_g_14
                 !__anonstruct_Edge_3_existent_0_edges_32
                 !__anonstruct_Edge_3_to_edges_32
                 !__anonstruct_Edge_3_from_edges_32)
                 (count g_6 f2_10 t2_10 (Int.(+) (Int32.to_int !r) (1))
                 (Int32.to_int (select __anonstruct_Graph_4_esize_g_14 g_6))
                 __anonstruct_Graph_4_edges_g_14 (at
                 !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                 !__anonstruct_Edge_3_to_edges_32 'Init) (at
                 !__anonstruct_Edge_3_from_edges_32 'Init)))))) } ; () end;
             begin
             any unit
             requires { true } reads {
             __anonstruct_Edge_3_existent_0_edges_32,
             __anonstruct_Edge_3_from_edges_32,
             __anonstruct_Edge_3_to_edges_32, g_6 }
             ensures {
               (#"/home/nik/Projects/ver/hw3/mygraph.c" 213 19 618#
               (forall f2_11 : int.
                (forall t2_11 : int.
                 (((=)
                  (count g_6 f2_11 t2_11 (0)
                  (Int32.to_int (select __anonstruct_Graph_4_esize_g_14 g_6))
                  __anonstruct_Graph_4_edges_g_14
                  !__anonstruct_Edge_3_existent_0_edges_32
                  !__anonstruct_Edge_3_to_edges_32
                  !__anonstruct_Edge_3_from_edges_32)
                  (Int.(+)
                  (Int.(+)
                  (count g_6 f2_11 t2_11 (0) (Int32.to_int !r)
                  __anonstruct_Graph_4_edges_g_14
                  !__anonstruct_Edge_3_existent_0_edges_32
                  !__anonstruct_Edge_3_to_edges_32
                  !__anonstruct_Edge_3_from_edges_32)
                  (count g_6 f2_11 t2_11 (Int32.to_int !r)
                  (Int.(+) (Int32.to_int !r) (1))
                  __anonstruct_Graph_4_edges_g_14
                  !__anonstruct_Edge_3_existent_0_edges_32
                  !__anonstruct_Edge_3_to_edges_32
                  !__anonstruct_Edge_3_from_edges_32))
                  (count g_6 f2_11 t2_11 (Int.(+) (Int32.to_int !r) (1))
                  (Int32.to_int (select __anonstruct_Graph_4_esize_g_14 g_6))
                  __anonstruct_Graph_4_edges_g_14
                  !__anonstruct_Edge_3_existent_0_edges_32
                  !__anonstruct_Edge_3_to_edges_32
                  !__anonstruct_Edge_3_from_edges_32)))
                 /\
                 (((=)
                  (Int.(+)
                  (Int.(+)
                  (count g_6 f2_11 t2_11 (0) (Int32.to_int !r)
                  __anonstruct_Graph_4_edges_g_14
                  !__anonstruct_Edge_3_existent_0_edges_32
                  !__anonstruct_Edge_3_to_edges_32
                  !__anonstruct_Edge_3_from_edges_32)
                  (count g_6 f2_11 t2_11 (Int32.to_int !r)
                  (Int.(+) (Int32.to_int !r) (1))
                  __anonstruct_Graph_4_edges_g_14
                  !__anonstruct_Edge_3_existent_0_edges_32
                  !__anonstruct_Edge_3_to_edges_32
                  !__anonstruct_Edge_3_from_edges_32))
                  (count g_6 f2_11 t2_11 (Int.(+) (Int32.to_int !r) (1))
                  (Int32.to_int (select __anonstruct_Graph_4_esize_g_14 g_6))
                  __anonstruct_Graph_4_edges_g_14
                  !__anonstruct_Edge_3_existent_0_edges_32
                  !__anonstruct_Edge_3_to_edges_32
                  !__anonstruct_Edge_3_from_edges_32))
                  (Int.(+)
                  (Int.(+)
                  (count g_6 f2_11 t2_11 (0) (Int32.to_int !r)
                  __anonstruct_Graph_4_edges_g_14 (at
                  !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                  !__anonstruct_Edge_3_to_edges_32 'Init) (at
                  !__anonstruct_Edge_3_from_edges_32 'Init))
                  (count g_6 f2_11 t2_11 (Int32.to_int !r)
                  (Int.(+) (Int32.to_int !r) (1))
                  __anonstruct_Graph_4_edges_g_14
                  !__anonstruct_Edge_3_existent_0_edges_32
                  !__anonstruct_Edge_3_to_edges_32
                  !__anonstruct_Edge_3_from_edges_32))
                  (count g_6 f2_11 t2_11 (Int.(+) (Int32.to_int !r) (1))
                  (Int32.to_int (select __anonstruct_Graph_4_esize_g_14 g_6))
                  __anonstruct_Graph_4_edges_g_14
                  !__anonstruct_Edge_3_existent_0_edges_32
                  !__anonstruct_Edge_3_to_edges_32
                  !__anonstruct_Edge_3_from_edges_32)))
                 /\
                 (((=)
                  (Int.(+)
                  (Int.(+)
                  (count g_6 f2_11 t2_11 (0) (Int32.to_int !r)
                  __anonstruct_Graph_4_edges_g_14 (at
                  !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                  !__anonstruct_Edge_3_to_edges_32 'Init) (at
                  !__anonstruct_Edge_3_from_edges_32 'Init))
                  (count g_6 f2_11 t2_11 (Int32.to_int !r)
                  (Int.(+) (Int32.to_int !r) (1))
                  __anonstruct_Graph_4_edges_g_14
                  !__anonstruct_Edge_3_existent_0_edges_32
                  !__anonstruct_Edge_3_to_edges_32
                  !__anonstruct_Edge_3_from_edges_32))
                  (count g_6 f2_11 t2_11 (Int.(+) (Int32.to_int !r) (1))
                  (Int32.to_int (select __anonstruct_Graph_4_esize_g_14 g_6))
                  __anonstruct_Graph_4_edges_g_14
                  !__anonstruct_Edge_3_existent_0_edges_32
                  !__anonstruct_Edge_3_to_edges_32
                  !__anonstruct_Edge_3_from_edges_32))
                  (Int.(+)
                  (Int.(+)
                  (count g_6 f2_11 t2_11 (0) (Int32.to_int !r)
                  __anonstruct_Graph_4_edges_g_14 (at
                  !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                  !__anonstruct_Edge_3_to_edges_32 'Init) (at
                  !__anonstruct_Edge_3_from_edges_32 'Init))
                  (count g_6 f2_11 t2_11 (Int32.to_int !r)
                  (Int.(+) (Int32.to_int !r) (1))
                  __anonstruct_Graph_4_edges_g_14
                  !__anonstruct_Edge_3_existent_0_edges_32
                  !__anonstruct_Edge_3_to_edges_32
                  !__anonstruct_Edge_3_from_edges_32))
                  (count g_6 f2_11 t2_11 (Int.(+) (Int32.to_int !r) (1))
                  (Int32.to_int (select __anonstruct_Graph_4_esize_g_14 g_6))
                  __anonstruct_Graph_4_edges_g_14 (at
                  !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                  !__anonstruct_Edge_3_to_edges_32 'Init) (at
                  !__anonstruct_Edge_3_from_edges_32 'Init))))
                 /\
                 (((=)
                  (Int.(+)
                  (Int.(+)
                  (count g_6 f2_11 t2_11 (0) (Int32.to_int !r)
                  __anonstruct_Graph_4_edges_g_14 (at
                  !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                  !__anonstruct_Edge_3_to_edges_32 'Init) (at
                  !__anonstruct_Edge_3_from_edges_32 'Init))
                  (count g_6 f2_11 t2_11 (Int32.to_int !r)
                  (Int.(+) (Int32.to_int !r) (1))
                  __anonstruct_Graph_4_edges_g_14
                  !__anonstruct_Edge_3_existent_0_edges_32
                  !__anonstruct_Edge_3_to_edges_32
                  !__anonstruct_Edge_3_from_edges_32))
                  (count g_6 f2_11 t2_11 (Int.(+) (Int32.to_int !r) (1))
                  (Int32.to_int (select __anonstruct_Graph_4_esize_g_14 g_6))
                  __anonstruct_Graph_4_edges_g_14 (at
                  !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                  !__anonstruct_Edge_3_to_edges_32 'Init) (at
                  !__anonstruct_Edge_3_from_edges_32 'Init)))
                  (Int.(+)
                  (Int.(+)
                  (Int.(+)
                  (count g_6 f2_11 t2_11 (0) (Int32.to_int !r)
                  __anonstruct_Graph_4_edges_g_14 (at
                  !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                  !__anonstruct_Edge_3_to_edges_32 'Init) (at
                  !__anonstruct_Edge_3_from_edges_32 'Init))
                  (count g_6 f2_11 t2_11 (Int32.to_int !r)
                  (Int.(+) (Int32.to_int !r) (1))
                  __anonstruct_Graph_4_edges_g_14 (at
                  !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                  !__anonstruct_Edge_3_to_edges_32 'Init) (at
                  !__anonstruct_Edge_3_from_edges_32 'Init)))
                  (count g_6 f2_11 t2_11 (Int.(+) (Int32.to_int !r) (1))
                  (Int32.to_int (select __anonstruct_Graph_4_esize_g_14 g_6))
                  __anonstruct_Graph_4_edges_g_14 (at
                  !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                  !__anonstruct_Edge_3_to_edges_32 'Init) (at
                  !__anonstruct_Edge_3_from_edges_32 'Init)))
                  (count g_6 f2_11 t2_11 (Int32.to_int !r)
                  (Int.(+) (Int32.to_int !r) (1))
                  __anonstruct_Graph_4_edges_g_14
                  !__anonstruct_Edge_3_existent_0_edges_32
                  !__anonstruct_Edge_3_to_edges_32
                  !__anonstruct_Edge_3_from_edges_32)))
                 /\
                 (((=)
                  (Int.(+)
                  (Int.(+)
                  (Int.(+)
                  (count g_6 f2_11 t2_11 (0) (Int32.to_int !r)
                  __anonstruct_Graph_4_edges_g_14 (at
                  !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                  !__anonstruct_Edge_3_to_edges_32 'Init) (at
                  !__anonstruct_Edge_3_from_edges_32 'Init))
                  (count g_6 f2_11 t2_11 (Int32.to_int !r)
                  (Int.(+) (Int32.to_int !r) (1))
                  __anonstruct_Graph_4_edges_g_14 (at
                  !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                  !__anonstruct_Edge_3_to_edges_32 'Init) (at
                  !__anonstruct_Edge_3_from_edges_32 'Init)))
                  (count g_6 f2_11 t2_11 (Int.(+) (Int32.to_int !r) (1))
                  (Int32.to_int (select __anonstruct_Graph_4_esize_g_14 g_6))
                  __anonstruct_Graph_4_edges_g_14 (at
                  !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                  !__anonstruct_Edge_3_to_edges_32 'Init) (at
                  !__anonstruct_Edge_3_from_edges_32 'Init)))
                  (count g_6 f2_11 t2_11 (Int32.to_int !r)
                  (Int.(+) (Int32.to_int !r) (1))
                  __anonstruct_Graph_4_edges_g_14
                  !__anonstruct_Edge_3_existent_0_edges_32
                  !__anonstruct_Edge_3_to_edges_32
                  !__anonstruct_Edge_3_from_edges_32))
                  (Int.(+)
                  (Int.(+)
                  (count g_6 f2_11 t2_11 (0) (Int.(+) (Int32.to_int !r) (1))
                  __anonstruct_Graph_4_edges_g_14 (at
                  !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                  !__anonstruct_Edge_3_to_edges_32 'Init) (at
                  !__anonstruct_Edge_3_from_edges_32 'Init))
                  (count g_6 f2_11 t2_11 (Int.(+) (Int32.to_int !r) (1))
                  (Int32.to_int (select __anonstruct_Graph_4_esize_g_14 g_6))
                  __anonstruct_Graph_4_edges_g_14 (at
                  !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                  !__anonstruct_Edge_3_to_edges_32 'Init) (at
                  !__anonstruct_Edge_3_from_edges_32 'Init)))
                  (count g_6 f2_11 t2_11 (Int32.to_int !r)
                  (Int.(+) (Int32.to_int !r) (1))
                  __anonstruct_Graph_4_edges_g_14
                  !__anonstruct_Edge_3_existent_0_edges_32
                  !__anonstruct_Edge_3_to_edges_32
                  !__anonstruct_Edge_3_from_edges_32)))
                 /\
                 ((=)
                 (Int.(+)
                 (Int.(+)
                 (count g_6 f2_11 t2_11 (0) (Int.(+) (Int32.to_int !r) (1))
                 __anonstruct_Graph_4_edges_g_14 (at
                 !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                 !__anonstruct_Edge_3_to_edges_32 'Init) (at
                 !__anonstruct_Edge_3_from_edges_32 'Init))
                 (count g_6 f2_11 t2_11 (Int.(+) (Int32.to_int !r) (1))
                 (Int32.to_int (select __anonstruct_Graph_4_esize_g_14 g_6))
                 __anonstruct_Graph_4_edges_g_14 (at
                 !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                 !__anonstruct_Edge_3_to_edges_32 'Init) (at
                 !__anonstruct_Edge_3_from_edges_32 'Init)))
                 (count g_6 f2_11 t2_11 (Int32.to_int !r)
                 (Int.(+) (Int32.to_int !r) (1))
                 __anonstruct_Graph_4_edges_g_14
                 !__anonstruct_Edge_3_existent_0_edges_32
                 !__anonstruct_Edge_3_to_edges_32
                 !__anonstruct_Edge_3_from_edges_32))
                 (Int.(+)
                 (count g_6 f2_11 t2_11 (0)
                 (Int32.to_int (select __anonstruct_Graph_4_esize_g_14 g_6))
                 __anonstruct_Graph_4_edges_g_14 (at
                 !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                 !__anonstruct_Edge_3_to_edges_32 'Init) (at
                 !__anonstruct_Edge_3_from_edges_32 'Init))
                 (count g_6 f2_11 t2_11 (Int32.to_int !r)
                 (Int.(+) (Int32.to_int !r) (1))
                 __anonstruct_Graph_4_edges_g_14
                 !__anonstruct_Edge_3_existent_0_edges_32
                 !__anonstruct_Edge_3_to_edges_32
                 !__anonstruct_Edge_3_from_edges_32))))))))))) } ; () end;
             begin
             any unit
             requires { true } reads {
             __anonstruct_Edge_3_existent_0_edges_32,
             __anonstruct_Edge_3_from_edges_32,
             __anonstruct_Edge_3_to_edges_32, __anonstruct_Graph_4_ecnt_g_14,
             g_6 }
             ensures {
               (#"/home/nik/Projects/ver/hw3/mygraph.c" 218 19 184#
               (forall f2_12 : int.
                (forall t2_12 : int.
                 ((=)
                 (count g_6 f2_12 t2_12 (0)
                 (Int32.to_int (select __anonstruct_Graph_4_esize_g_14 g_6))
                 __anonstruct_Graph_4_edges_g_14
                 !__anonstruct_Edge_3_existent_0_edges_32
                 !__anonstruct_Edge_3_to_edges_32
                 !__anonstruct_Edge_3_from_edges_32)
                 (Int.(+)
                 (Int.(+)
                 (count g_6 f2_12 t2_12 (0)
                 (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_14 g_6))
                 __anonstruct_Graph_4_edges_g_14 (at
                 !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                 !__anonstruct_Edge_3_to_edges_32 'Init) (at
                 !__anonstruct_Edge_3_from_edges_32 'Init))
                 (count g_6 f2_12 t2_12
                 (Int.(-)
                 (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_14 g_6))
                 (1))
                 (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_14 g_6))
                 __anonstruct_Graph_4_edges_g_14
                 !__anonstruct_Edge_3_existent_0_edges_32
                 !__anonstruct_Edge_3_to_edges_32
                 !__anonstruct_Edge_3_from_edges_32))
                 (count g_6 f2_12 t2_12
                 (Int.(+)
                 (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_14 g_6))
                 (1))
                 (Int32.to_int (select __anonstruct_Graph_4_esize_g_14 g_6))
                 __anonstruct_Graph_4_edges_g_14 (at
                 !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                 !__anonstruct_Edge_3_to_edges_32 'Init) (at
                 !__anonstruct_Edge_3_from_edges_32 'Init))))))) } ; () end;
             begin
             any unit
             requires { true } reads {
             __anonstruct_Edge_3_existent_0_edges_32,
             __anonstruct_Edge_3_from_edges_32,
             __anonstruct_Edge_3_to_edges_32, __anonstruct_Graph_4_ecnt_g_14,
             f_2, g_6, t_2 }
             ensures {
               (#"/home/nik/Projects/ver/hw3/mygraph.c" 219 18 172#
               (forall f2_13 : int.
                (forall t2_13 : int.
                 (((not ((=) f2_13 (Int32.to_int f_2))) \/
                  (not ((=) t2_13 (Int32.to_int t_2)))) ->
                  ((=)
                  (count g_6 f2_13 t2_13 (0)
                  (Int32.to_int (select __anonstruct_Graph_4_esize_g_14 g_6))
                  __anonstruct_Graph_4_edges_g_14
                  !__anonstruct_Edge_3_existent_0_edges_32
                  !__anonstruct_Edge_3_to_edges_32
                  !__anonstruct_Edge_3_from_edges_32)
                  (Int.(+)
                  (count g_6 f2_13 t2_13 (0)
                  (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_14 g_6))
                  __anonstruct_Graph_4_edges_g_14 (at
                  !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                  !__anonstruct_Edge_3_to_edges_32 'Init) (at
                  !__anonstruct_Edge_3_from_edges_32 'Init))
                  (count g_6 f2_13 t2_13
                  (Int.(+)
                  (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_14 g_6))
                  (1))
                  (Int32.to_int (select __anonstruct_Graph_4_esize_g_14 g_6))
                  __anonstruct_Graph_4_edges_g_14 (at
                  !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                  !__anonstruct_Edge_3_to_edges_32 'Init) (at
                  !__anonstruct_Edge_3_from_edges_32 'Init)))))))) } ; () end;
             begin
             any unit
             requires { true } reads {
             __anonstruct_Edge_3_existent_0_edges_32,
             __anonstruct_Edge_3_from_edges_32,
             __anonstruct_Edge_3_to_edges_32, __anonstruct_Graph_4_ecnt_g_14,
             f_2, g_6, t_2 }
             ensures {
               (#"/home/nik/Projects/ver/hw3/mygraph.c" 220 18 177#
               (forall f2_14 : int.
                (forall t2_14 : int.
                 (((not ((=) f2_14 (Int32.to_int f_2))) \/
                  (not ((=) t2_14 (Int32.to_int t_2)))) ->
                  ((=)
                  (count g_6 f2_14 t2_14 (0)
                  (Int32.to_int (select __anonstruct_Graph_4_esize_g_14 g_6))
                  __anonstruct_Graph_4_edges_g_14 (at
                  !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                  !__anonstruct_Edge_3_to_edges_32 'Init) (at
                  !__anonstruct_Edge_3_from_edges_32 'Init))
                  (Int.(+)
                  (count g_6 f2_14 t2_14 (0)
                  (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_14 g_6))
                  __anonstruct_Graph_4_edges_g_14 (at
                  !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                  !__anonstruct_Edge_3_to_edges_32 'Init) (at
                  !__anonstruct_Edge_3_from_edges_32 'Init))
                  (count g_6 f2_14 t2_14
                  (Int.(+)
                  (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_14 g_6))
                  (1))
                  (Int32.to_int (select __anonstruct_Graph_4_esize_g_14 g_6))
                  __anonstruct_Graph_4_edges_g_14 (at
                  !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                  !__anonstruct_Edge_3_to_edges_32 'Init) (at
                  !__anonstruct_Edge_3_from_edges_32 'Init)))))))) } ; () end;
             begin
             any unit
             requires { true } reads {
             __anonstruct_Edge_3_existent_0_edges_32,
             __anonstruct_Edge_3_from_edges_32,
             __anonstruct_Edge_3_to_edges_32, __anonstruct_Graph_4_ecnt_g_14,
             f_2, g_6, t_2 }
             ensures {
               (#"/home/nik/Projects/ver/hw3/mygraph.c" 221 18 56#
               ((=)
               (count g_6 (Int32.to_int f_2) (Int32.to_int t_2)
               (Int.(-)
               (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_14 g_6))
               (1))
               (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_14 g_6))
               __anonstruct_Graph_4_edges_g_14
               !__anonstruct_Edge_3_existent_0_edges_32
               !__anonstruct_Edge_3_to_edges_32
               !__anonstruct_Edge_3_from_edges_32) (1))) } ; () end;
             begin
             any unit
             requires { true } reads {
             __anonstruct_Edge_3_existent_0_edges_32,
             __anonstruct_Edge_3_from_edges_32,
             __anonstruct_Edge_3_to_edges_32, __anonstruct_Graph_4_ecnt_g_14,
             f_2, g_6, t_2 }
             ensures {
               (#"/home/nik/Projects/ver/hw3/mygraph.c" 222 18 107#
               (forall f2_15 : int.
                (forall t2_15 : int.
                 (((not ((=) f2_15 (Int32.to_int f_2))) \/
                  (not ((=) t2_15 (Int32.to_int t_2)))) ->
                  ((=)
                  (count g_6 f2_15 t2_15
                  (Int.(-)
                  (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_14 g_6))
                  (1))
                  (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_14 g_6))
                  __anonstruct_Graph_4_edges_g_14
                  !__anonstruct_Edge_3_existent_0_edges_32
                  !__anonstruct_Edge_3_to_edges_32
                  !__anonstruct_Edge_3_from_edges_32) (0)))))) } ; () end;
             (raise (Return_label_exc ())) end end end end end end else ());
      try
       begin
       (i_1_0 :=
        (let _jessie_130 =
        (#"mygraph_c.jc" 945 28 40# "expl:Integer cast"
        (Safe_int32.of_int (0))) in
        begin
        (assert {
        (#"/home/nik/Projects/ver/hw3/mygraph.c" 234 13 14#
        "expl:Pointer index bounds" true) }); _jessie_130 end));
        'LoopEntry:
        begin
        'LoopEntry:
        'Loop_12:
        loop
        invariant { (#"mygraph_c.jc" 947 9 39632# true) }
          variant { (#"/home/nik/Projects/ver/hw3/mygraph.c" 232 21 31#
            (Int.(-)
            (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_14 g_6))
            (Int32.to_int !i_1_0))) }
         begin
         any unit
         requires { true } reads { __anonstruct_Edge_3_existent_0_edges_32,
         __anonstruct_Edge_3_from_edges_32, __anonstruct_Edge_3_to_edges_32,
         __anonstruct_Graph_4_ecnt_g_14, g_6 }
         ensures {
           ((#"/home/nik/Projects/ver/hw3/mygraph.c" 231 23 99#
            (forall k_12 : int.
             ((((<=) (0) k_12) /\
              ((<) k_12
              (Int32.to_int (select __anonstruct_Graph_4_esize_g_14 g_6))))
              ->
              ((Int32.(=)
               (select !__anonstruct_Edge_3_from_edges_32
               (shift (select __anonstruct_Graph_4_edges_g_14 g_6) k_12))
               (select (at !__anonstruct_Edge_3_from_edges_32 'Init)
               (shift (select __anonstruct_Graph_4_edges_g_14 g_6) k_12)))
              /\
              ((Int32.(=)
               (select !__anonstruct_Edge_3_to_edges_32
               (shift (select __anonstruct_Graph_4_edges_g_14 g_6) k_12))
               (select (at !__anonstruct_Edge_3_to_edges_32 'Init)
               (shift (select __anonstruct_Graph_4_edges_g_14 g_6) k_12)))
              /\
              (Int32.(=)
              (select !__anonstruct_Edge_3_existent_0_edges_32
              (shift (select __anonstruct_Graph_4_edges_g_14 g_6) k_12))
              (select (at !__anonstruct_Edge_3_existent_0_edges_32 'Init)
              (shift (select __anonstruct_Graph_4_edges_g_14 g_6) k_12))))))))
           /\
           ((#"/home/nik/Projects/ver/hw3/mygraph.c" 230 23 75#
            (forall k_11 : int.
             ((((<=) (0) k_11) /\ ((<) k_11 (Int32.to_int !i_1_0))) ->
              (not
              ((=)
              (Int32.to_int
              (select !__anonstruct_Edge_3_existent_0_edges_32
              (shift (select __anonstruct_Graph_4_edges_g_14 g_6) k_11)))
              (0))))))
           /\
           ((#"/home/nik/Projects/ver/hw3/mygraph.c" 229 23 79#
            (exists k_10 : int.
             (((<=) (0) k_10) /\
             (((<) k_10
              (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_14 g_6)))
             /\
             ((=)
             (Int32.to_int
             (select !__anonstruct_Edge_3_existent_0_edges_32
             (shift (select __anonstruct_Graph_4_edges_g_14 g_6) k_10))) (0))))))
           /\
           ((#"/home/nik/Projects/ver/hw3/mygraph.c" 228 23 33#
            (not
            (full g_6 __anonstruct_Graph_4_esize_g_14
            __anonstruct_Graph_4_edges_g_14
            !__anonstruct_Edge_3_existent_0_edges_32)))
           /\
           ((#"/home/nik/Projects/ver/hw3/mygraph.c" 227 23 101#
            (forall f2_31 : int.
             (forall t2_31 : int.
              (forall m_10 : int.
               (forall n_9 : int.
                ((=)
                (count g_6 f2_31 t2_31 m_10 n_9
                __anonstruct_Graph_4_edges_g_14
                !__anonstruct_Edge_3_existent_0_edges_32
                !__anonstruct_Edge_3_to_edges_32
                !__anonstruct_Edge_3_from_edges_32)
                (count g_6 f2_31 t2_31 m_10 n_9
                __anonstruct_Graph_4_edges_g_14 (at
                !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                !__anonstruct_Edge_3_to_edges_32 'Init) (at
                !__anonstruct_Edge_3_from_edges_32 'Init))))))))
           /\
           ((#"/home/nik/Projects/ver/hw3/mygraph.c" 226 23 37#
            (graph_valid g_6 __anonstruct_Vertex_2_vertices_31_alloc_table
            __anonstruct_Edge_3_edges_32_alloc_table
            __anonstruct_Graph_4_esize_g_14 !__anonstruct_Graph_4_ecnt_g_14
            __anonstruct_Graph_4_edges_g_14 __anonstruct_Graph_4_vsize_g_14
            __anonstruct_Graph_4_vertices_g_14
            !__anonstruct_Edge_3_existent_0_edges_32
            !__anonstruct_Edge_3_to_edges_32
            !__anonstruct_Edge_3_from_edges_32
            __anonstruct_Vertex_2_existent_vertices_31))
           /\
           (#"/home/nik/Projects/ver/hw3/mygraph.c" 225 23 40#
           (#"/home/nik/Projects/ver/hw3/mygraph.c" 225 23 40#
           ((#"/home/nik/Projects/ver/hw3/mygraph.c" 225 23 29#
            (Int32.(<=) (#"mygraph_c.jc" 949 43 55# "expl:Integer cast"
            (Int32.of_int (0))) !i_1_0))
           /\
           (#"/home/nik/Projects/ver/hw3/mygraph.c" 225 28 40#
           (Int32.(<=) !i_1_0 (select !__anonstruct_Graph_4_ecnt_g_14 g_6))))))))))))
           } ;
          try
           begin
           'LoopCurrent:
           begin
           'LoopCurrent:
           (if
           (#"/home/nik/Projects/ver/hw3/mygraph.c" 234 20 31#
           (Safe_int32.(<)  !i_1_0
            (#"/home/nik/Projects/ver/hw3/mygraph.c" 234 24 31#
            "expl:Pointer dereference"
            (acc  __anonstruct_Graph_4_g_14_alloc_table
             !__anonstruct_Graph_4_ecnt_g_14 g_6 )) )) then ()
           else (raise (Goto_while_0_break_1_0_exc ())));
            (if
            (#"/home/nik/Projects/ver/hw3/mygraph.c" 235 11 32#
            (Bool.notb 
             (Safe_int32.(<>) 
              (#"/home/nik/Projects/ver/hw3/mygraph.c" 235 12 32#
              "expl:Pointer dereference"
              (acc_offset_typesafe  __anonstruct_Edge_3_edges_32_alloc_table
               !__anonstruct_Edge_3_existent_0_edges_32
               (#"/home/nik/Projects/ver/hw3/mygraph.c" 235 12 20#
               "expl:Pointer dereference"
               (acc  __anonstruct_Graph_4_g_14_alloc_table
                __anonstruct_Graph_4_edges_g_14 g_6 ))
               (Safe_int32.to_int  !i_1_0 ) ))
              (#"mygraph_c.jc" 992 37 49# "expl:Integer cast"
              (Safe_int32.of_int (0))) ) ))
            then
             begin
             (let _jessie_125 =
             (let _jessie_124 = f_2 in
             begin
             (assert {
             (#"/home/nik/Projects/ver/hw3/mygraph.c" 236 12 32#
             "expl:Pointer index bounds" true) }); _jessie_124 end) in
             (let _jessie_126 =
             (#"/home/nik/Projects/ver/hw3/mygraph.c" 236 12 20#
             "expl:Pointer dereference"
             (acc  __anonstruct_Graph_4_g_14_alloc_table
              __anonstruct_Graph_4_edges_g_14 g_6 )) in
             (let _jessie_127 = (Safe_int32.to_int  !i_1_0 ) in
             (let _jessie_128 = (shift_typesafe  _jessie_126 _jessie_127 ) in
             (#"/home/nik/Projects/ver/hw3/mygraph.c" 236 12 32#
             "expl:Pointer dereference"
             (upd_offset_typesafe  __anonstruct_Edge_3_edges_32_alloc_table
              __anonstruct_Edge_3_from_edges_32 _jessie_126 _jessie_127
              _jessie_125 ))))));
              begin
              (let _jessie_120 =
              (let _jessie_119 = t_2 in
              begin
              (assert {
              (#"/home/nik/Projects/ver/hw3/mygraph.c" 237 12 30#
              "expl:Pointer index bounds" true) }); _jessie_119 end) in
              (let _jessie_121 =
              (#"/home/nik/Projects/ver/hw3/mygraph.c" 237 12 20#
              "expl:Pointer dereference"
              (acc  __anonstruct_Graph_4_g_14_alloc_table
               __anonstruct_Graph_4_edges_g_14 g_6 )) in
              (let _jessie_122 = (Safe_int32.to_int  !i_1_0 ) in
              (let _jessie_123 = (shift_typesafe  _jessie_121 _jessie_122 )
              in
              (#"/home/nik/Projects/ver/hw3/mygraph.c" 237 12 30#
              "expl:Pointer dereference"
              (upd_offset_typesafe  __anonstruct_Edge_3_edges_32_alloc_table
               __anonstruct_Edge_3_to_edges_32 _jessie_121 _jessie_122
               _jessie_120 ))))));
               begin
               (let _jessie_115 =
               (let _jessie_114 =
               (#"mygraph_c.jc" 998 76 88# "expl:Integer cast"
               (Safe_int32.of_int (1))) in
               begin
               (assert {
               (#"/home/nik/Projects/ver/hw3/mygraph.c" 238 9 33#
               "expl:Pointer index bounds" true) }); _jessie_114 end) in
               (let _jessie_116 =
               (#"/home/nik/Projects/ver/hw3/mygraph.c" 238 9 17#
               "expl:Pointer dereference"
               (acc  __anonstruct_Graph_4_g_14_alloc_table
                __anonstruct_Graph_4_edges_g_14 g_6 )) in
               (let _jessie_117 = (Safe_int32.to_int  !i_1_0 ) in
               (let _jessie_118 = (shift_typesafe  _jessie_116 _jessie_117 )
               in
               (#"/home/nik/Projects/ver/hw3/mygraph.c" 238 9 33#
               "expl:Pointer dereference"
               (upd_offset_typesafe  __anonstruct_Edge_3_edges_32_alloc_table
                __anonstruct_Edge_3_existent_0_edges_32 _jessie_116
                _jessie_117 _jessie_115 ))))));
                begin
                (r_0 :=
                 (let _jessie_109 = !i_1_0 in
                 begin
                 (assert {
                 (#"/home/nik/Projects/ver/hw3/mygraph.c" 239 32 33#
                 "expl:Pointer index bounds" true) }); _jessie_109 end));
                 try
                  begin
                  (k :=
                   (let _jessie_111 =
                   (#"mygraph_c.jc" 1001 39 51# "expl:Integer cast"
                   (Safe_int32.of_int (0))) in
                   begin
                   (assert {
                   (#"/home/nik/Projects/ver/hw3/mygraph.c" 251 21 22#
                   "expl:Pointer index bounds" true) }); _jessie_111 end));
                   'LoopEntry:
                   begin
                   'LoopEntry:
                   'Loop_13:
                   loop
                   invariant { (#"mygraph_c.jc" 1003 24 8268# true) }
                     variant {
                       (#"/home/nik/Projects/ver/hw3/mygraph.c" 249 29 34#
                       (Int.(-) (Int32.to_int !r_0) (Int32.to_int !k))) }
                    begin
                    any unit
                    requires { true } reads {
                    __anonstruct_Edge_3_existent_0_edges_32,
                    __anonstruct_Edge_3_from_edges_32,
                    __anonstruct_Edge_3_to_edges_32,
                    __anonstruct_Graph_4_ecnt_g_14, g_6 }
                    ensures {
                      ((#"/home/nik/Projects/ver/hw3/mygraph.c" 248 31 45#
                       (graph_valid g_6
                       __anonstruct_Vertex_2_vertices_31_alloc_table
                       __anonstruct_Edge_3_edges_32_alloc_table
                       __anonstruct_Graph_4_esize_g_14
                       !__anonstruct_Graph_4_ecnt_g_14
                       __anonstruct_Graph_4_edges_g_14
                       __anonstruct_Graph_4_vsize_g_14
                       __anonstruct_Graph_4_vertices_g_14
                       !__anonstruct_Edge_3_existent_0_edges_32
                       !__anonstruct_Edge_3_to_edges_32
                       !__anonstruct_Edge_3_from_edges_32
                       __anonstruct_Vertex_2_existent_vertices_31))
                      /\
                      ((#"/home/nik/Projects/ver/hw3/mygraph.c" 247 32 105#
                       (forall f2_19 : int.
                        (forall t2_19 : int.
                         ((=)
                         (count g_6 f2_19 t2_19 (0) (Int32.to_int !k)
                         __anonstruct_Graph_4_edges_g_14
                         !__anonstruct_Edge_3_existent_0_edges_32
                         !__anonstruct_Edge_3_to_edges_32
                         !__anonstruct_Edge_3_from_edges_32)
                         (count g_6 f2_19 t2_19 (0) (Int32.to_int !k)
                         __anonstruct_Graph_4_edges_g_14 (at
                         !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                         !__anonstruct_Edge_3_to_edges_32 'Init) (at
                         !__anonstruct_Edge_3_from_edges_32 'Init))))))
                      /\
                      ((#"/home/nik/Projects/ver/hw3/mygraph.c" 246 32 156#
                       (forall f2_18 : int.
                        (forall t2_18 : int.
                         (((<=) (Int.(+) (Int32.to_int !k) (1))
                          (Int32.to_int !r_0)) ->
                          ((=)
                          (count g_6 f2_18 t2_18 (0)
                          (Int.(+) (Int32.to_int !k) (1))
                          __anonstruct_Graph_4_edges_g_14 (at
                          !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                          !__anonstruct_Edge_3_to_edges_32 'Init) (at
                          !__anonstruct_Edge_3_from_edges_32 'Init))
                          (Int.(+)
                          (count g_6 f2_18 t2_18 (0) (Int32.to_int !k)
                          __anonstruct_Graph_4_edges_g_14 (at
                          !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                          !__anonstruct_Edge_3_to_edges_32 'Init) (at
                          !__anonstruct_Edge_3_from_edges_32 'Init))
                          (count g_6 f2_18 t2_18 (Int32.to_int !k)
                          (Int.(+) (Int32.to_int !k) (1))
                          __anonstruct_Graph_4_edges_g_14 (at
                          !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                          !__anonstruct_Edge_3_to_edges_32 'Init) (at
                          !__anonstruct_Edge_3_from_edges_32 'Init))))))))
                      /\
                      ((#"/home/nik/Projects/ver/hw3/mygraph.c" 245 32 123#
                       (forall f2_17 : int.
                        (forall t2_17 : int.
                         (((<=) (Int.(+) (Int32.to_int !k) (1))
                          (Int32.to_int !r_0)) ->
                          ((=)
                          (count g_6 f2_17 t2_17 (Int32.to_int !k)
                          (Int.(+) (Int32.to_int !k) (1))
                          __anonstruct_Graph_4_edges_g_14
                          !__anonstruct_Edge_3_existent_0_edges_32
                          !__anonstruct_Edge_3_to_edges_32
                          !__anonstruct_Edge_3_from_edges_32)
                          (count g_6 f2_17 t2_17 (Int32.to_int !k)
                          (Int.(+) (Int32.to_int !k) (1))
                          __anonstruct_Graph_4_edges_g_14 (at
                          !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                          !__anonstruct_Edge_3_to_edges_32 'Init) (at
                          !__anonstruct_Edge_3_from_edges_32 'Init)))))))
                      /\
                      ((#"/home/nik/Projects/ver/hw3/mygraph.c" 244 32 89#
                       ((Int32.(<) !k !r_0) ->
                        ((Int32.(=)
                         (select !__anonstruct_Edge_3_from_edges_32
                         (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                         (Int32.to_int !k)))
                         (select (at !__anonstruct_Edge_3_from_edges_32
                         'Init)
                         (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                         (Int32.to_int !k))))
                        /\
                        ((Int32.(=)
                         (select !__anonstruct_Edge_3_to_edges_32
                         (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                         (Int32.to_int !k)))
                         (select (at !__anonstruct_Edge_3_to_edges_32 'Init)
                         (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                         (Int32.to_int !k))))
                        /\
                        (Int32.(=)
                        (select !__anonstruct_Edge_3_existent_0_edges_32
                        (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                        (Int32.to_int !k)))
                        (select (at !__anonstruct_Edge_3_existent_0_edges_32
                        'Init)
                        (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                        (Int32.to_int !k))))))))
                      /\
                      ((#"/home/nik/Projects/ver/hw3/mygraph.c" 243 32 128#
                       (forall p_0 : int.
                        ((((<=) (0) p_0) /\
                         (((<) p_0
                          (Int32.to_int
                          (select __anonstruct_Graph_4_esize_g_14 g_6)))
                         /\ (not ((=) p_0 (Int32.to_int !r_0))))) ->
                         ((Int32.(=)
                          (select !__anonstruct_Edge_3_from_edges_32
                          (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                          p_0))
                          (select (at !__anonstruct_Edge_3_from_edges_32
                          'Init)
                          (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                          p_0)))
                         /\
                         ((Int32.(=)
                          (select !__anonstruct_Edge_3_to_edges_32
                          (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                          p_0))
                          (select (at !__anonstruct_Edge_3_to_edges_32 'Init)
                          (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                          p_0)))
                         /\
                         (Int32.(=)
                         (select !__anonstruct_Edge_3_existent_0_edges_32
                         (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                         p_0))
                         (select (at !__anonstruct_Edge_3_existent_0_edges_32
                         'Init)
                         (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                         p_0))))))))
                      /\
                      ((#"/home/nik/Projects/ver/hw3/mygraph.c" 242 32 141#
                       (forall f2_16 : int.
                        (forall t2_16 : int.
                         (((<=) (Int.(+) (Int32.to_int !k) (1))
                          (Int32.to_int !r_0)) ->
                          ((=)
                          (count g_6 f2_16 t2_16 (0)
                          (Int.(+) (Int32.to_int !k) (1))
                          __anonstruct_Graph_4_edges_g_14
                          !__anonstruct_Edge_3_existent_0_edges_32
                          !__anonstruct_Edge_3_to_edges_32
                          !__anonstruct_Edge_3_from_edges_32)
                          (Int.(+)
                          (count g_6 f2_16 t2_16 (0) (Int32.to_int !k)
                          __anonstruct_Graph_4_edges_g_14
                          !__anonstruct_Edge_3_existent_0_edges_32
                          !__anonstruct_Edge_3_to_edges_32
                          !__anonstruct_Edge_3_from_edges_32)
                          (count g_6 f2_16 t2_16 (Int32.to_int !k)
                          (Int.(+) (Int32.to_int !k) (1))
                          __anonstruct_Graph_4_edges_g_14
                          !__anonstruct_Edge_3_existent_0_edges_32
                          !__anonstruct_Edge_3_to_edges_32
                          !__anonstruct_Edge_3_from_edges_32)))))))
                      /\
                      ((#"/home/nik/Projects/ver/hw3/mygraph.c" 241 31 118#
                       (forall p : int.
                        ((((<=) (0) p) /\
                         (((<) p
                          (Int32.to_int
                          (select __anonstruct_Graph_4_esize_g_14 g_6)))
                         /\ (not ((=) p (Int32.to_int !i_1_0))))) ->
                         ((Int32.(=)
                          (select !__anonstruct_Edge_3_from_edges_32
                          (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                          p))
                          (select (at !__anonstruct_Edge_3_from_edges_32
                          'Init)
                          (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                          p)))
                         /\
                         ((Int32.(=)
                          (select !__anonstruct_Edge_3_to_edges_32
                          (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                          p))
                          (select (at !__anonstruct_Edge_3_to_edges_32 'Init)
                          (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                          p)))
                         /\
                         (Int32.(=)
                         (select !__anonstruct_Edge_3_existent_0_edges_32
                         (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                         p))
                         (select (at !__anonstruct_Edge_3_existent_0_edges_32
                         'Init)
                         (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                         p))))))))
                      /\
                      (#"/home/nik/Projects/ver/hw3/mygraph.c" 240 30 41#
                      (#"/home/nik/Projects/ver/hw3/mygraph.c" 240 30 41#
                      ((#"/home/nik/Projects/ver/hw3/mygraph.c" 240 30 36#
                       (Int32.(<=) (#"mygraph_c.jc" 1005 58 70#
                       "expl:Integer cast" (Int32.of_int (0))) !k))
                      /\
                      (#"/home/nik/Projects/ver/hw3/mygraph.c" 240 35 41#
                      (Int32.(<=) !k !r_0))))))))))))) } ;
                     try
                      begin
                      'LoopCurrent:
                      begin
                      'LoopCurrent:
                      (if
                      (#"/home/nik/Projects/ver/hw3/mygraph.c" 251 28 33#
                      (Safe_int32.(<)  !k !r_0 )) then ()
                      else (raise (Goto_while_1_break_exc ())));
                       (k :=
                        (let _jessie_110 =
                        (Safe_int32.(+)  !k
                         (#"mygraph_c.jc" 1115 68 80# "expl:Integer cast"
                         (Safe_int32.of_int (1))) ) in
                        begin
                        (assert {
                        (#"/home/nik/Projects/ver/hw3/mygraph.c" 251 35 38#
                        "expl:Pointer index bounds" true) }); _jessie_110 end))
                      end; (raise (Loop_continue_exc ())) end with
                      Loop_continue_exc _jessie_18 -> () end end end;
                    (raise (Goto_while_1_break_exc ())) end end with
                  Goto_while_1_break_exc _jessie_9 ->
                  'While_1_break: 'While_1_break: () end;
                 try
                  begin
                  (k_0 :=
                   (let _jessie_113 =
                   (Safe_int32.(+)  !r_0
                    (#"mygraph_c.jc" 1122 64 76# "expl:Integer cast"
                    (Safe_int32.of_int (1))) ) in
                   begin
                   (assert {
                   (#"/home/nik/Projects/ver/hw3/mygraph.c" 266 21 22#
                   "expl:Pointer index bounds" true) }); _jessie_113 end));
                   'LoopEntry:
                   begin
                   'LoopEntry:
                   'Loop_14:
                   loop
                   invariant { (#"mygraph_c.jc" 1124 24 12061# true) }
                     variant {
                       (#"/home/nik/Projects/ver/hw3/mygraph.c" 263 24 35#
                       (Int.(-)
                       (Int32.to_int
                       (select __anonstruct_Graph_4_esize_g_14 g_6))
                       (Int32.to_int !k_0))) }
                    begin
                    any unit
                    requires { true } reads {
                    __anonstruct_Edge_3_existent_0_edges_32,
                    __anonstruct_Edge_3_from_edges_32,
                    __anonstruct_Edge_3_to_edges_32,
                    __anonstruct_Graph_4_ecnt_g_14, g_6 }
                    ensures {
                      ((#"/home/nik/Projects/ver/hw3/mygraph.c" 260 27 316#
                       (forall f2_22 : int.
                        (forall t2_22 : int.
                         ((((<) (Int.(+) (Int32.to_int !r_0) (1))
                           (Int32.to_int !k_0))
                          /\
                          (Int32.(<=) !k_0
                          (select __anonstruct_Graph_4_esize_g_14 g_6))) ->
                          (((=)
                           (count g_6 f2_22 t2_22
                           (Int.(+) (Int32.to_int !r_0) (1))
                           (Int32.to_int !k_0)
                           __anonstruct_Graph_4_edges_g_14
                           !__anonstruct_Edge_3_existent_0_edges_32
                           !__anonstruct_Edge_3_to_edges_32
                           !__anonstruct_Edge_3_from_edges_32)
                           (Int.(+)
                           (count g_6 f2_22 t2_22
                           (Int.(+) (Int32.to_int !r_0) (1))
                           (Int.(-) (Int32.to_int !k_0) (1))
                           __anonstruct_Graph_4_edges_g_14
                           !__anonstruct_Edge_3_existent_0_edges_32
                           !__anonstruct_Edge_3_to_edges_32
                           !__anonstruct_Edge_3_from_edges_32)
                           (count g_6 f2_22 t2_22
                           (Int.(-) (Int32.to_int !k_0) (1))
                           (Int32.to_int !k_0)
                           __anonstruct_Graph_4_edges_g_14
                           !__anonstruct_Edge_3_existent_0_edges_32
                           !__anonstruct_Edge_3_to_edges_32
                           !__anonstruct_Edge_3_from_edges_32)))
                          /\
                          (((=)
                           (Int.(+)
                           (count g_6 f2_22 t2_22
                           (Int.(+) (Int32.to_int !r_0) (1))
                           (Int.(-) (Int32.to_int !k_0) (1))
                           __anonstruct_Graph_4_edges_g_14
                           !__anonstruct_Edge_3_existent_0_edges_32
                           !__anonstruct_Edge_3_to_edges_32
                           !__anonstruct_Edge_3_from_edges_32)
                           (count g_6 f2_22 t2_22
                           (Int.(-) (Int32.to_int !k_0) (1))
                           (Int32.to_int !k_0)
                           __anonstruct_Graph_4_edges_g_14
                           !__anonstruct_Edge_3_existent_0_edges_32
                           !__anonstruct_Edge_3_to_edges_32
                           !__anonstruct_Edge_3_from_edges_32))
                           (Int.(+)
                           (count g_6 f2_22 t2_22
                           (Int.(+) (Int32.to_int !r_0) (1))
                           (Int.(-) (Int32.to_int !k_0) (1))
                           __anonstruct_Graph_4_edges_g_14
                           !__anonstruct_Edge_3_existent_0_edges_32
                           !__anonstruct_Edge_3_to_edges_32
                           !__anonstruct_Edge_3_from_edges_32)
                           (count g_6 f2_22 t2_22
                           (Int.(-) (Int32.to_int !k_0) (1))
                           (Int32.to_int !k_0)
                           __anonstruct_Graph_4_edges_g_14 (at
                           !__anonstruct_Edge_3_existent_0_edges_32 'Init)
                           (at !__anonstruct_Edge_3_to_edges_32 'Init) (at
                           !__anonstruct_Edge_3_from_edges_32 'Init))))
                          /\
                          (((=)
                           (Int.(+)
                           (count g_6 f2_22 t2_22
                           (Int.(+) (Int32.to_int !r_0) (1))
                           (Int.(-) (Int32.to_int !k_0) (1))
                           __anonstruct_Graph_4_edges_g_14
                           !__anonstruct_Edge_3_existent_0_edges_32
                           !__anonstruct_Edge_3_to_edges_32
                           !__anonstruct_Edge_3_from_edges_32)
                           (count g_6 f2_22 t2_22
                           (Int.(-) (Int32.to_int !k_0) (1))
                           (Int32.to_int !k_0)
                           __anonstruct_Graph_4_edges_g_14 (at
                           !__anonstruct_Edge_3_existent_0_edges_32 'Init)
                           (at !__anonstruct_Edge_3_to_edges_32 'Init) (at
                           !__anonstruct_Edge_3_from_edges_32 'Init)))
                           (Int.(+)
                           (count g_6 f2_22 t2_22
                           (Int.(+) (Int32.to_int !r_0) (1))
                           (Int.(-) (Int32.to_int !k_0) (1))
                           __anonstruct_Graph_4_edges_g_14 (at
                           !__anonstruct_Edge_3_existent_0_edges_32 'Init)
                           (at !__anonstruct_Edge_3_to_edges_32 'Init) (at
                           !__anonstruct_Edge_3_from_edges_32 'Init))
                           (count g_6 f2_22 t2_22
                           (Int.(-) (Int32.to_int !k_0) (1))
                           (Int32.to_int !k_0)
                           __anonstruct_Graph_4_edges_g_14 (at
                           !__anonstruct_Edge_3_existent_0_edges_32 'Init)
                           (at !__anonstruct_Edge_3_to_edges_32 'Init) (at
                           !__anonstruct_Edge_3_from_edges_32 'Init))))
                          /\
                          ((=)
                          (Int.(+)
                          (count g_6 f2_22 t2_22
                          (Int.(+) (Int32.to_int !r_0) (1))
                          (Int.(-) (Int32.to_int !k_0) (1))
                          __anonstruct_Graph_4_edges_g_14 (at
                          !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                          !__anonstruct_Edge_3_to_edges_32 'Init) (at
                          !__anonstruct_Edge_3_from_edges_32 'Init))
                          (count g_6 f2_22 t2_22
                          (Int.(-) (Int32.to_int !k_0) (1))
                          (Int32.to_int !k_0) __anonstruct_Graph_4_edges_g_14
                          (at !__anonstruct_Edge_3_existent_0_edges_32 'Init)
                          (at !__anonstruct_Edge_3_to_edges_32 'Init) (at
                          !__anonstruct_Edge_3_from_edges_32 'Init)))
                          (count g_6 f2_22 t2_22
                          (Int.(+) (Int32.to_int !r_0) (1))
                          (Int32.to_int !k_0) __anonstruct_Graph_4_edges_g_14
                          (at !__anonstruct_Edge_3_existent_0_edges_32 'Init)
                          (at !__anonstruct_Edge_3_to_edges_32 'Init) (at
                          !__anonstruct_Edge_3_from_edges_32 'Init))))))))))
                      /\
                      ((#"/home/nik/Projects/ver/hw3/mygraph.c" 259 27 126#
                       (forall f2_21 : int.
                        (forall t2_21 : int.
                         (((<=) (Int.(+) (Int32.to_int !k_0) (1))
                          (Int32.to_int
                          (select __anonstruct_Graph_4_esize_g_14 g_6))) ->
                          ((=)
                          (count g_6 f2_21 t2_21 (Int32.to_int !k_0)
                          (Int.(+) (Int32.to_int !k_0) (1))
                          __anonstruct_Graph_4_edges_g_14
                          !__anonstruct_Edge_3_existent_0_edges_32
                          !__anonstruct_Edge_3_to_edges_32
                          !__anonstruct_Edge_3_from_edges_32)
                          (count g_6 f2_21 t2_21 (Int32.to_int !k_0)
                          (Int.(+) (Int32.to_int !k_0) (1))
                          __anonstruct_Graph_4_edges_g_14 (at
                          !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                          !__anonstruct_Edge_3_to_edges_32 'Init) (at
                          !__anonstruct_Edge_3_from_edges_32 'Init)))))))
                      /\
                      ((#"/home/nik/Projects/ver/hw3/mygraph.c" 258 27 91#
                       ((Int32.(<) !k_0
                        (select __anonstruct_Graph_4_esize_g_14 g_6)) ->
                        ((Int32.(=)
                         (select !__anonstruct_Edge_3_from_edges_32
                         (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                         (Int32.to_int !k_0)))
                         (select (at !__anonstruct_Edge_3_from_edges_32
                         'Init)
                         (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                         (Int32.to_int !k_0))))
                        /\
                        ((Int32.(=)
                         (select !__anonstruct_Edge_3_to_edges_32
                         (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                         (Int32.to_int !k_0)))
                         (select (at !__anonstruct_Edge_3_to_edges_32 'Init)
                         (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                         (Int32.to_int !k_0))))
                        /\
                        (Int32.(=)
                        (select !__anonstruct_Edge_3_existent_0_edges_32
                        (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                        (Int32.to_int !k_0)))
                        (select (at !__anonstruct_Edge_3_existent_0_edges_32
                        'Init)
                        (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                        (Int32.to_int !k_0))))))))
                      /\
                      ((#"/home/nik/Projects/ver/hw3/mygraph.c" 257 27 157#
                       (forall f2_20 : int.
                        (forall t2_20 : int.
                         ((((<=) (Int.(+) (Int32.to_int !r_0) (1))
                           (Int.(+) (Int32.to_int !k_0) (1)))
                          /\
                          ((<=) (Int.(+) (Int32.to_int !k_0) (1))
                          (Int32.to_int
                          (select __anonstruct_Graph_4_esize_g_14 g_6)))) ->
                          ((=)
                          (count g_6 f2_20 t2_20
                          (Int.(+) (Int32.to_int !r_0) (1))
                          (Int.(+) (Int32.to_int !k_0) (1))
                          __anonstruct_Graph_4_edges_g_14
                          !__anonstruct_Edge_3_existent_0_edges_32
                          !__anonstruct_Edge_3_to_edges_32
                          !__anonstruct_Edge_3_from_edges_32)
                          (Int.(+)
                          (count g_6 f2_20 t2_20
                          (Int.(+) (Int32.to_int !r_0) (1))
                          (Int32.to_int !k_0) __anonstruct_Graph_4_edges_g_14
                          !__anonstruct_Edge_3_existent_0_edges_32
                          !__anonstruct_Edge_3_to_edges_32
                          !__anonstruct_Edge_3_from_edges_32)
                          (count g_6 f2_20 t2_20 (Int32.to_int !k_0)
                          (Int.(+) (Int32.to_int !k_0) (1))
                          __anonstruct_Graph_4_edges_g_14
                          !__anonstruct_Edge_3_existent_0_edges_32
                          !__anonstruct_Edge_3_to_edges_32
                          !__anonstruct_Edge_3_from_edges_32)))))))
                      /\
                      ((#"/home/nik/Projects/ver/hw3/mygraph.c" 256 26 103#
                       (forall p_1 : int.
                        ((((<) (Int32.to_int !r_0) p_1) /\
                         ((<) p_1
                         (Int32.to_int
                         (select __anonstruct_Graph_4_esize_g_14 g_6)))) ->
                         ((Int32.(=)
                          (select !__anonstruct_Edge_3_from_edges_32
                          (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                          p_1))
                          (select (at !__anonstruct_Edge_3_from_edges_32
                          'Init)
                          (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                          p_1)))
                         /\
                         ((Int32.(=)
                          (select !__anonstruct_Edge_3_to_edges_32
                          (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                          p_1))
                          (select (at !__anonstruct_Edge_3_to_edges_32 'Init)
                          (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                          p_1)))
                         /\
                         (Int32.(=)
                         (select !__anonstruct_Edge_3_existent_0_edges_32
                         (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                         p_1))
                         (select (at !__anonstruct_Edge_3_existent_0_edges_32
                         'Init)
                         (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                         p_1))))))))
                      /\
                      ((#"/home/nik/Projects/ver/hw3/mygraph.c" 255 26 40#
                       (graph_valid g_6
                       __anonstruct_Vertex_2_vertices_31_alloc_table
                       __anonstruct_Edge_3_edges_32_alloc_table
                       __anonstruct_Graph_4_esize_g_14
                       !__anonstruct_Graph_4_ecnt_g_14
                       __anonstruct_Graph_4_edges_g_14
                       __anonstruct_Graph_4_vsize_g_14
                       __anonstruct_Graph_4_vertices_g_14
                       !__anonstruct_Edge_3_existent_0_edges_32
                       !__anonstruct_Edge_3_to_edges_32
                       !__anonstruct_Edge_3_from_edges_32
                       __anonstruct_Vertex_2_existent_vertices_31))
                      /\
                      (#"/home/nik/Projects/ver/hw3/mygraph.c" 254 30 50#
                      (#"/home/nik/Projects/ver/hw3/mygraph.c" 254 30 50#
                      ((#"/home/nik/Projects/ver/hw3/mygraph.c" 254 30 38#
                       ((<=) (Int.(+) (Int32.to_int !r_0) (1))
                       (Int32.to_int !k_0)))
                      /\
                      (#"/home/nik/Projects/ver/hw3/mygraph.c" 254 37 50#
                      (Int32.(<=) !k_0
                      (select __anonstruct_Graph_4_esize_g_14 g_6))))))))))))
                      } ;
                     try
                      begin
                      'LoopCurrent:
                      begin
                      'LoopCurrent:
                      (if
                      (#"/home/nik/Projects/ver/hw3/mygraph.c" 266 32 44#
                      (Safe_int32.(<)  !k_0
                       (#"/home/nik/Projects/ver/hw3/mygraph.c" 266 36 44#
                       "expl:Pointer dereference"
                       (acc  __anonstruct_Graph_4_g_14_alloc_table
                        __anonstruct_Graph_4_esize_g_14 g_6 )) )) then ()
                      else (raise (Goto_while_1_break_0_exc ())));
                       (k_0 :=
                        (let _jessie_112 =
                        (Safe_int32.(+)  !k_0
                         (#"mygraph_c.jc" 1285 68 80# "expl:Integer cast"
                         (Safe_int32.of_int (1))) ) in
                        begin
                        (assert {
                        (#"/home/nik/Projects/ver/hw3/mygraph.c" 266 46 49#
                        "expl:Pointer index bounds" true) }); _jessie_112 end))
                      end; (raise (Loop_continue_exc ())) end with
                      Loop_continue_exc _jessie_20 -> () end end end;
                    (raise (Goto_while_1_break_0_exc ())) end end with
                  Goto_while_1_break_0_exc _jessie_10 ->
                  'While_1_break_0: 'While_1_break_0: () end;
                 begin
                 any unit
                 requires { true } reads {
                 __anonstruct_Edge_3_existent_0_edges_32,
                 __anonstruct_Edge_3_from_edges_32,
                 __anonstruct_Edge_3_to_edges_32, g_6 }
                 ensures {
                   (#"/home/nik/Projects/ver/hw3/mygraph.c" 270 11 83#
                   (forall f2_23 : int.
                    (forall t2_23 : int.
                     ((=)
                     (count g_6 f2_23 t2_23 (0) (Int32.to_int !i_1_0)
                     __anonstruct_Graph_4_edges_g_14
                     !__anonstruct_Edge_3_existent_0_edges_32
                     !__anonstruct_Edge_3_to_edges_32
                     !__anonstruct_Edge_3_from_edges_32)
                     (count g_6 f2_23 t2_23 (0) (Int32.to_int !i_1_0)
                     __anonstruct_Graph_4_edges_g_14 (at
                     !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                     !__anonstruct_Edge_3_to_edges_32 'Init) (at
                     !__anonstruct_Edge_3_from_edges_32 'Init)))))) } ; ()
                 end;
                 begin
                 any unit
                 requires { true } reads {
                 __anonstruct_Edge_3_existent_0_edges_32,
                 __anonstruct_Edge_3_from_edges_32,
                 __anonstruct_Edge_3_to_edges_32, g_6 }
                 ensures {
                   (#"/home/nik/Projects/ver/hw3/mygraph.c" 271 11 102#
                   (forall f2_24 : int.
                    (forall t2_24 : int.
                     ((=)
                     (count g_6 f2_24 t2_24
                     (Int.(+) (Int32.to_int !i_1_0) (1))
                     (Int32.to_int
                     (select __anonstruct_Graph_4_esize_g_14 g_6))
                     __anonstruct_Graph_4_edges_g_14
                     !__anonstruct_Edge_3_existent_0_edges_32
                     !__anonstruct_Edge_3_to_edges_32
                     !__anonstruct_Edge_3_from_edges_32)
                     (count g_6 f2_24 t2_24
                     (Int.(+) (Int32.to_int !i_1_0) (1))
                     (Int32.to_int
                     (select __anonstruct_Graph_4_esize_g_14 g_6))
                     __anonstruct_Graph_4_edges_g_14 (at
                     !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                     !__anonstruct_Edge_3_to_edges_32 'Init) (at
                     !__anonstruct_Edge_3_from_edges_32 'Init)))))) } ; ()
                 end;
                 begin
                 any unit
                 requires { true } reads {
                 __anonstruct_Edge_3_existent_0_edges_32,
                 __anonstruct_Edge_3_from_edges_32,
                 __anonstruct_Edge_3_to_edges_32, g_6 }
                 ensures {
                   (#"/home/nik/Projects/ver/hw3/mygraph.c" 272 11 143#
                   (forall f2_25 : int.
                    (forall t2_25 : int.
                     ((=)
                     (count g_6 f2_25 t2_25 (0)
                     (Int32.to_int
                     (select __anonstruct_Graph_4_esize_g_14 g_6))
                     __anonstruct_Graph_4_edges_g_14
                     !__anonstruct_Edge_3_existent_0_edges_32
                     !__anonstruct_Edge_3_to_edges_32
                     !__anonstruct_Edge_3_from_edges_32)
                     (Int.(+)
                     (Int.(+)
                     (count g_6 f2_25 t2_25 (0) (Int32.to_int !i_1_0)
                     __anonstruct_Graph_4_edges_g_14
                     !__anonstruct_Edge_3_existent_0_edges_32
                     !__anonstruct_Edge_3_to_edges_32
                     !__anonstruct_Edge_3_from_edges_32)
                     (count g_6 f2_25 t2_25 (Int32.to_int !i_1_0)
                     (Int.(+) (Int32.to_int !i_1_0) (1))
                     __anonstruct_Graph_4_edges_g_14
                     !__anonstruct_Edge_3_existent_0_edges_32
                     !__anonstruct_Edge_3_to_edges_32
                     !__anonstruct_Edge_3_from_edges_32))
                     (count g_6 f2_25 t2_25
                     (Int.(+) (Int32.to_int !i_1_0) (1))
                     (Int32.to_int
                     (select __anonstruct_Graph_4_esize_g_14 g_6))
                     __anonstruct_Graph_4_edges_g_14
                     !__anonstruct_Edge_3_existent_0_edges_32
                     !__anonstruct_Edge_3_to_edges_32
                     !__anonstruct_Edge_3_from_edges_32)))))) } ; () end;
                 begin
                 any unit
                 requires { true } reads {
                 __anonstruct_Edge_3_existent_0_edges_32,
                 __anonstruct_Edge_3_from_edges_32,
                 __anonstruct_Edge_3_to_edges_32, g_6 }
                 ensures {
                   (#"/home/nik/Projects/ver/hw3/mygraph.c" 273 11 151#
                   (forall f2_26 : int.
                    (forall t2_26 : int.
                     ((=)
                     (count g_6 f2_26 t2_26 (0)
                     (Int32.to_int
                     (select __anonstruct_Graph_4_esize_g_14 g_6))
                     __anonstruct_Graph_4_edges_g_14
                     !__anonstruct_Edge_3_existent_0_edges_32
                     !__anonstruct_Edge_3_to_edges_32
                     !__anonstruct_Edge_3_from_edges_32)
                     (Int.(+)
                     (Int.(+)
                     (count g_6 f2_26 t2_26 (0) (Int32.to_int !i_1_0)
                     __anonstruct_Graph_4_edges_g_14 (at
                     !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                     !__anonstruct_Edge_3_to_edges_32 'Init) (at
                     !__anonstruct_Edge_3_from_edges_32 'Init))
                     (count g_6 f2_26 t2_26 (Int32.to_int !i_1_0)
                     (Int.(+) (Int32.to_int !i_1_0) (1))
                     __anonstruct_Graph_4_edges_g_14
                     !__anonstruct_Edge_3_existent_0_edges_32
                     !__anonstruct_Edge_3_to_edges_32
                     !__anonstruct_Edge_3_from_edges_32))
                     (count g_6 f2_26 t2_26
                     (Int.(+) (Int32.to_int !i_1_0) (1))
                     (Int32.to_int
                     (select __anonstruct_Graph_4_esize_g_14 g_6))
                     __anonstruct_Graph_4_edges_g_14 (at
                     !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                     !__anonstruct_Edge_3_to_edges_32 'Init) (at
                     !__anonstruct_Edge_3_from_edges_32 'Init))))))) } ; ()
                 end;
                 begin
                 any unit
                 requires { true } reads {
                 __anonstruct_Edge_3_existent_0_edges_32,
                 __anonstruct_Edge_3_from_edges_32,
                 __anonstruct_Edge_3_to_edges_32, f_2, g_6, t_2 }
                 ensures {
                   (#"/home/nik/Projects/ver/hw3/mygraph.c" 274 10 152#
                   (forall f2_27 : int.
                    (forall t2_27 : int.
                     (((not ((=) f2_27 (Int32.to_int f_2))) \/
                      (not ((=) t2_27 (Int32.to_int t_2)))) ->
                      ((=)
                      (count g_6 f2_27 t2_27 (0)
                      (Int32.to_int
                      (select __anonstruct_Graph_4_esize_g_14 g_6))
                      __anonstruct_Graph_4_edges_g_14
                      !__anonstruct_Edge_3_existent_0_edges_32
                      !__anonstruct_Edge_3_to_edges_32
                      !__anonstruct_Edge_3_from_edges_32)
                      (Int.(+)
                      (count g_6 f2_27 t2_27 (0) (Int32.to_int !i_1_0)
                      __anonstruct_Graph_4_edges_g_14 (at
                      !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                      !__anonstruct_Edge_3_to_edges_32 'Init) (at
                      !__anonstruct_Edge_3_from_edges_32 'Init))
                      (count g_6 f2_27 t2_27
                      (Int.(+) (Int32.to_int !i_1_0) (1))
                      (Int32.to_int
                      (select __anonstruct_Graph_4_esize_g_14 g_6))
                      __anonstruct_Graph_4_edges_g_14 (at
                      !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                      !__anonstruct_Edge_3_to_edges_32 'Init) (at
                      !__anonstruct_Edge_3_from_edges_32 'Init)))))))) } ; ()
                 end;
                 begin
                 any unit
                 requires { true } reads {
                 __anonstruct_Edge_3_existent_0_edges_32, g_6 }
                 ensures {
                   (#"/home/nik/Projects/ver/hw3/mygraph.c" 275 10 58#
                   (Int32.(=)
                   (select (at !__anonstruct_Edge_3_existent_0_edges_32
                   'Init)
                   (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                   (Int32.to_int !i_1_0))) (#"mygraph_c.jc" 1405 68 80#
                   "expl:Integer cast" (Int32.of_int (0))))) } ; () end;
                 begin
                 any unit
                 requires { true } reads {
                 __anonstruct_Edge_3_existent_0_edges_32,
                 __anonstruct_Edge_3_from_edges_32,
                 __anonstruct_Edge_3_to_edges_32, f_2, g_6, t_2 }
                 ensures {
                   (#"/home/nik/Projects/ver/hw3/mygraph.c" 276 10 41#
                   ((=)
                   (count g_6 (Int32.to_int f_2) (Int32.to_int t_2)
                   (Int32.to_int !i_1_0) (Int.(+) (Int32.to_int !i_1_0) (1))
                   __anonstruct_Graph_4_edges_g_14 (at
                   !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                   !__anonstruct_Edge_3_to_edges_32 'Init) (at
                   !__anonstruct_Edge_3_from_edges_32 'Init)) (0))) } ; ()
                 end;
                 begin
                 any unit
                 requires { true } reads {
                 __anonstruct_Edge_3_existent_0_edges_32,
                 __anonstruct_Edge_3_from_edges_32,
                 __anonstruct_Edge_3_to_edges_32, f_2, g_6, t_2 }
                 ensures {
                   (#"/home/nik/Projects/ver/hw3/mygraph.c" 277 10 36#
                   ((=)
                   (count g_6 (Int32.to_int f_2) (Int32.to_int t_2)
                   (Int32.to_int !i_1_0) (Int.(+) (Int32.to_int !i_1_0) (1))
                   __anonstruct_Graph_4_edges_g_14
                   !__anonstruct_Edge_3_existent_0_edges_32
                   !__anonstruct_Edge_3_to_edges_32
                   !__anonstruct_Edge_3_from_edges_32) (1))) } ; () end;
                 begin
                 any unit
                 requires { true } reads {
                 __anonstruct_Edge_3_existent_0_edges_32,
                 __anonstruct_Edge_3_from_edges_32,
                 __anonstruct_Edge_3_to_edges_32, f_2, g_6, t_2 }
                 ensures {
                   (#"/home/nik/Projects/ver/hw3/mygraph.c" 278 10 186#
                   (forall f2_28 : int.
                    (forall t2_28 : int.
                     (((not ((=) f2_28 (Int32.to_int f_2))) \/
                      (not ((=) t2_28 (Int32.to_int t_2)))) ->
                      ((=)
                      (count g_6 f2_28 t2_28 (0)
                      (Int32.to_int
                      (select __anonstruct_Graph_4_esize_g_14 g_6))
                      __anonstruct_Graph_4_edges_g_14 (at
                      !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                      !__anonstruct_Edge_3_to_edges_32 'Init) (at
                      !__anonstruct_Edge_3_from_edges_32 'Init))
                      (Int.(+)
                      (Int.(+)
                      (count g_6 f2_28 t2_28 (0) (Int32.to_int !i_1_0)
                      __anonstruct_Graph_4_edges_g_14 (at
                      !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                      !__anonstruct_Edge_3_to_edges_32 'Init) (at
                      !__anonstruct_Edge_3_from_edges_32 'Init))
                      (count g_6 f2_28 t2_28 (Int32.to_int !i_1_0)
                      (Int.(+) (Int32.to_int !i_1_0) (1))
                      __anonstruct_Graph_4_edges_g_14 (at
                      !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                      !__anonstruct_Edge_3_to_edges_32 'Init) (at
                      !__anonstruct_Edge_3_from_edges_32 'Init)))
                      (count g_6 f2_28 t2_28
                      (Int.(+) (Int32.to_int !i_1_0) (1))
                      (Int32.to_int
                      (select __anonstruct_Graph_4_esize_g_14 g_6))
                      __anonstruct_Graph_4_edges_g_14 (at
                      !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                      !__anonstruct_Edge_3_to_edges_32 'Init) (at
                      !__anonstruct_Edge_3_from_edges_32 'Init)))))))) } ; ()
                 end;
                 begin
                 any unit
                 requires { true } reads {
                 __anonstruct_Edge_3_existent_0_edges_32,
                 __anonstruct_Edge_3_from_edges_32,
                 __anonstruct_Edge_3_to_edges_32, f_2, g_6, t_2 }
                 ensures {
                   (#"/home/nik/Projects/ver/hw3/mygraph.c" 279 10 157#
                   (forall f2_29 : int.
                    (forall t2_29 : int.
                     (((not ((=) f2_29 (Int32.to_int f_2))) \/
                      (not ((=) t2_29 (Int32.to_int t_2)))) ->
                      ((=)
                      (count g_6 f2_29 t2_29 (0)
                      (Int32.to_int
                      (select __anonstruct_Graph_4_esize_g_14 g_6))
                      __anonstruct_Graph_4_edges_g_14 (at
                      !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                      !__anonstruct_Edge_3_to_edges_32 'Init) (at
                      !__anonstruct_Edge_3_from_edges_32 'Init))
                      (Int.(+)
                      (count g_6 f2_29 t2_29 (0) (Int32.to_int !i_1_0)
                      __anonstruct_Graph_4_edges_g_14 (at
                      !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                      !__anonstruct_Edge_3_to_edges_32 'Init) (at
                      !__anonstruct_Edge_3_from_edges_32 'Init))
                      (count g_6 f2_29 t2_29
                      (Int.(+) (Int32.to_int !i_1_0) (1))
                      (Int32.to_int
                      (select __anonstruct_Graph_4_esize_g_14 g_6))
                      __anonstruct_Graph_4_edges_g_14 (at
                      !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                      !__anonstruct_Edge_3_to_edges_32 'Init) (at
                      !__anonstruct_Edge_3_from_edges_32 'Init)))))))) } ; ()
                 end;
                 begin
                 any unit
                 requires { true } reads {
                 __anonstruct_Edge_3_existent_0_edges_32,
                 __anonstruct_Edge_3_from_edges_32,
                 __anonstruct_Edge_3_to_edges_32, f_2, g_6, t_2 }
                 ensures {
                   (#"/home/nik/Projects/ver/hw3/mygraph.c" 280 10 86#
                   (forall f2_30 : int.
                    (forall t2_30 : int.
                     (((not ((=) f2_30 (Int32.to_int f_2))) \/
                      (not ((=) t2_30 (Int32.to_int t_2)))) ->
                      ((=)
                      (count g_6 f2_30 t2_30 (Int32.to_int !i_1_0)
                      (Int.(+) (Int32.to_int !i_1_0) (1))
                      __anonstruct_Graph_4_edges_g_14
                      !__anonstruct_Edge_3_existent_0_edges_32
                      !__anonstruct_Edge_3_to_edges_32
                      !__anonstruct_Edge_3_from_edges_32) (0)))))) } ; () end;
                 (raise (Return_label_exc ())) end end end end else ());
            (i_1_0 :=
             (let _jessie_129 =
             (Safe_int32.(+)  !i_1_0
              (#"mygraph_c.jc" 1513 64 76# "expl:Integer cast"
              (Safe_int32.of_int (1))) ) in
             begin
             (assert {
             (#"/home/nik/Projects/ver/hw3/mygraph.c" 234 33 36#
             "expl:Pointer index bounds" true) }); _jessie_129 end)) end;
            (raise (Loop_continue_exc ())) end with Loop_continue_exc
           _jessie_22 -> () end end end;
         (raise (Goto_while_0_break_1_0_exc ())) end end with
       Goto_while_0_break_1_0_exc _jessie_11 ->
       'While_0_break_1_0: 'While_0_break_1_0: () end;
      (raise (Return_label_exc ())) end with Return_label_exc _jessie_12 ->
     'Return_label: 'Return_label: (raise Return) end))))))); (raise Return)
    end with Return -> () end
  
end

module Function_add_edge_behaviors
#"/home/nik/Projects/ver/hw3/mygraph.c" 169 0 32# "expl:add_edge, behaviors"

  use import core.Upd_unsafe 
  
  use Unsafe_int32 
  
  use import core.Tag_table_type 
  
  use import core.Shift_unsafe 
  
  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Return 
  
  use import ref.Ref 
  
  use import core.Pset 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_is_vertex 
  
  use import Logic_graph_valid 
  
  use import Logic_full 
  
  use import Logic_all_count 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Exceptions 
  
  use bool.Bool 
  
  use import Axiomatic_LF__Axiomatic__count_after 
  
  use import Axiomatic_EdgesCount 
  
  use import core.Assigns 
  
  use import core.Alloc_table 
  
  use import core.Acc_unsafe 
  
  use why3.Bool.Bool 
  
  use import Lemma_zeros 
  
  use import Lemma_count_prop2 
  
  use import Lemma_count_prop 
  
  let add_edge_ensures_default
  #"/home/nik/Projects/ver/hw3/mygraph.c" 169 0 32#
  "expl:Function add_edge, default behavior" =
  fun
   (g_6 : (pointer __anonstruct_Graph_4)) (f_2 : Int32.t) (t_2 : Int32.t)
   (__anonstruct_Edge_3_from_edges_32 : ref (memory __anonstruct_Edge_3
   Int32.t)) (__anonstruct_Edge_3_to_edges_32 : ref (memory
   __anonstruct_Edge_3 Int32.t)) (__anonstruct_Edge_3_existent_0_edges_32 :
   ref (memory __anonstruct_Edge_3 Int32.t)) (__anonstruct_Graph_4_ecnt_g_14
   : ref (memory __anonstruct_Graph_4 Int32.t))
   (__anonstruct_Edge_3_edges_32_alloc_table : (alloc_table
   __anonstruct_Edge_3)) (__anonstruct_Graph_4_g_14_alloc_table :
   (alloc_table __anonstruct_Graph_4))
   (__anonstruct_Vertex_2_vertices_31_alloc_table : (alloc_table
   __anonstruct_Vertex_2)) (__anonstruct_Edge_3_edges_32_tag_table :
   (tag_table __anonstruct_Edge_3))
   (__anonstruct_Vertex_2_existent_vertices_31 : (memory
   __anonstruct_Vertex_2 Int32.t)) (__anonstruct_Graph_4_vertices_g_14 :
   (memory __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2)))
   (__anonstruct_Graph_4_vsize_g_14 : (memory __anonstruct_Graph_4 Int32.t))
   (__anonstruct_Graph_4_edges_g_14 : (memory __anonstruct_Graph_4 (pointer
   __anonstruct_Edge_3))) (__anonstruct_Graph_4_esize_g_14 : (memory
   __anonstruct_Graph_4 Int32.t)) 
   requires {
   (#"mygraph_c.jc" 341 12 856#
   ((#"mygraph_c.jc" 341 12 856# _LF__Predicate__count_after) /\
   (#"mygraph_c.jc" 341 12 856#
   ((#"/home/nik/Projects/ver/hw3/mygraph.c" 158 11 20#
    (#"mygraph_c.jc" 341 12 856#
    ((#"mygraph_c.jc" 341 12 856#
     ((<=) (offset_min __anonstruct_Graph_4_g_14_alloc_table g_6) (0)))
    /\
    (#"mygraph_c.jc" 341 12 856#
    ((#"mygraph_c.jc" 341 12 856#
     ((>=) (offset_max __anonstruct_Graph_4_g_14_alloc_table g_6) (0)))
    /\ (#"mygraph_c.jc" 341 12 856# ((=) true true)))))))
   /\
   (#"mygraph_c.jc" 341 12 856#
   ((#"/home/nik/Projects/ver/hw3/mygraph.c" 158 24 38#
    (graph_valid g_6 __anonstruct_Vertex_2_vertices_31_alloc_table
    __anonstruct_Edge_3_edges_32_alloc_table __anonstruct_Graph_4_esize_g_14
    !__anonstruct_Graph_4_ecnt_g_14 __anonstruct_Graph_4_edges_g_14
    __anonstruct_Graph_4_vsize_g_14 __anonstruct_Graph_4_vertices_g_14
    !__anonstruct_Edge_3_existent_0_edges_32 !__anonstruct_Edge_3_to_edges_32
    !__anonstruct_Edge_3_from_edges_32
    __anonstruct_Vertex_2_existent_vertices_31))
   /\
   (#"mygraph_c.jc" 341 12 856#
   ((#"/home/nik/Projects/ver/hw3/mygraph.c" 159 11 26#
    (is_vertex g_6 (Int32.to_int f_2) __anonstruct_Graph_4_vsize_g_14))
   /\
   (#"mygraph_c.jc" 341 12 856#
   ((#"/home/nik/Projects/ver/hw3/mygraph.c" 160 11 26#
    (is_vertex g_6 (Int32.to_int t_2) __anonstruct_Graph_4_vsize_g_14))
   /\
   (#"mygraph_c.jc" 341 12 856#
   ((#"/home/nik/Projects/ver/hw3/mygraph.c" 161 11 34#
    (not
    ((=)
    (Int32.to_int
    (select __anonstruct_Vertex_2_existent_vertices_31
    (shift (select __anonstruct_Graph_4_vertices_g_14 g_6)
    (Int32.to_int f_2)))) (0))))
   /\
   (#"mygraph_c.jc" 341 12 856#
   ((#"/home/nik/Projects/ver/hw3/mygraph.c" 162 11 34#
    (not
    ((=)
    (Int32.to_int
    (select __anonstruct_Vertex_2_existent_vertices_31
    (shift (select __anonstruct_Graph_4_vertices_g_14 g_6)
    (Int32.to_int t_2)))) (0))))
   /\
   (#"/home/nik/Projects/ver/hw3/mygraph.c" 163 11 19#
   (not
   (full g_6 __anonstruct_Graph_4_esize_g_14 __anonstruct_Graph_4_edges_g_14
   !__anonstruct_Edge_3_existent_0_edges_32))))))))))))))))) }
   ensures {
     ("expl:Postcondition"
     (#"/home/nik/Projects/ver/hw3/mygraph.c" 164 10 24#
     "expl:Ensures clause"
     (#"/home/nik/Projects/ver/hw3/mygraph.c" 164 10 24#
     "expl:Ensures clause"
     ((#"/home/nik/Projects/ver/hw3/mygraph.c" 164 10 24#
      "expl:Ensures clause"
      (graph_valid g_6 __anonstruct_Vertex_2_vertices_31_alloc_table
      __anonstruct_Edge_3_edges_32_alloc_table
      __anonstruct_Graph_4_esize_g_14 !__anonstruct_Graph_4_ecnt_g_14
      __anonstruct_Graph_4_edges_g_14 __anonstruct_Graph_4_vsize_g_14
      __anonstruct_Graph_4_vertices_g_14
      !__anonstruct_Edge_3_existent_0_edges_32
      !__anonstruct_Edge_3_to_edges_32 !__anonstruct_Edge_3_from_edges_32
      __anonstruct_Vertex_2_existent_vertices_31))
     /\
     (#"/home/nik/Projects/ver/hw3/mygraph.c" 164 10 24#
     "expl:Ensures clause"
     ((#"/home/nik/Projects/ver/hw3/mygraph.c" 165 10 59#
      "expl:Ensures clause"
      ((=)
      (all_count g_6 (Int32.to_int f_2) (Int32.to_int t_2)
      __anonstruct_Graph_4_esize_g_14 __anonstruct_Graph_4_edges_g_14
      !__anonstruct_Edge_3_existent_0_edges_32
      !__anonstruct_Edge_3_to_edges_32 !__anonstruct_Edge_3_from_edges_32)
      (Int.(+)
      (all_count g_6 (Int32.to_int f_2) (Int32.to_int t_2)
      __anonstruct_Graph_4_esize_g_14 __anonstruct_Graph_4_edges_g_14 (old
      !__anonstruct_Edge_3_existent_0_edges_32) (old
      !__anonstruct_Edge_3_to_edges_32) (old
      !__anonstruct_Edge_3_from_edges_32)) (1))))
     /\
     (#"/home/nik/Projects/ver/hw3/mygraph.c" 166 10 108#
     "expl:Ensures clause"
     (forall f2_32 : int.
      (forall t2_32 : int.
       (((not ((=) f2_32 (Int32.to_int f_2))) \/
        (not ((=) t2_32 (Int32.to_int t_2)))) ->
        ((=)
        (all_count g_6 f2_32 t2_32 __anonstruct_Graph_4_esize_g_14
        __anonstruct_Graph_4_edges_g_14
        !__anonstruct_Edge_3_existent_0_edges_32
        !__anonstruct_Edge_3_to_edges_32 !__anonstruct_Edge_3_from_edges_32)
        (all_count g_6 f2_32 t2_32 __anonstruct_Graph_4_esize_g_14
        __anonstruct_Graph_4_edges_g_14 (old
        !__anonstruct_Edge_3_existent_0_edges_32) (old
        !__anonstruct_Edge_3_to_edges_32) (old
        !__anonstruct_Edge_3_from_edges_32))))))))))))) } diverges  ->
   'Init:
   try
    begin
    (let r = ref (Unsafe_int32.any_  () ) in
    (let i_0_0 = ref (Unsafe_int32.any_  () ) in
    (let i_1 = ref (Unsafe_int32.any_  () ) in
    (let i_1_0 = ref (Unsafe_int32.any_  () ) in
    (let r_0 = ref (Unsafe_int32.any_  () ) in
    (let k = ref (Unsafe_int32.any_  () ) in
    (let k_0 = ref (Unsafe_int32.any_  () ) in
    try
     'U__Before:
     begin
     'U__Before: ();
      (if
      (#"/home/nik/Projects/ver/hw3/mygraph.c" 172 8 26#
      (Unsafe_int32.(<)  (acc  !__anonstruct_Graph_4_ecnt_g_14 g_6 )
       (acc  __anonstruct_Graph_4_esize_g_14 g_6 ) ))
      then
       begin
       begin
       (assert {
       (#"/home/nik/Projects/ver/hw3/mygraph.c" 173 23 201#
       "expl:Assertion in line 173"
       (forall f2 : int.
        (forall t2 : int.
         ((=)
         (count g_6 f2 t2 (0)
         (Int32.to_int (select __anonstruct_Graph_4_esize_g_14 g_6))
         __anonstruct_Graph_4_edges_g_14 (at
         !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
         !__anonstruct_Edge_3_to_edges_32 'Init) (at
         !__anonstruct_Edge_3_from_edges_32 'Init))
         (Int.(+)
         (Int.(+)
         (count g_6 f2 t2 (0)
         (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_14 g_6))
         __anonstruct_Graph_4_edges_g_14 (at
         !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
         !__anonstruct_Edge_3_to_edges_32 'Init) (at
         !__anonstruct_Edge_3_from_edges_32 'Init))
         (count g_6 f2 t2
         (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_14 g_6))
         (Int.(+) (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_14 g_6))
         (1)) __anonstruct_Graph_4_edges_g_14 (at
         !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
         !__anonstruct_Edge_3_to_edges_32 'Init) (at
         !__anonstruct_Edge_3_from_edges_32 'Init)))
         (count g_6 f2 t2
         (Int.(+) (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_14 g_6))
         (1)) (Int32.to_int (select __anonstruct_Graph_4_esize_g_14 g_6))
         __anonstruct_Graph_4_edges_g_14 (at
         !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
         !__anonstruct_Edge_3_to_edges_32 'Init) (at
         !__anonstruct_Edge_3_from_edges_32 'Init))))))) }); () end;
        begin
        (assert {
        (#"/home/nik/Projects/ver/hw3/mygraph.c" 174 22 90#
        "expl:Assertion in line 174"
        (forall f2_0 : int.
         (forall t2_0 : int.
          ((=)
          (count g_6 f2_0 t2_0
          (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_14 g_6))
          (Int.(+)
          (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_14 g_6)) (1))
          __anonstruct_Graph_4_edges_g_14 (at
          !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
          !__anonstruct_Edge_3_to_edges_32 'Init) (at
          !__anonstruct_Edge_3_from_edges_32 'Init)) (0))))) }); () end;
        begin
        (let _jessie_58 = f_2 in
        (let _jessie_59 = (acc  __anonstruct_Graph_4_edges_g_14 g_6 ) in
        (let _jessie_60 =
        (Unsafe_int32.to_int  (acc  !__anonstruct_Graph_4_ecnt_g_14 g_6 ) )
        in
        (let _jessie_61 = (shift_  _jessie_59 _jessie_60 ) in
        (upd  __anonstruct_Edge_3_from_edges_32 _jessie_61 _jessie_58 )))));
         begin
         (let _jessie_53 = t_2 in
         (let _jessie_54 = (acc  __anonstruct_Graph_4_edges_g_14 g_6 ) in
         (let _jessie_55 =
         (Unsafe_int32.to_int  (acc  !__anonstruct_Graph_4_ecnt_g_14 g_6 ) )
         in
         (let _jessie_56 = (shift_  _jessie_54 _jessie_55 ) in
         (upd  __anonstruct_Edge_3_to_edges_32 _jessie_56 _jessie_53 )))));
          begin
          (let _jessie_48 =
          (#"mygraph_c.jc" 426 91 103# "expl:Integer cast"
          (Unsafe_int32.of_int (1))) in
          (let _jessie_49 = (acc  __anonstruct_Graph_4_edges_g_14 g_6 ) in
          (let _jessie_50 =
          (Unsafe_int32.to_int  (acc  !__anonstruct_Graph_4_ecnt_g_14 g_6 ) )
          in
          (let _jessie_51 = (shift_  _jessie_49 _jessie_50 ) in
          (upd  __anonstruct_Edge_3_existent_0_edges_32 _jessie_51 _jessie_48
           )))));
           begin
           (let _jessie_43 =
           (Unsafe_int32.(+)  (acc  !__anonstruct_Graph_4_ecnt_g_14 g_6 )
            (#"mygraph_c.jc" 428 59 71# "expl:Integer cast"
            (Unsafe_int32.of_int (1))) ) in
           (let _jessie_44 = g_6 in
           (let _jessie_45 = (0) in
           (let _jessie_46 = _jessie_44 in
           (upd  __anonstruct_Graph_4_ecnt_g_14 _jessie_46 _jessie_43 )))));
            begin
            (r :=
             (Unsafe_int32.(-)  (acc  !__anonstruct_Graph_4_ecnt_g_14 g_6 )
              (#"mygraph_c.jc" 429 62 74# "expl:Integer cast"
              (Unsafe_int32.of_int (1))) ));
             try
              begin
              (i_0_0 :=
               (#"mygraph_c.jc" 431 30 42# "expl:Integer cast"
               (Unsafe_int32.of_int (0))));
               'LoopEntry:
               begin
               'LoopEntry:
               'Loop_5:
               loop
               invariant
                 { (((#"/home/nik/Projects/ver/hw3/mygraph.c" 181 26 37#
                     (#"/home/nik/Projects/ver/hw3/mygraph.c" 181 26 37#
                     ((#"/home/nik/Projects/ver/hw3/mygraph.c" 181 26 32#
                      (Int32.(<=) (#"mygraph_c.jc" 438 44 56#
                      "expl:Integer cast" (Int32.of_int (0))) !i_0_0))
                     /\
                     (#"/home/nik/Projects/ver/hw3/mygraph.c" 181 31 37#
                     (Int32.(<=) !i_0_0 !r)))))
                    &&
                    ((#"/home/nik/Projects/ver/hw3/mygraph.c" 182 26 111#
                     (forall k_8 : int.
                      ((((<=) (0) k_8) /\
                       (((<) k_8
                        (Int32.to_int
                        (select __anonstruct_Graph_4_esize_g_14 g_6)))
                       /\ (not ((=) k_8 (Int32.to_int !r))))) ->
                       ((Int32.(=)
                        (select !__anonstruct_Edge_3_from_edges_32
                        (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                        k_8))
                        (select (at !__anonstruct_Edge_3_from_edges_32 'Init)
                        (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                        k_8)))
                       /\
                       ((Int32.(=)
                        (select !__anonstruct_Edge_3_to_edges_32
                        (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                        k_8))
                        (select (at !__anonstruct_Edge_3_to_edges_32 'Init)
                        (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                        k_8)))
                       /\
                       (Int32.(=)
                       (select !__anonstruct_Edge_3_existent_0_edges_32
                       (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                       k_8))
                       (select (at !__anonstruct_Edge_3_existent_0_edges_32
                       'Init)
                       (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                       k_8))))))))
                    &&
                    ((#"/home/nik/Projects/ver/hw3/mygraph.c" 183 27 136#
                     (forall f2_1 : int.
                      (forall t2_1 : int.
                       (((<=) (Int.(+) (Int32.to_int !i_0_0) (1))
                        (Int32.to_int !r)) ->
                        ((=)
                        (count g_6 f2_1 t2_1 (0)
                        (Int.(+) (Int32.to_int !i_0_0) (1))
                        __anonstruct_Graph_4_edges_g_14
                        !__anonstruct_Edge_3_existent_0_edges_32
                        !__anonstruct_Edge_3_to_edges_32
                        !__anonstruct_Edge_3_from_edges_32)
                        (Int.(+)
                        (count g_6 f2_1 t2_1 (0) (Int32.to_int !i_0_0)
                        __anonstruct_Graph_4_edges_g_14
                        !__anonstruct_Edge_3_existent_0_edges_32
                        !__anonstruct_Edge_3_to_edges_32
                        !__anonstruct_Edge_3_from_edges_32)
                        (count g_6 f2_1 t2_1 (Int32.to_int !i_0_0)
                        (Int.(+) (Int32.to_int !i_0_0) (1))
                        __anonstruct_Graph_4_edges_g_14
                        !__anonstruct_Edge_3_existent_0_edges_32
                        !__anonstruct_Edge_3_to_edges_32
                        !__anonstruct_Edge_3_from_edges_32)))))))
                    &&
                    ((#"/home/nik/Projects/ver/hw3/mygraph.c" 184 28 85#
                     ((Int32.(<) !i_0_0 !r) ->
                      ((Int32.(=)
                       (select !__anonstruct_Edge_3_from_edges_32
                       (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                       (Int32.to_int !i_0_0)))
                       (select (at !__anonstruct_Edge_3_from_edges_32 'Init)
                       (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                       (Int32.to_int !i_0_0))))
                      /\
                      ((Int32.(=)
                       (select !__anonstruct_Edge_3_to_edges_32
                       (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                       (Int32.to_int !i_0_0)))
                       (select (at !__anonstruct_Edge_3_to_edges_32 'Init)
                       (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                       (Int32.to_int !i_0_0))))
                      /\
                      (Int32.(=)
                      (select !__anonstruct_Edge_3_existent_0_edges_32
                      (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                      (Int32.to_int !i_0_0)))
                      (select (at !__anonstruct_Edge_3_existent_0_edges_32
                      'Init)
                      (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                      (Int32.to_int !i_0_0))))))))
                    &&
                    ((#"/home/nik/Projects/ver/hw3/mygraph.c" 185 27 118#
                     (forall f2_2 : int.
                      (forall t2_2 : int.
                       (((<=) (Int.(+) (Int32.to_int !i_0_0) (1))
                        (Int32.to_int !r)) ->
                        ((=)
                        (count g_6 f2_2 t2_2 (Int32.to_int !i_0_0)
                        (Int.(+) (Int32.to_int !i_0_0) (1))
                        __anonstruct_Graph_4_edges_g_14
                        !__anonstruct_Edge_3_existent_0_edges_32
                        !__anonstruct_Edge_3_to_edges_32
                        !__anonstruct_Edge_3_from_edges_32)
                        (count g_6 f2_2 t2_2 (Int32.to_int !i_0_0)
                        (Int.(+) (Int32.to_int !i_0_0) (1))
                        __anonstruct_Graph_4_edges_g_14 (at
                        !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                        !__anonstruct_Edge_3_to_edges_32 'Init) (at
                        !__anonstruct_Edge_3_from_edges_32 'Init)))))))
                    &&
                    ((#"/home/nik/Projects/ver/hw3/mygraph.c" 186 27 151#
                     (forall f2_3 : int.
                      (forall t2_3 : int.
                       (((<=) (Int.(+) (Int32.to_int !i_0_0) (1))
                        (Int32.to_int !r)) ->
                        ((=)
                        (count g_6 f2_3 t2_3 (0)
                        (Int.(+) (Int32.to_int !i_0_0) (1))
                        __anonstruct_Graph_4_edges_g_14 (at
                        !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                        !__anonstruct_Edge_3_to_edges_32 'Init) (at
                        !__anonstruct_Edge_3_from_edges_32 'Init))
                        (Int.(+)
                        (count g_6 f2_3 t2_3 (0) (Int32.to_int !i_0_0)
                        __anonstruct_Graph_4_edges_g_14 (at
                        !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                        !__anonstruct_Edge_3_to_edges_32 'Init) (at
                        !__anonstruct_Edge_3_from_edges_32 'Init))
                        (count g_6 f2_3 t2_3 (Int32.to_int !i_0_0)
                        (Int.(+) (Int32.to_int !i_0_0) (1))
                        __anonstruct_Graph_4_edges_g_14 (at
                        !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                        !__anonstruct_Edge_3_to_edges_32 'Init) (at
                        !__anonstruct_Edge_3_from_edges_32 'Init))))))))
                    &&
                    ((#"/home/nik/Projects/ver/hw3/mygraph.c" 187 27 100#
                     (forall f2_4 : int.
                      (forall t2_4 : int.
                       ((=)
                       (count g_6 f2_4 t2_4 (0) (Int32.to_int !i_0_0)
                       __anonstruct_Graph_4_edges_g_14
                       !__anonstruct_Edge_3_existent_0_edges_32
                       !__anonstruct_Edge_3_to_edges_32
                       !__anonstruct_Edge_3_from_edges_32)
                       (count g_6 f2_4 t2_4 (0) (Int32.to_int !i_0_0)
                       __anonstruct_Graph_4_edges_g_14 (at
                       !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                       !__anonstruct_Edge_3_to_edges_32 'Init) (at
                       !__anonstruct_Edge_3_from_edges_32 'Init))))))
                    &&
                    (#"/home/nik/Projects/ver/hw3/mygraph.c" 188 26 40#
                    (graph_valid g_6
                    __anonstruct_Vertex_2_vertices_31_alloc_table
                    __anonstruct_Edge_3_edges_32_alloc_table
                    __anonstruct_Graph_4_esize_g_14
                    !__anonstruct_Graph_4_ecnt_g_14
                    __anonstruct_Graph_4_edges_g_14
                    __anonstruct_Graph_4_vsize_g_14
                    __anonstruct_Graph_4_vertices_g_14
                    !__anonstruct_Edge_3_existent_0_edges_32
                    !__anonstruct_Edge_3_to_edges_32
                    !__anonstruct_Edge_3_from_edges_32
                    __anonstruct_Vertex_2_existent_vertices_31)))))))))
                   /\
                   (#"mygraph_c.jc" 433 12 5094#
                   ((#"mygraph_c.jc" 433 12 5094#
                    ((#"mygraph_c.jc" 433 12 5094#
                     ((#"mygraph_c.jc" 433 12 5094# "expl:Assigns clause"
                      (not_assigns __anonstruct_Edge_3_edges_32_alloc_table
                      __anonstruct_Edge_3_edges_32_alloc_table (at
                      !__anonstruct_Edge_3_from_edges_32 'Loop_5)
                      !__anonstruct_Edge_3_from_edges_32 pset_empty))
                     /\
                     (#"mygraph_c.jc" 433 12 5094# "expl:Assigns clause"
                     (not_assigns __anonstruct_Edge_3_edges_32_alloc_table
                     __anonstruct_Edge_3_edges_32_alloc_table (at
                     !__anonstruct_Edge_3_to_edges_32 'Loop_5)
                     !__anonstruct_Edge_3_to_edges_32 pset_empty))))
                    /\
                    (#"mygraph_c.jc" 433 12 5094# "expl:Assigns clause"
                    (not_assigns __anonstruct_Edge_3_edges_32_alloc_table
                    __anonstruct_Edge_3_edges_32_alloc_table (at
                    !__anonstruct_Edge_3_existent_0_edges_32 'Loop_5)
                    !__anonstruct_Edge_3_existent_0_edges_32 pset_empty))))
                   /\
                   (#"mygraph_c.jc" 433 12 5094# "expl:Assigns clause"
                   (not_assigns __anonstruct_Graph_4_g_14_alloc_table
                   __anonstruct_Graph_4_g_14_alloc_table (at
                   !__anonstruct_Graph_4_ecnt_g_14 'Loop_5)
                   !__anonstruct_Graph_4_ecnt_g_14 pset_empty))))) } 
                 
                begin
                any unit requires { true } ensures { true } ;
                 try
                  begin
                  'LoopCurrent:
                  begin
                  'LoopCurrent:
                  (if
                  (#"/home/nik/Projects/ver/hw3/mygraph.c" 192 24 29#
                  (Unsafe_int32.(<)  !i_0_0 !r )) then ()
                  else (raise (Goto_while_0_break_1_exc ())));
                   (i_0_0 :=
                    (Unsafe_int32.(+)  !i_0_0
                     (#"mygraph_c.jc" 514 60 72# "expl:Integer cast"
                     (Unsafe_int32.of_int (1))) )) end;
                   (raise (Loop_continue_exc ())) end with Loop_continue_exc
                  _jessie_14 -> () end end end;
                (raise (Goto_while_0_break_1_exc ())) end end with
              Goto_while_0_break_1_exc _jessie_7 ->
              'While_0_break_1: 'While_0_break_1: () end;
             try
              begin
              (i_1 :=
               (Unsafe_int32.(+)  !r
                (#"mygraph_c.jc" 520 55 67# "expl:Integer cast"
                (Unsafe_int32.of_int (1))) ));
               'LoopEntry:
               begin
               'LoopEntry:
               'Loop_6:
               loop
               invariant
                 { (((#"/home/nik/Projects/ver/hw3/mygraph.c" 195 26 46#
                     (#"/home/nik/Projects/ver/hw3/mygraph.c" 195 26 46#
                     ((#"/home/nik/Projects/ver/hw3/mygraph.c" 195 26 34#
                      ((<=) (Int.(+) (Int32.to_int !r) (1))
                      (Int32.to_int !i_1)))
                     /\
                     (#"/home/nik/Projects/ver/hw3/mygraph.c" 195 33 46#
                     (Int32.(<=) !i_1
                     (select __anonstruct_Graph_4_esize_g_14 g_6))))))
                    &&
                    ((#"/home/nik/Projects/ver/hw3/mygraph.c" 196 26 40#
                     (graph_valid g_6
                     __anonstruct_Vertex_2_vertices_31_alloc_table
                     __anonstruct_Edge_3_edges_32_alloc_table
                     __anonstruct_Graph_4_esize_g_14
                     !__anonstruct_Graph_4_ecnt_g_14
                     __anonstruct_Graph_4_edges_g_14
                     __anonstruct_Graph_4_vsize_g_14
                     __anonstruct_Graph_4_vertices_g_14
                     !__anonstruct_Edge_3_existent_0_edges_32
                     !__anonstruct_Edge_3_to_edges_32
                     !__anonstruct_Edge_3_from_edges_32
                     __anonstruct_Vertex_2_existent_vertices_31))
                    &&
                    ((#"/home/nik/Projects/ver/hw3/mygraph.c" 197 26 103#
                     (forall k_9 : int.
                      ((((<) (Int32.to_int !r) k_9) /\
                       ((<) k_9
                       (Int32.to_int
                       (select __anonstruct_Graph_4_esize_g_14 g_6)))) ->
                       ((Int32.(=)
                        (select !__anonstruct_Edge_3_from_edges_32
                        (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                        k_9))
                        (select (at !__anonstruct_Edge_3_from_edges_32 'Init)
                        (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                        k_9)))
                       /\
                       ((Int32.(=)
                        (select !__anonstruct_Edge_3_to_edges_32
                        (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                        k_9))
                        (select (at !__anonstruct_Edge_3_to_edges_32 'Init)
                        (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                        k_9)))
                       /\
                       (Int32.(=)
                       (select !__anonstruct_Edge_3_existent_0_edges_32
                       (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                       k_9))
                       (select (at !__anonstruct_Edge_3_existent_0_edges_32
                       'Init)
                       (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                       k_9))))))))
                    &&
                    ((#"/home/nik/Projects/ver/hw3/mygraph.c" 198 27 156#
                     (forall f2_5 : int.
                      (forall t2_5 : int.
                       ((((<) (Int.(+) (Int32.to_int !r) (1))
                         (Int.(+) (Int32.to_int !i_1) (1)))
                        /\
                        ((<=) (Int.(+) (Int32.to_int !i_1) (1))
                        (Int32.to_int
                        (select __anonstruct_Graph_4_esize_g_14 g_6)))) ->
                        ((=)
                        (count g_6 f2_5 t2_5 (Int.(+) (Int32.to_int !r) (1))
                        (Int.(+) (Int32.to_int !i_1) (1))
                        __anonstruct_Graph_4_edges_g_14
                        !__anonstruct_Edge_3_existent_0_edges_32
                        !__anonstruct_Edge_3_to_edges_32
                        !__anonstruct_Edge_3_from_edges_32)
                        (Int.(+)
                        (count g_6 f2_5 t2_5 (Int.(+) (Int32.to_int !r) (1))
                        (Int32.to_int !i_1) __anonstruct_Graph_4_edges_g_14
                        !__anonstruct_Edge_3_existent_0_edges_32
                        !__anonstruct_Edge_3_to_edges_32
                        !__anonstruct_Edge_3_from_edges_32)
                        (count g_6 f2_5 t2_5 (Int32.to_int !i_1)
                        (Int.(+) (Int32.to_int !i_1) (1))
                        __anonstruct_Graph_4_edges_g_14
                        !__anonstruct_Edge_3_existent_0_edges_32
                        !__anonstruct_Edge_3_to_edges_32
                        !__anonstruct_Edge_3_from_edges_32)))))))
                    &&
                    ((#"/home/nik/Projects/ver/hw3/mygraph.c" 199 27 84#
                     ((Int32.(>) !i_1 !r) ->
                      ((Int32.(=)
                       (select !__anonstruct_Edge_3_from_edges_32
                       (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                       (Int32.to_int !i_1)))
                       (select (at !__anonstruct_Edge_3_from_edges_32 'Init)
                       (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                       (Int32.to_int !i_1))))
                      /\
                      ((Int32.(=)
                       (select !__anonstruct_Edge_3_to_edges_32
                       (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                       (Int32.to_int !i_1)))
                       (select (at !__anonstruct_Edge_3_to_edges_32 'Init)
                       (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                       (Int32.to_int !i_1))))
                      /\
                      (Int32.(=)
                      (select !__anonstruct_Edge_3_existent_0_edges_32
                      (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                      (Int32.to_int !i_1)))
                      (select (at !__anonstruct_Edge_3_existent_0_edges_32
                      'Init)
                      (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                      (Int32.to_int !i_1))))))))
                    &&
                    ((#"/home/nik/Projects/ver/hw3/mygraph.c" 200 27 126#
                     (forall f2_6 : int.
                      (forall t2_6 : int.
                       (((<=) (Int.(+) (Int32.to_int !i_1) (1))
                        (Int32.to_int
                        (select __anonstruct_Graph_4_esize_g_14 g_6))) ->
                        ((=)
                        (count g_6 f2_6 t2_6 (Int32.to_int !i_1)
                        (Int.(+) (Int32.to_int !i_1) (1))
                        __anonstruct_Graph_4_edges_g_14
                        !__anonstruct_Edge_3_existent_0_edges_32
                        !__anonstruct_Edge_3_to_edges_32
                        !__anonstruct_Edge_3_from_edges_32)
                        (count g_6 f2_6 t2_6 (Int32.to_int !i_1)
                        (Int.(+) (Int32.to_int !i_1) (1))
                        __anonstruct_Graph_4_edges_g_14 (at
                        !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                        !__anonstruct_Edge_3_to_edges_32 'Init) (at
                        !__anonstruct_Edge_3_from_edges_32 'Init)))))))
                    &&
                    ((#"/home/nik/Projects/ver/hw3/mygraph.c" 201 27 159#
                     (forall f2_7 : int.
                      (forall t2_7 : int.
                       (((<=) (Int.(+) (Int32.to_int !i_1) (1))
                        (Int32.to_int
                        (select __anonstruct_Graph_4_esize_g_14 g_6))) ->
                        ((=)
                        (count g_6 f2_7 t2_7 (Int.(+) (Int32.to_int !r) (1))
                        (Int.(+) (Int32.to_int !i_1) (1))
                        __anonstruct_Graph_4_edges_g_14 (at
                        !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                        !__anonstruct_Edge_3_to_edges_32 'Init) (at
                        !__anonstruct_Edge_3_from_edges_32 'Init))
                        (Int.(+)
                        (count g_6 f2_7 t2_7 (Int.(+) (Int32.to_int !r) (1))
                        (Int32.to_int !i_1) __anonstruct_Graph_4_edges_g_14
                        (at !__anonstruct_Edge_3_existent_0_edges_32 'Init)
                        (at !__anonstruct_Edge_3_to_edges_32 'Init) (at
                        !__anonstruct_Edge_3_from_edges_32 'Init))
                        (count g_6 f2_7 t2_7 (Int32.to_int !i_1)
                        (Int.(+) (Int32.to_int !i_1) (1))
                        __anonstruct_Graph_4_edges_g_14 (at
                        !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                        !__anonstruct_Edge_3_to_edges_32 'Init) (at
                        !__anonstruct_Edge_3_from_edges_32 'Init))))))))
                    &&
                    (#"/home/nik/Projects/ver/hw3/mygraph.c" 202 26 106#
                    (forall f2_8 : int.
                     (forall t2_8 : int.
                      ((=)
                      (count g_6 f2_8 t2_8 (Int.(+) (Int32.to_int !r) (1))
                      (Int32.to_int !i_1) __anonstruct_Graph_4_edges_g_14
                      !__anonstruct_Edge_3_existent_0_edges_32
                      !__anonstruct_Edge_3_to_edges_32
                      !__anonstruct_Edge_3_from_edges_32)
                      (count g_6 f2_8 t2_8 (Int.(+) (Int32.to_int !r) (1))
                      (Int32.to_int !i_1) __anonstruct_Graph_4_edges_g_14 (at
                      !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                      !__anonstruct_Edge_3_to_edges_32 'Init) (at
                      !__anonstruct_Edge_3_from_edges_32 'Init)))))))))))))
                   /\
                   (#"mygraph_c.jc" 522 12 5606#
                   ((#"mygraph_c.jc" 522 12 5606#
                    ((#"mygraph_c.jc" 522 12 5606#
                     ((#"mygraph_c.jc" 522 12 5606# "expl:Assigns clause"
                      (not_assigns __anonstruct_Edge_3_edges_32_alloc_table
                      __anonstruct_Edge_3_edges_32_alloc_table (at
                      !__anonstruct_Edge_3_from_edges_32 'Loop_6)
                      !__anonstruct_Edge_3_from_edges_32 pset_empty))
                     /\
                     (#"mygraph_c.jc" 522 12 5606# "expl:Assigns clause"
                     (not_assigns __anonstruct_Edge_3_edges_32_alloc_table
                     __anonstruct_Edge_3_edges_32_alloc_table (at
                     !__anonstruct_Edge_3_to_edges_32 'Loop_6)
                     !__anonstruct_Edge_3_to_edges_32 pset_empty))))
                    /\
                    (#"mygraph_c.jc" 522 12 5606# "expl:Assigns clause"
                    (not_assigns __anonstruct_Edge_3_edges_32_alloc_table
                    __anonstruct_Edge_3_edges_32_alloc_table (at
                    !__anonstruct_Edge_3_existent_0_edges_32 'Loop_6)
                    !__anonstruct_Edge_3_existent_0_edges_32 pset_empty))))
                   /\
                   (#"mygraph_c.jc" 522 12 5606# "expl:Assigns clause"
                   (not_assigns __anonstruct_Graph_4_g_14_alloc_table
                   __anonstruct_Graph_4_g_14_alloc_table (at
                   !__anonstruct_Graph_4_ecnt_g_14 'Loop_6)
                   !__anonstruct_Graph_4_ecnt_g_14 pset_empty))))) } 
                 
                begin
                any unit requires { true } ensures { true } ;
                 try
                  begin
                  'LoopCurrent:
                  begin
                  'LoopCurrent:
                  (if
                  (#"/home/nik/Projects/ver/hw3/mygraph.c" 207 26 38#
                  (Unsafe_int32.(<)  !i_1
                   (acc  __anonstruct_Graph_4_esize_g_14 g_6 ) )) then ()
                  else (raise (Goto_while_0_break_0_0_exc ())));
                   (i_1 :=
                    (Unsafe_int32.(+)  !i_1
                     (#"mygraph_c.jc" 609 63 75# "expl:Integer cast"
                     (Unsafe_int32.of_int (1))) )) end;
                   (raise (Loop_continue_exc ())) end with Loop_continue_exc
                  _jessie_16 -> () end end end;
                (raise (Goto_while_0_break_0_0_exc ())) end end with
              Goto_while_0_break_0_0_exc _jessie_8 ->
              'While_0_break_0_0: 'While_0_break_0_0: () end;
             begin
             (assert {
             (#"/home/nik/Projects/ver/hw3/mygraph.c" 211 19 106#
             "expl:Assertion in line 211"
             (forall f2_9 : int.
              (forall t2_9 : int.
               ((=)
               (count g_6 f2_9 t2_9 (0)
               (Int.(-)
               (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_14 g_6))
               (1)) __anonstruct_Graph_4_edges_g_14
               !__anonstruct_Edge_3_existent_0_edges_32
               !__anonstruct_Edge_3_to_edges_32
               !__anonstruct_Edge_3_from_edges_32)
               (count g_6 f2_9 t2_9 (0)
               (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_14 g_6))
               __anonstruct_Graph_4_edges_g_14 (at
               !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
               !__anonstruct_Edge_3_to_edges_32 'Init) (at
               !__anonstruct_Edge_3_from_edges_32 'Init)))))) }); () end;
             begin
             (assert {
             (#"/home/nik/Projects/ver/hw3/mygraph.c" 212 19 109#
             "expl:Assertion in line 212"
             (forall f2_10 : int.
              (forall t2_10 : int.
               ((=)
               (count g_6 f2_10 t2_10 (Int.(+) (Int32.to_int !r) (1))
               (Int32.to_int (select __anonstruct_Graph_4_esize_g_14 g_6))
               __anonstruct_Graph_4_edges_g_14
               !__anonstruct_Edge_3_existent_0_edges_32
               !__anonstruct_Edge_3_to_edges_32
               !__anonstruct_Edge_3_from_edges_32)
               (count g_6 f2_10 t2_10 (Int.(+) (Int32.to_int !r) (1))
               (Int32.to_int (select __anonstruct_Graph_4_esize_g_14 g_6))
               __anonstruct_Graph_4_edges_g_14 (at
               !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
               !__anonstruct_Edge_3_to_edges_32 'Init) (at
               !__anonstruct_Edge_3_from_edges_32 'Init)))))) }); () end;
             begin
             (assert {
             (#"/home/nik/Projects/ver/hw3/mygraph.c" 213 19 618#
             "expl:Assertion in line 213"
             (forall f2_11 : int.
              (forall t2_11 : int.
               (((=)
                (count g_6 f2_11 t2_11 (0)
                (Int32.to_int (select __anonstruct_Graph_4_esize_g_14 g_6))
                __anonstruct_Graph_4_edges_g_14
                !__anonstruct_Edge_3_existent_0_edges_32
                !__anonstruct_Edge_3_to_edges_32
                !__anonstruct_Edge_3_from_edges_32)
                (Int.(+)
                (Int.(+)
                (count g_6 f2_11 t2_11 (0) (Int32.to_int !r)
                __anonstruct_Graph_4_edges_g_14
                !__anonstruct_Edge_3_existent_0_edges_32
                !__anonstruct_Edge_3_to_edges_32
                !__anonstruct_Edge_3_from_edges_32)
                (count g_6 f2_11 t2_11 (Int32.to_int !r)
                (Int.(+) (Int32.to_int !r) (1))
                __anonstruct_Graph_4_edges_g_14
                !__anonstruct_Edge_3_existent_0_edges_32
                !__anonstruct_Edge_3_to_edges_32
                !__anonstruct_Edge_3_from_edges_32))
                (count g_6 f2_11 t2_11 (Int.(+) (Int32.to_int !r) (1))
                (Int32.to_int (select __anonstruct_Graph_4_esize_g_14 g_6))
                __anonstruct_Graph_4_edges_g_14
                !__anonstruct_Edge_3_existent_0_edges_32
                !__anonstruct_Edge_3_to_edges_32
                !__anonstruct_Edge_3_from_edges_32)))
               /\
               (((=)
                (Int.(+)
                (Int.(+)
                (count g_6 f2_11 t2_11 (0) (Int32.to_int !r)
                __anonstruct_Graph_4_edges_g_14
                !__anonstruct_Edge_3_existent_0_edges_32
                !__anonstruct_Edge_3_to_edges_32
                !__anonstruct_Edge_3_from_edges_32)
                (count g_6 f2_11 t2_11 (Int32.to_int !r)
                (Int.(+) (Int32.to_int !r) (1))
                __anonstruct_Graph_4_edges_g_14
                !__anonstruct_Edge_3_existent_0_edges_32
                !__anonstruct_Edge_3_to_edges_32
                !__anonstruct_Edge_3_from_edges_32))
                (count g_6 f2_11 t2_11 (Int.(+) (Int32.to_int !r) (1))
                (Int32.to_int (select __anonstruct_Graph_4_esize_g_14 g_6))
                __anonstruct_Graph_4_edges_g_14
                !__anonstruct_Edge_3_existent_0_edges_32
                !__anonstruct_Edge_3_to_edges_32
                !__anonstruct_Edge_3_from_edges_32))
                (Int.(+)
                (Int.(+)
                (count g_6 f2_11 t2_11 (0) (Int32.to_int !r)
                __anonstruct_Graph_4_edges_g_14 (at
                !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                !__anonstruct_Edge_3_to_edges_32 'Init) (at
                !__anonstruct_Edge_3_from_edges_32 'Init))
                (count g_6 f2_11 t2_11 (Int32.to_int !r)
                (Int.(+) (Int32.to_int !r) (1))
                __anonstruct_Graph_4_edges_g_14
                !__anonstruct_Edge_3_existent_0_edges_32
                !__anonstruct_Edge_3_to_edges_32
                !__anonstruct_Edge_3_from_edges_32))
                (count g_6 f2_11 t2_11 (Int.(+) (Int32.to_int !r) (1))
                (Int32.to_int (select __anonstruct_Graph_4_esize_g_14 g_6))
                __anonstruct_Graph_4_edges_g_14
                !__anonstruct_Edge_3_existent_0_edges_32
                !__anonstruct_Edge_3_to_edges_32
                !__anonstruct_Edge_3_from_edges_32)))
               /\
               (((=)
                (Int.(+)
                (Int.(+)
                (count g_6 f2_11 t2_11 (0) (Int32.to_int !r)
                __anonstruct_Graph_4_edges_g_14 (at
                !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                !__anonstruct_Edge_3_to_edges_32 'Init) (at
                !__anonstruct_Edge_3_from_edges_32 'Init))
                (count g_6 f2_11 t2_11 (Int32.to_int !r)
                (Int.(+) (Int32.to_int !r) (1))
                __anonstruct_Graph_4_edges_g_14
                !__anonstruct_Edge_3_existent_0_edges_32
                !__anonstruct_Edge_3_to_edges_32
                !__anonstruct_Edge_3_from_edges_32))
                (count g_6 f2_11 t2_11 (Int.(+) (Int32.to_int !r) (1))
                (Int32.to_int (select __anonstruct_Graph_4_esize_g_14 g_6))
                __anonstruct_Graph_4_edges_g_14
                !__anonstruct_Edge_3_existent_0_edges_32
                !__anonstruct_Edge_3_to_edges_32
                !__anonstruct_Edge_3_from_edges_32))
                (Int.(+)
                (Int.(+)
                (count g_6 f2_11 t2_11 (0) (Int32.to_int !r)
                __anonstruct_Graph_4_edges_g_14 (at
                !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                !__anonstruct_Edge_3_to_edges_32 'Init) (at
                !__anonstruct_Edge_3_from_edges_32 'Init))
                (count g_6 f2_11 t2_11 (Int32.to_int !r)
                (Int.(+) (Int32.to_int !r) (1))
                __anonstruct_Graph_4_edges_g_14
                !__anonstruct_Edge_3_existent_0_edges_32
                !__anonstruct_Edge_3_to_edges_32
                !__anonstruct_Edge_3_from_edges_32))
                (count g_6 f2_11 t2_11 (Int.(+) (Int32.to_int !r) (1))
                (Int32.to_int (select __anonstruct_Graph_4_esize_g_14 g_6))
                __anonstruct_Graph_4_edges_g_14 (at
                !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                !__anonstruct_Edge_3_to_edges_32 'Init) (at
                !__anonstruct_Edge_3_from_edges_32 'Init))))
               /\
               (((=)
                (Int.(+)
                (Int.(+)
                (count g_6 f2_11 t2_11 (0) (Int32.to_int !r)
                __anonstruct_Graph_4_edges_g_14 (at
                !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                !__anonstruct_Edge_3_to_edges_32 'Init) (at
                !__anonstruct_Edge_3_from_edges_32 'Init))
                (count g_6 f2_11 t2_11 (Int32.to_int !r)
                (Int.(+) (Int32.to_int !r) (1))
                __anonstruct_Graph_4_edges_g_14
                !__anonstruct_Edge_3_existent_0_edges_32
                !__anonstruct_Edge_3_to_edges_32
                !__anonstruct_Edge_3_from_edges_32))
                (count g_6 f2_11 t2_11 (Int.(+) (Int32.to_int !r) (1))
                (Int32.to_int (select __anonstruct_Graph_4_esize_g_14 g_6))
                __anonstruct_Graph_4_edges_g_14 (at
                !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                !__anonstruct_Edge_3_to_edges_32 'Init) (at
                !__anonstruct_Edge_3_from_edges_32 'Init)))
                (Int.(+)
                (Int.(+)
                (Int.(+)
                (count g_6 f2_11 t2_11 (0) (Int32.to_int !r)
                __anonstruct_Graph_4_edges_g_14 (at
                !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                !__anonstruct_Edge_3_to_edges_32 'Init) (at
                !__anonstruct_Edge_3_from_edges_32 'Init))
                (count g_6 f2_11 t2_11 (Int32.to_int !r)
                (Int.(+) (Int32.to_int !r) (1))
                __anonstruct_Graph_4_edges_g_14 (at
                !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                !__anonstruct_Edge_3_to_edges_32 'Init) (at
                !__anonstruct_Edge_3_from_edges_32 'Init)))
                (count g_6 f2_11 t2_11 (Int.(+) (Int32.to_int !r) (1))
                (Int32.to_int (select __anonstruct_Graph_4_esize_g_14 g_6))
                __anonstruct_Graph_4_edges_g_14 (at
                !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                !__anonstruct_Edge_3_to_edges_32 'Init) (at
                !__anonstruct_Edge_3_from_edges_32 'Init)))
                (count g_6 f2_11 t2_11 (Int32.to_int !r)
                (Int.(+) (Int32.to_int !r) (1))
                __anonstruct_Graph_4_edges_g_14
                !__anonstruct_Edge_3_existent_0_edges_32
                !__anonstruct_Edge_3_to_edges_32
                !__anonstruct_Edge_3_from_edges_32)))
               /\
               (((=)
                (Int.(+)
                (Int.(+)
                (Int.(+)
                (count g_6 f2_11 t2_11 (0) (Int32.to_int !r)
                __anonstruct_Graph_4_edges_g_14 (at
                !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                !__anonstruct_Edge_3_to_edges_32 'Init) (at
                !__anonstruct_Edge_3_from_edges_32 'Init))
                (count g_6 f2_11 t2_11 (Int32.to_int !r)
                (Int.(+) (Int32.to_int !r) (1))
                __anonstruct_Graph_4_edges_g_14 (at
                !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                !__anonstruct_Edge_3_to_edges_32 'Init) (at
                !__anonstruct_Edge_3_from_edges_32 'Init)))
                (count g_6 f2_11 t2_11 (Int.(+) (Int32.to_int !r) (1))
                (Int32.to_int (select __anonstruct_Graph_4_esize_g_14 g_6))
                __anonstruct_Graph_4_edges_g_14 (at
                !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                !__anonstruct_Edge_3_to_edges_32 'Init) (at
                !__anonstruct_Edge_3_from_edges_32 'Init)))
                (count g_6 f2_11 t2_11 (Int32.to_int !r)
                (Int.(+) (Int32.to_int !r) (1))
                __anonstruct_Graph_4_edges_g_14
                !__anonstruct_Edge_3_existent_0_edges_32
                !__anonstruct_Edge_3_to_edges_32
                !__anonstruct_Edge_3_from_edges_32))
                (Int.(+)
                (Int.(+)
                (count g_6 f2_11 t2_11 (0) (Int.(+) (Int32.to_int !r) (1))
                __anonstruct_Graph_4_edges_g_14 (at
                !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                !__anonstruct_Edge_3_to_edges_32 'Init) (at
                !__anonstruct_Edge_3_from_edges_32 'Init))
                (count g_6 f2_11 t2_11 (Int.(+) (Int32.to_int !r) (1))
                (Int32.to_int (select __anonstruct_Graph_4_esize_g_14 g_6))
                __anonstruct_Graph_4_edges_g_14 (at
                !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                !__anonstruct_Edge_3_to_edges_32 'Init) (at
                !__anonstruct_Edge_3_from_edges_32 'Init)))
                (count g_6 f2_11 t2_11 (Int32.to_int !r)
                (Int.(+) (Int32.to_int !r) (1))
                __anonstruct_Graph_4_edges_g_14
                !__anonstruct_Edge_3_existent_0_edges_32
                !__anonstruct_Edge_3_to_edges_32
                !__anonstruct_Edge_3_from_edges_32)))
               /\
               ((=)
               (Int.(+)
               (Int.(+)
               (count g_6 f2_11 t2_11 (0) (Int.(+) (Int32.to_int !r) (1))
               __anonstruct_Graph_4_edges_g_14 (at
               !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
               !__anonstruct_Edge_3_to_edges_32 'Init) (at
               !__anonstruct_Edge_3_from_edges_32 'Init))
               (count g_6 f2_11 t2_11 (Int.(+) (Int32.to_int !r) (1))
               (Int32.to_int (select __anonstruct_Graph_4_esize_g_14 g_6))
               __anonstruct_Graph_4_edges_g_14 (at
               !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
               !__anonstruct_Edge_3_to_edges_32 'Init) (at
               !__anonstruct_Edge_3_from_edges_32 'Init)))
               (count g_6 f2_11 t2_11 (Int32.to_int !r)
               (Int.(+) (Int32.to_int !r) (1))
               __anonstruct_Graph_4_edges_g_14
               !__anonstruct_Edge_3_existent_0_edges_32
               !__anonstruct_Edge_3_to_edges_32
               !__anonstruct_Edge_3_from_edges_32))
               (Int.(+)
               (count g_6 f2_11 t2_11 (0)
               (Int32.to_int (select __anonstruct_Graph_4_esize_g_14 g_6))
               __anonstruct_Graph_4_edges_g_14 (at
               !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
               !__anonstruct_Edge_3_to_edges_32 'Init) (at
               !__anonstruct_Edge_3_from_edges_32 'Init))
               (count g_6 f2_11 t2_11 (Int32.to_int !r)
               (Int.(+) (Int32.to_int !r) (1))
               __anonstruct_Graph_4_edges_g_14
               !__anonstruct_Edge_3_existent_0_edges_32
               !__anonstruct_Edge_3_to_edges_32
               !__anonstruct_Edge_3_from_edges_32))))))))))) }); () end;
             begin
             (assert {
             (#"/home/nik/Projects/ver/hw3/mygraph.c" 218 19 184#
             "expl:Assertion in line 218"
             (forall f2_12 : int.
              (forall t2_12 : int.
               ((=)
               (count g_6 f2_12 t2_12 (0)
               (Int32.to_int (select __anonstruct_Graph_4_esize_g_14 g_6))
               __anonstruct_Graph_4_edges_g_14
               !__anonstruct_Edge_3_existent_0_edges_32
               !__anonstruct_Edge_3_to_edges_32
               !__anonstruct_Edge_3_from_edges_32)
               (Int.(+)
               (Int.(+)
               (count g_6 f2_12 t2_12 (0)
               (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_14 g_6))
               __anonstruct_Graph_4_edges_g_14 (at
               !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
               !__anonstruct_Edge_3_to_edges_32 'Init) (at
               !__anonstruct_Edge_3_from_edges_32 'Init))
               (count g_6 f2_12 t2_12
               (Int.(-)
               (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_14 g_6))
               (1))
               (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_14 g_6))
               __anonstruct_Graph_4_edges_g_14
               !__anonstruct_Edge_3_existent_0_edges_32
               !__anonstruct_Edge_3_to_edges_32
               !__anonstruct_Edge_3_from_edges_32))
               (count g_6 f2_12 t2_12
               (Int.(+)
               (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_14 g_6))
               (1))
               (Int32.to_int (select __anonstruct_Graph_4_esize_g_14 g_6))
               __anonstruct_Graph_4_edges_g_14 (at
               !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
               !__anonstruct_Edge_3_to_edges_32 'Init) (at
               !__anonstruct_Edge_3_from_edges_32 'Init))))))) }); () end;
             begin
             (assert {
             (#"/home/nik/Projects/ver/hw3/mygraph.c" 219 18 172#
             "expl:Assertion in line 219"
             (forall f2_13 : int.
              (forall t2_13 : int.
               (((not ((=) f2_13 (Int32.to_int f_2))) \/
                (not ((=) t2_13 (Int32.to_int t_2)))) ->
                ((=)
                (count g_6 f2_13 t2_13 (0)
                (Int32.to_int (select __anonstruct_Graph_4_esize_g_14 g_6))
                __anonstruct_Graph_4_edges_g_14
                !__anonstruct_Edge_3_existent_0_edges_32
                !__anonstruct_Edge_3_to_edges_32
                !__anonstruct_Edge_3_from_edges_32)
                (Int.(+)
                (count g_6 f2_13 t2_13 (0)
                (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_14 g_6))
                __anonstruct_Graph_4_edges_g_14 (at
                !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                !__anonstruct_Edge_3_to_edges_32 'Init) (at
                !__anonstruct_Edge_3_from_edges_32 'Init))
                (count g_6 f2_13 t2_13
                (Int.(+)
                (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_14 g_6))
                (1))
                (Int32.to_int (select __anonstruct_Graph_4_esize_g_14 g_6))
                __anonstruct_Graph_4_edges_g_14 (at
                !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                !__anonstruct_Edge_3_to_edges_32 'Init) (at
                !__anonstruct_Edge_3_from_edges_32 'Init)))))))) }); () end;
             begin
             (assert {
             (#"/home/nik/Projects/ver/hw3/mygraph.c" 220 18 177#
             "expl:Assertion in line 220"
             (forall f2_14 : int.
              (forall t2_14 : int.
               (((not ((=) f2_14 (Int32.to_int f_2))) \/
                (not ((=) t2_14 (Int32.to_int t_2)))) ->
                ((=)
                (count g_6 f2_14 t2_14 (0)
                (Int32.to_int (select __anonstruct_Graph_4_esize_g_14 g_6))
                __anonstruct_Graph_4_edges_g_14 (at
                !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                !__anonstruct_Edge_3_to_edges_32 'Init) (at
                !__anonstruct_Edge_3_from_edges_32 'Init))
                (Int.(+)
                (count g_6 f2_14 t2_14 (0)
                (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_14 g_6))
                __anonstruct_Graph_4_edges_g_14 (at
                !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                !__anonstruct_Edge_3_to_edges_32 'Init) (at
                !__anonstruct_Edge_3_from_edges_32 'Init))
                (count g_6 f2_14 t2_14
                (Int.(+)
                (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_14 g_6))
                (1))
                (Int32.to_int (select __anonstruct_Graph_4_esize_g_14 g_6))
                __anonstruct_Graph_4_edges_g_14 (at
                !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                !__anonstruct_Edge_3_to_edges_32 'Init) (at
                !__anonstruct_Edge_3_from_edges_32 'Init)))))))) }); () end;
             begin
             (assert {
             (#"/home/nik/Projects/ver/hw3/mygraph.c" 221 18 56#
             "expl:Assertion in line 221"
             ((=)
             (count g_6 (Int32.to_int f_2) (Int32.to_int t_2)
             (Int.(-)
             (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_14 g_6)) (1))
             (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_14 g_6))
             __anonstruct_Graph_4_edges_g_14
             !__anonstruct_Edge_3_existent_0_edges_32
             !__anonstruct_Edge_3_to_edges_32
             !__anonstruct_Edge_3_from_edges_32) (1))) }); () end;
             begin
             (assert {
             (#"/home/nik/Projects/ver/hw3/mygraph.c" 222 18 107#
             "expl:Assertion in line 222"
             (forall f2_15 : int.
              (forall t2_15 : int.
               (((not ((=) f2_15 (Int32.to_int f_2))) \/
                (not ((=) t2_15 (Int32.to_int t_2)))) ->
                ((=)
                (count g_6 f2_15 t2_15
                (Int.(-)
                (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_14 g_6))
                (1))
                (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_14 g_6))
                __anonstruct_Graph_4_edges_g_14
                !__anonstruct_Edge_3_existent_0_edges_32
                !__anonstruct_Edge_3_to_edges_32
                !__anonstruct_Edge_3_from_edges_32) (0)))))) }); () end;
             (raise (Return_label_exc ())) end end end end end end else ());
      try
       begin
       (i_1_0 :=
        (#"mygraph_c.jc" 945 28 40# "expl:Integer cast"
        (Unsafe_int32.of_int (0))));
        'LoopEntry:
        begin
        'LoopEntry:
        'Loop_7:
        loop
        invariant
          { ((#"/home/nik/Projects/ver/hw3/mygraph.c" 225 23 40#
             (#"/home/nik/Projects/ver/hw3/mygraph.c" 225 23 40#
             ((#"/home/nik/Projects/ver/hw3/mygraph.c" 225 23 29#
              (Int32.(<=) (#"mygraph_c.jc" 949 43 55# "expl:Integer cast"
              (Int32.of_int (0))) !i_1_0))
             /\
             (#"/home/nik/Projects/ver/hw3/mygraph.c" 225 28 40#
             (Int32.(<=) !i_1_0 (select !__anonstruct_Graph_4_ecnt_g_14 g_6))))))
            &&
            ((#"/home/nik/Projects/ver/hw3/mygraph.c" 226 23 37#
             (graph_valid g_6 __anonstruct_Vertex_2_vertices_31_alloc_table
             __anonstruct_Edge_3_edges_32_alloc_table
             __anonstruct_Graph_4_esize_g_14 !__anonstruct_Graph_4_ecnt_g_14
             __anonstruct_Graph_4_edges_g_14 __anonstruct_Graph_4_vsize_g_14
             __anonstruct_Graph_4_vertices_g_14
             !__anonstruct_Edge_3_existent_0_edges_32
             !__anonstruct_Edge_3_to_edges_32
             !__anonstruct_Edge_3_from_edges_32
             __anonstruct_Vertex_2_existent_vertices_31))
            &&
            ((#"/home/nik/Projects/ver/hw3/mygraph.c" 227 23 101#
             (forall f2_31 : int.
              (forall t2_31 : int.
               (forall m_10 : int.
                (forall n_9 : int.
                 ((=)
                 (count g_6 f2_31 t2_31 m_10 n_9
                 __anonstruct_Graph_4_edges_g_14
                 !__anonstruct_Edge_3_existent_0_edges_32
                 !__anonstruct_Edge_3_to_edges_32
                 !__anonstruct_Edge_3_from_edges_32)
                 (count g_6 f2_31 t2_31 m_10 n_9
                 __anonstruct_Graph_4_edges_g_14 (at
                 !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                 !__anonstruct_Edge_3_to_edges_32 'Init) (at
                 !__anonstruct_Edge_3_from_edges_32 'Init))))))))
            &&
            ((#"/home/nik/Projects/ver/hw3/mygraph.c" 228 23 33#
             (not
             (full g_6 __anonstruct_Graph_4_esize_g_14
             __anonstruct_Graph_4_edges_g_14
             !__anonstruct_Edge_3_existent_0_edges_32)))
            &&
            ((#"/home/nik/Projects/ver/hw3/mygraph.c" 229 23 79#
             (exists k_10 : int.
              (((<=) (0) k_10) /\
              (((<) k_10
               (Int32.to_int (select !__anonstruct_Graph_4_ecnt_g_14 g_6)))
              /\
              ((=)
              (Int32.to_int
              (select !__anonstruct_Edge_3_existent_0_edges_32
              (shift (select __anonstruct_Graph_4_edges_g_14 g_6) k_10)))
              (0))))))
            &&
            ((#"/home/nik/Projects/ver/hw3/mygraph.c" 230 23 75#
             (forall k_11 : int.
              ((((<=) (0) k_11) /\ ((<) k_11 (Int32.to_int !i_1_0))) ->
               (not
               ((=)
               (Int32.to_int
               (select !__anonstruct_Edge_3_existent_0_edges_32
               (shift (select __anonstruct_Graph_4_edges_g_14 g_6) k_11)))
               (0))))))
            &&
            (#"/home/nik/Projects/ver/hw3/mygraph.c" 231 23 99#
            (forall k_12 : int.
             ((((<=) (0) k_12) /\
              ((<) k_12
              (Int32.to_int (select __anonstruct_Graph_4_esize_g_14 g_6))))
              ->
              ((Int32.(=)
               (select !__anonstruct_Edge_3_from_edges_32
               (shift (select __anonstruct_Graph_4_edges_g_14 g_6) k_12))
               (select (at !__anonstruct_Edge_3_from_edges_32 'Init)
               (shift (select __anonstruct_Graph_4_edges_g_14 g_6) k_12)))
              /\
              ((Int32.(=)
               (select !__anonstruct_Edge_3_to_edges_32
               (shift (select __anonstruct_Graph_4_edges_g_14 g_6) k_12))
               (select (at !__anonstruct_Edge_3_to_edges_32 'Init)
               (shift (select __anonstruct_Graph_4_edges_g_14 g_6) k_12)))
              /\
              (Int32.(=)
              (select !__anonstruct_Edge_3_existent_0_edges_32
              (shift (select __anonstruct_Graph_4_edges_g_14 g_6) k_12))
              (select (at !__anonstruct_Edge_3_existent_0_edges_32 'Init)
              (shift (select __anonstruct_Graph_4_edges_g_14 g_6) k_12)))))))))))))) }
          
         begin
         any unit requires { true } ensures { true } ;
          try
           begin
           'LoopCurrent:
           begin
           'LoopCurrent:
           (if
           (#"/home/nik/Projects/ver/hw3/mygraph.c" 234 20 31#
           (Unsafe_int32.(<)  !i_1_0
            (acc  !__anonstruct_Graph_4_ecnt_g_14 g_6 ) )) then ()
           else (raise (Goto_while_0_break_1_0_exc ())));
            (if
            (#"/home/nik/Projects/ver/hw3/mygraph.c" 235 11 32#
            (Bool.notb 
             (Unsafe_int32.(<>) 
              (acc  !__anonstruct_Edge_3_existent_0_edges_32
               (shift_  (acc  __anonstruct_Graph_4_edges_g_14 g_6 )
                (Unsafe_int32.to_int  !i_1_0 ) ) )
              (#"mygraph_c.jc" 992 37 49# "expl:Integer cast"
              (Unsafe_int32.of_int (0))) ) ))
            then
             begin
             (let _jessie_78 = f_2 in
             (let _jessie_79 = (acc  __anonstruct_Graph_4_edges_g_14 g_6 ) in
             (let _jessie_80 = (Unsafe_int32.to_int  !i_1_0 ) in
             (let _jessie_81 = (shift_  _jessie_79 _jessie_80 ) in
             (upd  __anonstruct_Edge_3_from_edges_32 _jessie_81 _jessie_78 )))));
              begin
              (let _jessie_73 = t_2 in
              (let _jessie_74 = (acc  __anonstruct_Graph_4_edges_g_14 g_6 )
              in
              (let _jessie_75 = (Unsafe_int32.to_int  !i_1_0 ) in
              (let _jessie_76 = (shift_  _jessie_74 _jessie_75 ) in
              (upd  __anonstruct_Edge_3_to_edges_32 _jessie_76 _jessie_73 )))));
               begin
               (let _jessie_68 =
               (#"mygraph_c.jc" 998 76 88# "expl:Integer cast"
               (Unsafe_int32.of_int (1))) in
               (let _jessie_69 = (acc  __anonstruct_Graph_4_edges_g_14 g_6 )
               in
               (let _jessie_70 = (Unsafe_int32.to_int  !i_1_0 ) in
               (let _jessie_71 = (shift_  _jessie_69 _jessie_70 ) in
               (upd  __anonstruct_Edge_3_existent_0_edges_32 _jessie_71
                _jessie_68 )))));
                begin
                (r_0 := !i_1_0);
                 try
                  begin
                  (k :=
                   (#"mygraph_c.jc" 1001 39 51# "expl:Integer cast"
                   (Unsafe_int32.of_int (0))));
                   'LoopEntry:
                   begin
                   'LoopEntry:
                   'Loop_8:
                   loop
                   invariant
                     { ((#"/home/nik/Projects/ver/hw3/mygraph.c" 240 30 41#
                        (#"/home/nik/Projects/ver/hw3/mygraph.c" 240 30 41#
                        ((#"/home/nik/Projects/ver/hw3/mygraph.c" 240 30 36#
                         (Int32.(<=) (#"mygraph_c.jc" 1005 58 70#
                         "expl:Integer cast" (Int32.of_int (0))) !k))
                        /\
                        (#"/home/nik/Projects/ver/hw3/mygraph.c" 240 35 41#
                        (Int32.(<=) !k !r_0)))))
                       &&
                       ((#"/home/nik/Projects/ver/hw3/mygraph.c" 241 31 118#
                        (forall p : int.
                         ((((<=) (0) p) /\
                          (((<) p
                           (Int32.to_int
                           (select __anonstruct_Graph_4_esize_g_14 g_6)))
                          /\ (not ((=) p (Int32.to_int !i_1_0))))) ->
                          ((Int32.(=)
                           (select !__anonstruct_Edge_3_from_edges_32
                           (shift
                           (select __anonstruct_Graph_4_edges_g_14 g_6) p))
                           (select (at !__anonstruct_Edge_3_from_edges_32
                           'Init)
                           (shift
                           (select __anonstruct_Graph_4_edges_g_14 g_6) p)))
                          /\
                          ((Int32.(=)
                           (select !__anonstruct_Edge_3_to_edges_32
                           (shift
                           (select __anonstruct_Graph_4_edges_g_14 g_6) p))
                           (select (at !__anonstruct_Edge_3_to_edges_32
                           'Init)
                           (shift
                           (select __anonstruct_Graph_4_edges_g_14 g_6) p)))
                          /\
                          (Int32.(=)
                          (select !__anonstruct_Edge_3_existent_0_edges_32
                          (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                          p))
                          (select (at
                          !__anonstruct_Edge_3_existent_0_edges_32 'Init)
                          (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                          p))))))))
                       &&
                       ((#"/home/nik/Projects/ver/hw3/mygraph.c" 242 32 141#
                        (forall f2_16 : int.
                         (forall t2_16 : int.
                          (((<=) (Int.(+) (Int32.to_int !k) (1))
                           (Int32.to_int !r_0)) ->
                           ((=)
                           (count g_6 f2_16 t2_16 (0)
                           (Int.(+) (Int32.to_int !k) (1))
                           __anonstruct_Graph_4_edges_g_14
                           !__anonstruct_Edge_3_existent_0_edges_32
                           !__anonstruct_Edge_3_to_edges_32
                           !__anonstruct_Edge_3_from_edges_32)
                           (Int.(+)
                           (count g_6 f2_16 t2_16 (0) (Int32.to_int !k)
                           __anonstruct_Graph_4_edges_g_14
                           !__anonstruct_Edge_3_existent_0_edges_32
                           !__anonstruct_Edge_3_to_edges_32
                           !__anonstruct_Edge_3_from_edges_32)
                           (count g_6 f2_16 t2_16 (Int32.to_int !k)
                           (Int.(+) (Int32.to_int !k) (1))
                           __anonstruct_Graph_4_edges_g_14
                           !__anonstruct_Edge_3_existent_0_edges_32
                           !__anonstruct_Edge_3_to_edges_32
                           !__anonstruct_Edge_3_from_edges_32)))))))
                       &&
                       ((#"/home/nik/Projects/ver/hw3/mygraph.c" 243 32 128#
                        (forall p_0 : int.
                         ((((<=) (0) p_0) /\
                          (((<) p_0
                           (Int32.to_int
                           (select __anonstruct_Graph_4_esize_g_14 g_6)))
                          /\ (not ((=) p_0 (Int32.to_int !r_0))))) ->
                          ((Int32.(=)
                           (select !__anonstruct_Edge_3_from_edges_32
                           (shift
                           (select __anonstruct_Graph_4_edges_g_14 g_6) p_0))
                           (select (at !__anonstruct_Edge_3_from_edges_32
                           'Init)
                           (shift
                           (select __anonstruct_Graph_4_edges_g_14 g_6) p_0)))
                          /\
                          ((Int32.(=)
                           (select !__anonstruct_Edge_3_to_edges_32
                           (shift
                           (select __anonstruct_Graph_4_edges_g_14 g_6) p_0))
                           (select (at !__anonstruct_Edge_3_to_edges_32
                           'Init)
                           (shift
                           (select __anonstruct_Graph_4_edges_g_14 g_6) p_0)))
                          /\
                          (Int32.(=)
                          (select !__anonstruct_Edge_3_existent_0_edges_32
                          (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                          p_0))
                          (select (at
                          !__anonstruct_Edge_3_existent_0_edges_32 'Init)
                          (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                          p_0))))))))
                       &&
                       ((#"/home/nik/Projects/ver/hw3/mygraph.c" 244 32 89#
                        ((Int32.(<) !k !r_0) ->
                         ((Int32.(=)
                          (select !__anonstruct_Edge_3_from_edges_32
                          (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                          (Int32.to_int !k)))
                          (select (at !__anonstruct_Edge_3_from_edges_32
                          'Init)
                          (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                          (Int32.to_int !k))))
                         /\
                         ((Int32.(=)
                          (select !__anonstruct_Edge_3_to_edges_32
                          (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                          (Int32.to_int !k)))
                          (select (at !__anonstruct_Edge_3_to_edges_32 'Init)
                          (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                          (Int32.to_int !k))))
                         /\
                         (Int32.(=)
                         (select !__anonstruct_Edge_3_existent_0_edges_32
                         (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                         (Int32.to_int !k)))
                         (select (at !__anonstruct_Edge_3_existent_0_edges_32
                         'Init)
                         (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                         (Int32.to_int !k))))))))
                       &&
                       ((#"/home/nik/Projects/ver/hw3/mygraph.c" 245 32 123#
                        (forall f2_17 : int.
                         (forall t2_17 : int.
                          (((<=) (Int.(+) (Int32.to_int !k) (1))
                           (Int32.to_int !r_0)) ->
                           ((=)
                           (count g_6 f2_17 t2_17 (Int32.to_int !k)
                           (Int.(+) (Int32.to_int !k) (1))
                           __anonstruct_Graph_4_edges_g_14
                           !__anonstruct_Edge_3_existent_0_edges_32
                           !__anonstruct_Edge_3_to_edges_32
                           !__anonstruct_Edge_3_from_edges_32)
                           (count g_6 f2_17 t2_17 (Int32.to_int !k)
                           (Int.(+) (Int32.to_int !k) (1))
                           __anonstruct_Graph_4_edges_g_14 (at
                           !__anonstruct_Edge_3_existent_0_edges_32 'Init)
                           (at !__anonstruct_Edge_3_to_edges_32 'Init) (at
                           !__anonstruct_Edge_3_from_edges_32 'Init)))))))
                       &&
                       ((#"/home/nik/Projects/ver/hw3/mygraph.c" 246 32 156#
                        (forall f2_18 : int.
                         (forall t2_18 : int.
                          (((<=) (Int.(+) (Int32.to_int !k) (1))
                           (Int32.to_int !r_0)) ->
                           ((=)
                           (count g_6 f2_18 t2_18 (0)
                           (Int.(+) (Int32.to_int !k) (1))
                           __anonstruct_Graph_4_edges_g_14 (at
                           !__anonstruct_Edge_3_existent_0_edges_32 'Init)
                           (at !__anonstruct_Edge_3_to_edges_32 'Init) (at
                           !__anonstruct_Edge_3_from_edges_32 'Init))
                           (Int.(+)
                           (count g_6 f2_18 t2_18 (0) (Int32.to_int !k)
                           __anonstruct_Graph_4_edges_g_14 (at
                           !__anonstruct_Edge_3_existent_0_edges_32 'Init)
                           (at !__anonstruct_Edge_3_to_edges_32 'Init) (at
                           !__anonstruct_Edge_3_from_edges_32 'Init))
                           (count g_6 f2_18 t2_18 (Int32.to_int !k)
                           (Int.(+) (Int32.to_int !k) (1))
                           __anonstruct_Graph_4_edges_g_14 (at
                           !__anonstruct_Edge_3_existent_0_edges_32 'Init)
                           (at !__anonstruct_Edge_3_to_edges_32 'Init) (at
                           !__anonstruct_Edge_3_from_edges_32 'Init))))))))
                       &&
                       ((#"/home/nik/Projects/ver/hw3/mygraph.c" 247 32 105#
                        (forall f2_19 : int.
                         (forall t2_19 : int.
                          ((=)
                          (count g_6 f2_19 t2_19 (0) (Int32.to_int !k)
                          __anonstruct_Graph_4_edges_g_14
                          !__anonstruct_Edge_3_existent_0_edges_32
                          !__anonstruct_Edge_3_to_edges_32
                          !__anonstruct_Edge_3_from_edges_32)
                          (count g_6 f2_19 t2_19 (0) (Int32.to_int !k)
                          __anonstruct_Graph_4_edges_g_14 (at
                          !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                          !__anonstruct_Edge_3_to_edges_32 'Init) (at
                          !__anonstruct_Edge_3_from_edges_32 'Init))))))
                       &&
                       (#"/home/nik/Projects/ver/hw3/mygraph.c" 248 31 45#
                       (graph_valid g_6
                       __anonstruct_Vertex_2_vertices_31_alloc_table
                       __anonstruct_Edge_3_edges_32_alloc_table
                       __anonstruct_Graph_4_esize_g_14
                       !__anonstruct_Graph_4_ecnt_g_14
                       __anonstruct_Graph_4_edges_g_14
                       __anonstruct_Graph_4_vsize_g_14
                       __anonstruct_Graph_4_vertices_g_14
                       !__anonstruct_Edge_3_existent_0_edges_32
                       !__anonstruct_Edge_3_to_edges_32
                       !__anonstruct_Edge_3_from_edges_32
                       __anonstruct_Vertex_2_existent_vertices_31)))))))))) } 
                     
                    begin
                    any unit requires { true } ensures { true } ;
                     try
                      begin
                      'LoopCurrent:
                      begin
                      'LoopCurrent:
                      (if
                      (#"/home/nik/Projects/ver/hw3/mygraph.c" 251 28 33#
                      (Unsafe_int32.(<)  !k !r_0 )) then ()
                      else (raise (Goto_while_1_break_exc ())));
                       (k :=
                        (Unsafe_int32.(+)  !k
                         (#"mygraph_c.jc" 1115 68 80# "expl:Integer cast"
                         (Unsafe_int32.of_int (1))) )) end;
                       (raise (Loop_continue_exc ())) end with
                      Loop_continue_exc _jessie_18 -> () end end end;
                    (raise (Goto_while_1_break_exc ())) end end with
                  Goto_while_1_break_exc _jessie_9 ->
                  'While_1_break: 'While_1_break: () end;
                 try
                  begin
                  (k_0 :=
                   (Unsafe_int32.(+)  !r_0
                    (#"mygraph_c.jc" 1122 64 76# "expl:Integer cast"
                    (Unsafe_int32.of_int (1))) ));
                   'LoopEntry:
                   begin
                   'LoopEntry:
                   'Loop_9:
                   loop
                   invariant
                     { ((#"/home/nik/Projects/ver/hw3/mygraph.c" 254 30 50#
                        (#"/home/nik/Projects/ver/hw3/mygraph.c" 254 30 50#
                        ((#"/home/nik/Projects/ver/hw3/mygraph.c" 254 30 38#
                         ((<=) (Int.(+) (Int32.to_int !r_0) (1))
                         (Int32.to_int !k_0)))
                        /\
                        (#"/home/nik/Projects/ver/hw3/mygraph.c" 254 37 50#
                        (Int32.(<=) !k_0
                        (select __anonstruct_Graph_4_esize_g_14 g_6))))))
                       &&
                       ((#"/home/nik/Projects/ver/hw3/mygraph.c" 255 26 40#
                        (graph_valid g_6
                        __anonstruct_Vertex_2_vertices_31_alloc_table
                        __anonstruct_Edge_3_edges_32_alloc_table
                        __anonstruct_Graph_4_esize_g_14
                        !__anonstruct_Graph_4_ecnt_g_14
                        __anonstruct_Graph_4_edges_g_14
                        __anonstruct_Graph_4_vsize_g_14
                        __anonstruct_Graph_4_vertices_g_14
                        !__anonstruct_Edge_3_existent_0_edges_32
                        !__anonstruct_Edge_3_to_edges_32
                        !__anonstruct_Edge_3_from_edges_32
                        __anonstruct_Vertex_2_existent_vertices_31))
                       &&
                       ((#"/home/nik/Projects/ver/hw3/mygraph.c" 256 26 103#
                        (forall p_1 : int.
                         ((((<) (Int32.to_int !r_0) p_1) /\
                          ((<) p_1
                          (Int32.to_int
                          (select __anonstruct_Graph_4_esize_g_14 g_6)))) ->
                          ((Int32.(=)
                           (select !__anonstruct_Edge_3_from_edges_32
                           (shift
                           (select __anonstruct_Graph_4_edges_g_14 g_6) p_1))
                           (select (at !__anonstruct_Edge_3_from_edges_32
                           'Init)
                           (shift
                           (select __anonstruct_Graph_4_edges_g_14 g_6) p_1)))
                          /\
                          ((Int32.(=)
                           (select !__anonstruct_Edge_3_to_edges_32
                           (shift
                           (select __anonstruct_Graph_4_edges_g_14 g_6) p_1))
                           (select (at !__anonstruct_Edge_3_to_edges_32
                           'Init)
                           (shift
                           (select __anonstruct_Graph_4_edges_g_14 g_6) p_1)))
                          /\
                          (Int32.(=)
                          (select !__anonstruct_Edge_3_existent_0_edges_32
                          (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                          p_1))
                          (select (at
                          !__anonstruct_Edge_3_existent_0_edges_32 'Init)
                          (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                          p_1))))))))
                       &&
                       ((#"/home/nik/Projects/ver/hw3/mygraph.c" 257 27 157#
                        (forall f2_20 : int.
                         (forall t2_20 : int.
                          ((((<=) (Int.(+) (Int32.to_int !r_0) (1))
                            (Int.(+) (Int32.to_int !k_0) (1)))
                           /\
                           ((<=) (Int.(+) (Int32.to_int !k_0) (1))
                           (Int32.to_int
                           (select __anonstruct_Graph_4_esize_g_14 g_6)))) ->
                           ((=)
                           (count g_6 f2_20 t2_20
                           (Int.(+) (Int32.to_int !r_0) (1))
                           (Int.(+) (Int32.to_int !k_0) (1))
                           __anonstruct_Graph_4_edges_g_14
                           !__anonstruct_Edge_3_existent_0_edges_32
                           !__anonstruct_Edge_3_to_edges_32
                           !__anonstruct_Edge_3_from_edges_32)
                           (Int.(+)
                           (count g_6 f2_20 t2_20
                           (Int.(+) (Int32.to_int !r_0) (1))
                           (Int32.to_int !k_0)
                           __anonstruct_Graph_4_edges_g_14
                           !__anonstruct_Edge_3_existent_0_edges_32
                           !__anonstruct_Edge_3_to_edges_32
                           !__anonstruct_Edge_3_from_edges_32)
                           (count g_6 f2_20 t2_20 (Int32.to_int !k_0)
                           (Int.(+) (Int32.to_int !k_0) (1))
                           __anonstruct_Graph_4_edges_g_14
                           !__anonstruct_Edge_3_existent_0_edges_32
                           !__anonstruct_Edge_3_to_edges_32
                           !__anonstruct_Edge_3_from_edges_32)))))))
                       &&
                       ((#"/home/nik/Projects/ver/hw3/mygraph.c" 258 27 91#
                        ((Int32.(<) !k_0
                         (select __anonstruct_Graph_4_esize_g_14 g_6)) ->
                         ((Int32.(=)
                          (select !__anonstruct_Edge_3_from_edges_32
                          (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                          (Int32.to_int !k_0)))
                          (select (at !__anonstruct_Edge_3_from_edges_32
                          'Init)
                          (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                          (Int32.to_int !k_0))))
                         /\
                         ((Int32.(=)
                          (select !__anonstruct_Edge_3_to_edges_32
                          (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                          (Int32.to_int !k_0)))
                          (select (at !__anonstruct_Edge_3_to_edges_32 'Init)
                          (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                          (Int32.to_int !k_0))))
                         /\
                         (Int32.(=)
                         (select !__anonstruct_Edge_3_existent_0_edges_32
                         (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                         (Int32.to_int !k_0)))
                         (select (at !__anonstruct_Edge_3_existent_0_edges_32
                         'Init)
                         (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                         (Int32.to_int !k_0))))))))
                       &&
                       ((#"/home/nik/Projects/ver/hw3/mygraph.c" 259 27 126#
                        (forall f2_21 : int.
                         (forall t2_21 : int.
                          (((<=) (Int.(+) (Int32.to_int !k_0) (1))
                           (Int32.to_int
                           (select __anonstruct_Graph_4_esize_g_14 g_6))) ->
                           ((=)
                           (count g_6 f2_21 t2_21 (Int32.to_int !k_0)
                           (Int.(+) (Int32.to_int !k_0) (1))
                           __anonstruct_Graph_4_edges_g_14
                           !__anonstruct_Edge_3_existent_0_edges_32
                           !__anonstruct_Edge_3_to_edges_32
                           !__anonstruct_Edge_3_from_edges_32)
                           (count g_6 f2_21 t2_21 (Int32.to_int !k_0)
                           (Int.(+) (Int32.to_int !k_0) (1))
                           __anonstruct_Graph_4_edges_g_14 (at
                           !__anonstruct_Edge_3_existent_0_edges_32 'Init)
                           (at !__anonstruct_Edge_3_to_edges_32 'Init) (at
                           !__anonstruct_Edge_3_from_edges_32 'Init)))))))
                       &&
                       (#"/home/nik/Projects/ver/hw3/mygraph.c" 260 27 316#
                       (forall f2_22 : int.
                        (forall t2_22 : int.
                         ((((<) (Int.(+) (Int32.to_int !r_0) (1))
                           (Int32.to_int !k_0))
                          /\
                          (Int32.(<=) !k_0
                          (select __anonstruct_Graph_4_esize_g_14 g_6))) ->
                          (((=)
                           (count g_6 f2_22 t2_22
                           (Int.(+) (Int32.to_int !r_0) (1))
                           (Int32.to_int !k_0)
                           __anonstruct_Graph_4_edges_g_14
                           !__anonstruct_Edge_3_existent_0_edges_32
                           !__anonstruct_Edge_3_to_edges_32
                           !__anonstruct_Edge_3_from_edges_32)
                           (Int.(+)
                           (count g_6 f2_22 t2_22
                           (Int.(+) (Int32.to_int !r_0) (1))
                           (Int.(-) (Int32.to_int !k_0) (1))
                           __anonstruct_Graph_4_edges_g_14
                           !__anonstruct_Edge_3_existent_0_edges_32
                           !__anonstruct_Edge_3_to_edges_32
                           !__anonstruct_Edge_3_from_edges_32)
                           (count g_6 f2_22 t2_22
                           (Int.(-) (Int32.to_int !k_0) (1))
                           (Int32.to_int !k_0)
                           __anonstruct_Graph_4_edges_g_14
                           !__anonstruct_Edge_3_existent_0_edges_32
                           !__anonstruct_Edge_3_to_edges_32
                           !__anonstruct_Edge_3_from_edges_32)))
                          /\
                          (((=)
                           (Int.(+)
                           (count g_6 f2_22 t2_22
                           (Int.(+) (Int32.to_int !r_0) (1))
                           (Int.(-) (Int32.to_int !k_0) (1))
                           __anonstruct_Graph_4_edges_g_14
                           !__anonstruct_Edge_3_existent_0_edges_32
                           !__anonstruct_Edge_3_to_edges_32
                           !__anonstruct_Edge_3_from_edges_32)
                           (count g_6 f2_22 t2_22
                           (Int.(-) (Int32.to_int !k_0) (1))
                           (Int32.to_int !k_0)
                           __anonstruct_Graph_4_edges_g_14
                           !__anonstruct_Edge_3_existent_0_edges_32
                           !__anonstruct_Edge_3_to_edges_32
                           !__anonstruct_Edge_3_from_edges_32))
                           (Int.(+)
                           (count g_6 f2_22 t2_22
                           (Int.(+) (Int32.to_int !r_0) (1))
                           (Int.(-) (Int32.to_int !k_0) (1))
                           __anonstruct_Graph_4_edges_g_14
                           !__anonstruct_Edge_3_existent_0_edges_32
                           !__anonstruct_Edge_3_to_edges_32
                           !__anonstruct_Edge_3_from_edges_32)
                           (count g_6 f2_22 t2_22
                           (Int.(-) (Int32.to_int !k_0) (1))
                           (Int32.to_int !k_0)
                           __anonstruct_Graph_4_edges_g_14 (at
                           !__anonstruct_Edge_3_existent_0_edges_32 'Init)
                           (at !__anonstruct_Edge_3_to_edges_32 'Init) (at
                           !__anonstruct_Edge_3_from_edges_32 'Init))))
                          /\
                          (((=)
                           (Int.(+)
                           (count g_6 f2_22 t2_22
                           (Int.(+) (Int32.to_int !r_0) (1))
                           (Int.(-) (Int32.to_int !k_0) (1))
                           __anonstruct_Graph_4_edges_g_14
                           !__anonstruct_Edge_3_existent_0_edges_32
                           !__anonstruct_Edge_3_to_edges_32
                           !__anonstruct_Edge_3_from_edges_32)
                           (count g_6 f2_22 t2_22
                           (Int.(-) (Int32.to_int !k_0) (1))
                           (Int32.to_int !k_0)
                           __anonstruct_Graph_4_edges_g_14 (at
                           !__anonstruct_Edge_3_existent_0_edges_32 'Init)
                           (at !__anonstruct_Edge_3_to_edges_32 'Init) (at
                           !__anonstruct_Edge_3_from_edges_32 'Init)))
                           (Int.(+)
                           (count g_6 f2_22 t2_22
                           (Int.(+) (Int32.to_int !r_0) (1))
                           (Int.(-) (Int32.to_int !k_0) (1))
                           __anonstruct_Graph_4_edges_g_14 (at
                           !__anonstruct_Edge_3_existent_0_edges_32 'Init)
                           (at !__anonstruct_Edge_3_to_edges_32 'Init) (at
                           !__anonstruct_Edge_3_from_edges_32 'Init))
                           (count g_6 f2_22 t2_22
                           (Int.(-) (Int32.to_int !k_0) (1))
                           (Int32.to_int !k_0)
                           __anonstruct_Graph_4_edges_g_14 (at
                           !__anonstruct_Edge_3_existent_0_edges_32 'Init)
                           (at !__anonstruct_Edge_3_to_edges_32 'Init) (at
                           !__anonstruct_Edge_3_from_edges_32 'Init))))
                          /\
                          ((=)
                          (Int.(+)
                          (count g_6 f2_22 t2_22
                          (Int.(+) (Int32.to_int !r_0) (1))
                          (Int.(-) (Int32.to_int !k_0) (1))
                          __anonstruct_Graph_4_edges_g_14 (at
                          !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                          !__anonstruct_Edge_3_to_edges_32 'Init) (at
                          !__anonstruct_Edge_3_from_edges_32 'Init))
                          (count g_6 f2_22 t2_22
                          (Int.(-) (Int32.to_int !k_0) (1))
                          (Int32.to_int !k_0) __anonstruct_Graph_4_edges_g_14
                          (at !__anonstruct_Edge_3_existent_0_edges_32 'Init)
                          (at !__anonstruct_Edge_3_to_edges_32 'Init) (at
                          !__anonstruct_Edge_3_from_edges_32 'Init)))
                          (count g_6 f2_22 t2_22
                          (Int.(+) (Int32.to_int !r_0) (1))
                          (Int32.to_int !k_0) __anonstruct_Graph_4_edges_g_14
                          (at !__anonstruct_Edge_3_existent_0_edges_32 'Init)
                          (at !__anonstruct_Edge_3_to_edges_32 'Init) (at
                          !__anonstruct_Edge_3_from_edges_32 'Init)))))))))))))))) }
                     
                    begin
                    any unit requires { true } ensures { true } ;
                     try
                      begin
                      'LoopCurrent:
                      begin
                      'LoopCurrent:
                      (if
                      (#"/home/nik/Projects/ver/hw3/mygraph.c" 266 32 44#
                      (Unsafe_int32.(<)  !k_0
                       (acc  __anonstruct_Graph_4_esize_g_14 g_6 ) )) 
                      then () else (raise (Goto_while_1_break_0_exc ())));
                       (k_0 :=
                        (Unsafe_int32.(+)  !k_0
                         (#"mygraph_c.jc" 1285 68 80# "expl:Integer cast"
                         (Unsafe_int32.of_int (1))) )) end;
                       (raise (Loop_continue_exc ())) end with
                      Loop_continue_exc _jessie_20 -> () end end end;
                    (raise (Goto_while_1_break_0_exc ())) end end with
                  Goto_while_1_break_0_exc _jessie_10 ->
                  'While_1_break_0: 'While_1_break_0: () end;
                 begin
                 (assert {
                 (#"/home/nik/Projects/ver/hw3/mygraph.c" 270 11 83#
                 "expl:Assertion in line 270"
                 (forall f2_23 : int.
                  (forall t2_23 : int.
                   ((=)
                   (count g_6 f2_23 t2_23 (0) (Int32.to_int !i_1_0)
                   __anonstruct_Graph_4_edges_g_14
                   !__anonstruct_Edge_3_existent_0_edges_32
                   !__anonstruct_Edge_3_to_edges_32
                   !__anonstruct_Edge_3_from_edges_32)
                   (count g_6 f2_23 t2_23 (0) (Int32.to_int !i_1_0)
                   __anonstruct_Graph_4_edges_g_14 (at
                   !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                   !__anonstruct_Edge_3_to_edges_32 'Init) (at
                   !__anonstruct_Edge_3_from_edges_32 'Init)))))) }); () end;
                 begin
                 (assert {
                 (#"/home/nik/Projects/ver/hw3/mygraph.c" 271 11 102#
                 "expl:Assertion in line 271"
                 (forall f2_24 : int.
                  (forall t2_24 : int.
                   ((=)
                   (count g_6 f2_24 t2_24 (Int.(+) (Int32.to_int !i_1_0) (1))
                   (Int32.to_int
                   (select __anonstruct_Graph_4_esize_g_14 g_6))
                   __anonstruct_Graph_4_edges_g_14
                   !__anonstruct_Edge_3_existent_0_edges_32
                   !__anonstruct_Edge_3_to_edges_32
                   !__anonstruct_Edge_3_from_edges_32)
                   (count g_6 f2_24 t2_24 (Int.(+) (Int32.to_int !i_1_0) (1))
                   (Int32.to_int
                   (select __anonstruct_Graph_4_esize_g_14 g_6))
                   __anonstruct_Graph_4_edges_g_14 (at
                   !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                   !__anonstruct_Edge_3_to_edges_32 'Init) (at
                   !__anonstruct_Edge_3_from_edges_32 'Init)))))) }); () end;
                 begin
                 (assert {
                 (#"/home/nik/Projects/ver/hw3/mygraph.c" 272 11 143#
                 "expl:Assertion in line 272"
                 (forall f2_25 : int.
                  (forall t2_25 : int.
                   ((=)
                   (count g_6 f2_25 t2_25 (0)
                   (Int32.to_int
                   (select __anonstruct_Graph_4_esize_g_14 g_6))
                   __anonstruct_Graph_4_edges_g_14
                   !__anonstruct_Edge_3_existent_0_edges_32
                   !__anonstruct_Edge_3_to_edges_32
                   !__anonstruct_Edge_3_from_edges_32)
                   (Int.(+)
                   (Int.(+)
                   (count g_6 f2_25 t2_25 (0) (Int32.to_int !i_1_0)
                   __anonstruct_Graph_4_edges_g_14
                   !__anonstruct_Edge_3_existent_0_edges_32
                   !__anonstruct_Edge_3_to_edges_32
                   !__anonstruct_Edge_3_from_edges_32)
                   (count g_6 f2_25 t2_25 (Int32.to_int !i_1_0)
                   (Int.(+) (Int32.to_int !i_1_0) (1))
                   __anonstruct_Graph_4_edges_g_14
                   !__anonstruct_Edge_3_existent_0_edges_32
                   !__anonstruct_Edge_3_to_edges_32
                   !__anonstruct_Edge_3_from_edges_32))
                   (count g_6 f2_25 t2_25 (Int.(+) (Int32.to_int !i_1_0) (1))
                   (Int32.to_int
                   (select __anonstruct_Graph_4_esize_g_14 g_6))
                   __anonstruct_Graph_4_edges_g_14
                   !__anonstruct_Edge_3_existent_0_edges_32
                   !__anonstruct_Edge_3_to_edges_32
                   !__anonstruct_Edge_3_from_edges_32)))))) }); () end;
                 begin
                 (assert {
                 (#"/home/nik/Projects/ver/hw3/mygraph.c" 273 11 151#
                 "expl:Assertion in line 273"
                 (forall f2_26 : int.
                  (forall t2_26 : int.
                   ((=)
                   (count g_6 f2_26 t2_26 (0)
                   (Int32.to_int
                   (select __anonstruct_Graph_4_esize_g_14 g_6))
                   __anonstruct_Graph_4_edges_g_14
                   !__anonstruct_Edge_3_existent_0_edges_32
                   !__anonstruct_Edge_3_to_edges_32
                   !__anonstruct_Edge_3_from_edges_32)
                   (Int.(+)
                   (Int.(+)
                   (count g_6 f2_26 t2_26 (0) (Int32.to_int !i_1_0)
                   __anonstruct_Graph_4_edges_g_14 (at
                   !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                   !__anonstruct_Edge_3_to_edges_32 'Init) (at
                   !__anonstruct_Edge_3_from_edges_32 'Init))
                   (count g_6 f2_26 t2_26 (Int32.to_int !i_1_0)
                   (Int.(+) (Int32.to_int !i_1_0) (1))
                   __anonstruct_Graph_4_edges_g_14
                   !__anonstruct_Edge_3_existent_0_edges_32
                   !__anonstruct_Edge_3_to_edges_32
                   !__anonstruct_Edge_3_from_edges_32))
                   (count g_6 f2_26 t2_26 (Int.(+) (Int32.to_int !i_1_0) (1))
                   (Int32.to_int
                   (select __anonstruct_Graph_4_esize_g_14 g_6))
                   __anonstruct_Graph_4_edges_g_14 (at
                   !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                   !__anonstruct_Edge_3_to_edges_32 'Init) (at
                   !__anonstruct_Edge_3_from_edges_32 'Init))))))) }); () end;
                 begin
                 (assert {
                 (#"/home/nik/Projects/ver/hw3/mygraph.c" 274 10 152#
                 "expl:Assertion in line 274"
                 (forall f2_27 : int.
                  (forall t2_27 : int.
                   (((not ((=) f2_27 (Int32.to_int f_2))) \/
                    (not ((=) t2_27 (Int32.to_int t_2)))) ->
                    ((=)
                    (count g_6 f2_27 t2_27 (0)
                    (Int32.to_int
                    (select __anonstruct_Graph_4_esize_g_14 g_6))
                    __anonstruct_Graph_4_edges_g_14
                    !__anonstruct_Edge_3_existent_0_edges_32
                    !__anonstruct_Edge_3_to_edges_32
                    !__anonstruct_Edge_3_from_edges_32)
                    (Int.(+)
                    (count g_6 f2_27 t2_27 (0) (Int32.to_int !i_1_0)
                    __anonstruct_Graph_4_edges_g_14 (at
                    !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                    !__anonstruct_Edge_3_to_edges_32 'Init) (at
                    !__anonstruct_Edge_3_from_edges_32 'Init))
                    (count g_6 f2_27 t2_27
                    (Int.(+) (Int32.to_int !i_1_0) (1))
                    (Int32.to_int
                    (select __anonstruct_Graph_4_esize_g_14 g_6))
                    __anonstruct_Graph_4_edges_g_14 (at
                    !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                    !__anonstruct_Edge_3_to_edges_32 'Init) (at
                    !__anonstruct_Edge_3_from_edges_32 'Init)))))))) }); ()
                 end;
                 begin
                 (assert {
                 (#"/home/nik/Projects/ver/hw3/mygraph.c" 275 10 58#
                 "expl:Assertion in line 275"
                 (Int32.(=)
                 (select (at !__anonstruct_Edge_3_existent_0_edges_32 'Init)
                 (shift (select __anonstruct_Graph_4_edges_g_14 g_6)
                 (Int32.to_int !i_1_0))) (#"mygraph_c.jc" 1405 68 80#
                 "expl:Integer cast" (Int32.of_int (0))))) }); () end;
                 begin
                 (assert {
                 (#"/home/nik/Projects/ver/hw3/mygraph.c" 276 10 41#
                 "expl:Assertion in line 276"
                 ((=)
                 (count g_6 (Int32.to_int f_2) (Int32.to_int t_2)
                 (Int32.to_int !i_1_0) (Int.(+) (Int32.to_int !i_1_0) (1))
                 __anonstruct_Graph_4_edges_g_14 (at
                 !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                 !__anonstruct_Edge_3_to_edges_32 'Init) (at
                 !__anonstruct_Edge_3_from_edges_32 'Init)) (0))) }); () end;
                 begin
                 (assert {
                 (#"/home/nik/Projects/ver/hw3/mygraph.c" 277 10 36#
                 "expl:Assertion in line 277"
                 ((=)
                 (count g_6 (Int32.to_int f_2) (Int32.to_int t_2)
                 (Int32.to_int !i_1_0) (Int.(+) (Int32.to_int !i_1_0) (1))
                 __anonstruct_Graph_4_edges_g_14
                 !__anonstruct_Edge_3_existent_0_edges_32
                 !__anonstruct_Edge_3_to_edges_32
                 !__anonstruct_Edge_3_from_edges_32) (1))) }); () end;
                 begin
                 (assert {
                 (#"/home/nik/Projects/ver/hw3/mygraph.c" 278 10 186#
                 "expl:Assertion in line 278"
                 (forall f2_28 : int.
                  (forall t2_28 : int.
                   (((not ((=) f2_28 (Int32.to_int f_2))) \/
                    (not ((=) t2_28 (Int32.to_int t_2)))) ->
                    ((=)
                    (count g_6 f2_28 t2_28 (0)
                    (Int32.to_int
                    (select __anonstruct_Graph_4_esize_g_14 g_6))
                    __anonstruct_Graph_4_edges_g_14 (at
                    !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                    !__anonstruct_Edge_3_to_edges_32 'Init) (at
                    !__anonstruct_Edge_3_from_edges_32 'Init))
                    (Int.(+)
                    (Int.(+)
                    (count g_6 f2_28 t2_28 (0) (Int32.to_int !i_1_0)
                    __anonstruct_Graph_4_edges_g_14 (at
                    !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                    !__anonstruct_Edge_3_to_edges_32 'Init) (at
                    !__anonstruct_Edge_3_from_edges_32 'Init))
                    (count g_6 f2_28 t2_28 (Int32.to_int !i_1_0)
                    (Int.(+) (Int32.to_int !i_1_0) (1))
                    __anonstruct_Graph_4_edges_g_14 (at
                    !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                    !__anonstruct_Edge_3_to_edges_32 'Init) (at
                    !__anonstruct_Edge_3_from_edges_32 'Init)))
                    (count g_6 f2_28 t2_28
                    (Int.(+) (Int32.to_int !i_1_0) (1))
                    (Int32.to_int
                    (select __anonstruct_Graph_4_esize_g_14 g_6))
                    __anonstruct_Graph_4_edges_g_14 (at
                    !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                    !__anonstruct_Edge_3_to_edges_32 'Init) (at
                    !__anonstruct_Edge_3_from_edges_32 'Init)))))))) }); ()
                 end;
                 begin
                 (assert {
                 (#"/home/nik/Projects/ver/hw3/mygraph.c" 279 10 157#
                 "expl:Assertion in line 279"
                 (forall f2_29 : int.
                  (forall t2_29 : int.
                   (((not ((=) f2_29 (Int32.to_int f_2))) \/
                    (not ((=) t2_29 (Int32.to_int t_2)))) ->
                    ((=)
                    (count g_6 f2_29 t2_29 (0)
                    (Int32.to_int
                    (select __anonstruct_Graph_4_esize_g_14 g_6))
                    __anonstruct_Graph_4_edges_g_14 (at
                    !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                    !__anonstruct_Edge_3_to_edges_32 'Init) (at
                    !__anonstruct_Edge_3_from_edges_32 'Init))
                    (Int.(+)
                    (count g_6 f2_29 t2_29 (0) (Int32.to_int !i_1_0)
                    __anonstruct_Graph_4_edges_g_14 (at
                    !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                    !__anonstruct_Edge_3_to_edges_32 'Init) (at
                    !__anonstruct_Edge_3_from_edges_32 'Init))
                    (count g_6 f2_29 t2_29
                    (Int.(+) (Int32.to_int !i_1_0) (1))
                    (Int32.to_int
                    (select __anonstruct_Graph_4_esize_g_14 g_6))
                    __anonstruct_Graph_4_edges_g_14 (at
                    !__anonstruct_Edge_3_existent_0_edges_32 'Init) (at
                    !__anonstruct_Edge_3_to_edges_32 'Init) (at
                    !__anonstruct_Edge_3_from_edges_32 'Init)))))))) }); ()
                 end;
                 begin
                 (assert {
                 (#"/home/nik/Projects/ver/hw3/mygraph.c" 280 10 86#
                 "expl:Assertion in line 280"
                 (forall f2_30 : int.
                  (forall t2_30 : int.
                   (((not ((=) f2_30 (Int32.to_int f_2))) \/
                    (not ((=) t2_30 (Int32.to_int t_2)))) ->
                    ((=)
                    (count g_6 f2_30 t2_30 (Int32.to_int !i_1_0)
                    (Int.(+) (Int32.to_int !i_1_0) (1))
                    __anonstruct_Graph_4_edges_g_14
                    !__anonstruct_Edge_3_existent_0_edges_32
                    !__anonstruct_Edge_3_to_edges_32
                    !__anonstruct_Edge_3_from_edges_32) (0)))))) }); () end;
                 (raise (Return_label_exc ())) end end end end else ());
            (i_1_0 :=
             (Unsafe_int32.(+)  !i_1_0
              (#"mygraph_c.jc" 1513 64 76# "expl:Integer cast"
              (Unsafe_int32.of_int (1))) )) end;
            (raise (Loop_continue_exc ())) end with Loop_continue_exc
           _jessie_22 -> () end end end;
         (raise (Goto_while_0_break_1_0_exc ())) end end with
       Goto_while_0_break_1_0_exc _jessie_11 ->
       'While_0_break_1_0: 'While_0_break_1_0: () end;
      (raise (Return_label_exc ())) end with Return_label_exc _jessie_12 ->
     'Return_label: 'Return_label: (raise Return) end))))))); (raise Return)
    end with Return -> () end
  
end

theory Logic_type_padding

  use why3.Bool.Bool 
  
  type padding 
  
end

theory Struct___anonstruct_Edge_3

  use import core.Tag_table_type 
  
  use import core.Tag_table 
  
  use import core.Tag_id 
  
  use import core.Tag 
  
  use import Root___anonstruct_Edge_3 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use import core.Alloc 
  
  use why3.Bool.Bool 
  
  function __anonstruct_Edge_3_tag  : (tag_id
  __anonstruct_Edge_3)
  
  axiom U___anonstruct_Edge_3_parenttag_bottom  :
  (parenttag __anonstruct_Edge_3_tag bottom_tag)
  
  axiom U___anonstruct_Edge_3_is_final  :
  (forall __anonstruct_Edge_3_tag_table : (tag_table __anonstruct_Edge_3).
   (forall p : (pointer __anonstruct_Edge_3).
    ((instanceof __anonstruct_Edge_3_tag_table p __anonstruct_Edge_3_tag) ->
     ((=) (typeof __anonstruct_Edge_3_tag_table p) __anonstruct_Edge_3_tag))))
  
  predicate frame_tag_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (old___anonstruct_Edge_3_tag_table : (tag_table
  __anonstruct_Edge_3)) (__anonstruct_Edge_3_tag_table : (tag_table
  __anonstruct_Edge_3))
  =
     ((tag_extends old___anonstruct_Edge_3_tag_table
      __anonstruct_Edge_3_tag_table)
     /\
     (alloc_tag_block old___anonstruct_Edge_3_tag_table
     __anonstruct_Edge_3_tag_table p))
  
  predicate frame_free_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (old___anonstruct_Edge_3_alloc_table : (alloc_table
  __anonstruct_Edge_3)) (__anonstruct_Edge_3_alloc_table : (alloc_table
  __anonstruct_Edge_3))
  =
     ((free_extends old___anonstruct_Edge_3_alloc_table
      __anonstruct_Edge_3_alloc_table)
     /\
     (free_block old___anonstruct_Edge_3_alloc_table
     __anonstruct_Edge_3_alloc_table p))
  
  predicate frame_alloc_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (n : int) (old___anonstruct_Edge_3_alloc_table :
  (alloc_table __anonstruct_Edge_3)) (__anonstruct_Edge_3_alloc_table :
  (alloc_table __anonstruct_Edge_3))
  =
     ((alloc_extends old___anonstruct_Edge_3_alloc_table
      __anonstruct_Edge_3_alloc_table)
     /\
     (alloc_block old___anonstruct_Edge_3_alloc_table
     __anonstruct_Edge_3_alloc_table p n))
  
  predicate fresh_tag_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (n : int) (__anonstruct_Edge_3_tag_table : (tag_table
  __anonstruct_Edge_3))
  = (tag_fresh __anonstruct_Edge_3_tag_table p)
  
  predicate fresh_alloc_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (n : int) (__anonstruct_Edge_3_alloc_table :
  (alloc_table __anonstruct_Edge_3))
  = (alloc_fresh __anonstruct_Edge_3_alloc_table p)
  
  predicate container_of_singleton_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (__anonstruct_Edge_3_tag_table : (tag_table
  __anonstruct_Edge_3)) = true
  
  predicate container_of_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (l : int) (r : int) (__anonstruct_Edge_3_tag_table :
  (tag_table __anonstruct_Edge_3)) = true
  
  predicate typeof_singleton_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (__anonstruct_Edge_3_tag_table : (tag_table
  __anonstruct_Edge_3))
  = ((=) (typeof __anonstruct_Edge_3_tag_table p) __anonstruct_Edge_3_tag)
  
  predicate typeof_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (l : int) (r : int) (__anonstruct_Edge_3_tag_table :
  (tag_table __anonstruct_Edge_3))
  =
     (((=) (typeof __anonstruct_Edge_3_tag_table p) __anonstruct_Edge_3_tag)
     /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       ((=) (typeof __anonstruct_Edge_3_tag_table (shift p i))
       __anonstruct_Edge_3_tag))))
  
  predicate instanceof_singleton_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (__anonstruct_Edge_3_tag_table : (tag_table
  __anonstruct_Edge_3))
  = (instanceof __anonstruct_Edge_3_tag_table p __anonstruct_Edge_3_tag)
  
  predicate instanceof_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (l : int) (r : int) (__anonstruct_Edge_3_tag_table :
  (tag_table __anonstruct_Edge_3))
  =
     ((instanceof __anonstruct_Edge_3_tag_table p __anonstruct_Edge_3_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       (instanceof __anonstruct_Edge_3_tag_table (shift p i)
       __anonstruct_Edge_3_tag))))
  
  predicate right_valid_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (b : int) (__anonstruct_Edge_3_alloc_table :
  (alloc_table __anonstruct_Edge_3))
  = ((>=) (offset_max __anonstruct_Edge_3_alloc_table p) b)
  
  predicate left_valid_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (a : int) (__anonstruct_Edge_3_alloc_table :
  (alloc_table __anonstruct_Edge_3))
  = ((<=) (offset_min __anonstruct_Edge_3_alloc_table p) a)
  
  predicate strict_left_valid_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (a : int) (__anonstruct_Edge_3_alloc_table :
  (alloc_table __anonstruct_Edge_3))
  = ((=) (offset_min __anonstruct_Edge_3_alloc_table p) a)
  
  predicate valid_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (a : int) (b : int) (__anonstruct_Edge_3_alloc_table
  : (alloc_table __anonstruct_Edge_3))
  =
     (((<=) (offset_min __anonstruct_Edge_3_alloc_table p) a) /\
     ((>=) (offset_max __anonstruct_Edge_3_alloc_table p) b))
  
  predicate strict_valid_struct___anonstruct_Edge_3 (p : (pointer
  __anonstruct_Edge_3)) (a : int) (b : int) (__anonstruct_Edge_3_alloc_table
  : (alloc_table __anonstruct_Edge_3))
  =
     (((=) (offset_min __anonstruct_Edge_3_alloc_table p) a) /\
     ((=) (offset_max __anonstruct_Edge_3_alloc_table p) b))
  
  axiom U___anonstruct_Edge_3_int  :
  ((=) (int_of_tag __anonstruct_Edge_3_tag) (4))
  
end

module Struct___anonstruct_Edge_3_unsafe

  use import core.Tag_table_type 
  
  use import Struct___anonstruct_Edge_3 
  
  use import Root___anonstruct_Edge_3 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val free_struct___anonstruct_Edge_3
  (p : (pointer __anonstruct_Edge_3)) 
   (__anonstruct_Edge_3_alloc_table : ref (alloc_table
    __anonstruct_Edge_3)) : unit
    requires {
      (("expl:Deallocation" ((=) p null)) \/
      (freeable !__anonstruct_Edge_3_alloc_table p)) }
    writes { __anonstruct_Edge_3_alloc_table }
    ensures {
      ((((=) p null) /\
       ((=) !__anonstruct_Edge_3_alloc_table (old
       !__anonstruct_Edge_3_alloc_table)))
      \/
      ((frame_free_struct___anonstruct_Edge_3 p (old
       !__anonstruct_Edge_3_alloc_table) !__anonstruct_Edge_3_alloc_table)
      /\
      (fresh_alloc_struct___anonstruct_Edge_3 p
      (offset_max (old !__anonstruct_Edge_3_alloc_table) p)
      !__anonstruct_Edge_3_alloc_table))) }
  
  val allocate_struct___anonstruct_Edge_3_requires
  (n : int) 
   (__anonstruct_Edge_3_alloc_table : ref (alloc_table __anonstruct_Edge_3)) 
    (__anonstruct_Edge_3_tag_table : ref (tag_table __anonstruct_Edge_3)) :
     (pointer __anonstruct_Edge_3)
     requires { ((>=) n (0)) } writes { __anonstruct_Edge_3_alloc_table,
     __anonstruct_Edge_3_tag_table }
     ensures {
       ((strict_valid_struct___anonstruct_Edge_3 result (0) (Int.(-) n (1))
        !__anonstruct_Edge_3_alloc_table)
       /\
       ((frame_alloc_struct___anonstruct_Edge_3 result n (old
        !__anonstruct_Edge_3_alloc_table) !__anonstruct_Edge_3_alloc_table)
       /\
       ((frame_tag_struct___anonstruct_Edge_3 result (old
        !__anonstruct_Edge_3_tag_table) !__anonstruct_Edge_3_tag_table)
       /\
       ((fresh_alloc_struct___anonstruct_Edge_3 result (Int.(-) n (1)) (old
        !__anonstruct_Edge_3_alloc_table))
       /\
       ((fresh_tag_struct___anonstruct_Edge_3 result (Int.(-) n (1)) (old
        !__anonstruct_Edge_3_tag_table))
       /\
       ((typeof_struct___anonstruct_Edge_3 result (0) n
        !__anonstruct_Edge_3_tag_table)
       /\
       (container_of_struct___anonstruct_Edge_3 result (0) n
       !__anonstruct_Edge_3_tag_table))))))) }
  
end

module Struct___anonstruct_Edge_3_safe

  use import core.Tag_table_type 
  
  use import Struct___anonstruct_Edge_3 
  
  use import Root___anonstruct_Edge_3 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val safe_free_struct___anonstruct_Edge_3
  (p : (pointer __anonstruct_Edge_3)) 
   (__anonstruct_Edge_3_alloc_table : ref (alloc_table
    __anonstruct_Edge_3)) : unit
    requires { true } writes { __anonstruct_Edge_3_alloc_table }
    ensures {
      ((((=) p null) /\
       ((=) !__anonstruct_Edge_3_alloc_table (old
       !__anonstruct_Edge_3_alloc_table)))
      \/
      ((frame_free_struct___anonstruct_Edge_3 p (old
       !__anonstruct_Edge_3_alloc_table) !__anonstruct_Edge_3_alloc_table)
      /\
      (fresh_alloc_struct___anonstruct_Edge_3 p
      (offset_max (old !__anonstruct_Edge_3_alloc_table) p)
      !__anonstruct_Edge_3_alloc_table))) }
  
  val allocate_struct___anonstruct_Edge_3
  (n : int) 
   (__anonstruct_Edge_3_alloc_table : ref (alloc_table __anonstruct_Edge_3)) 
    (__anonstruct_Edge_3_tag_table : ref (tag_table __anonstruct_Edge_3)) :
     (pointer __anonstruct_Edge_3)
     requires { true } writes { __anonstruct_Edge_3_alloc_table,
     __anonstruct_Edge_3_tag_table }
     ensures {
       ((strict_valid_struct___anonstruct_Edge_3 result (0) (Int.(-) n (1))
        !__anonstruct_Edge_3_alloc_table)
       /\
       ((frame_alloc_struct___anonstruct_Edge_3 result n (old
        !__anonstruct_Edge_3_alloc_table) !__anonstruct_Edge_3_alloc_table)
       /\
       ((frame_tag_struct___anonstruct_Edge_3 result (old
        !__anonstruct_Edge_3_tag_table) !__anonstruct_Edge_3_tag_table)
       /\
       ((fresh_alloc_struct___anonstruct_Edge_3 result (Int.(-) n (1)) (old
        !__anonstruct_Edge_3_alloc_table))
       /\
       ((fresh_tag_struct___anonstruct_Edge_3 result (Int.(-) n (1)) (old
        !__anonstruct_Edge_3_tag_table))
       /\
       ((typeof_struct___anonstruct_Edge_3 result (0) n
        !__anonstruct_Edge_3_tag_table)
       /\
       (container_of_struct___anonstruct_Edge_3 result (0) n
       !__anonstruct_Edge_3_tag_table))))))) }
  
  val allocate_singleton_struct___anonstruct_Edge_3
  (__anonstruct_Edge_3_alloc_table : ref (alloc_table __anonstruct_Edge_3)) 
   (__anonstruct_Edge_3_tag_table : ref (tag_table __anonstruct_Edge_3)) :
    (pointer __anonstruct_Edge_3)
    requires { true } writes { __anonstruct_Edge_3_alloc_table,
    __anonstruct_Edge_3_tag_table }
    ensures {
      ((strict_valid_struct___anonstruct_Edge_3 result (0) (0)
       !__anonstruct_Edge_3_alloc_table)
      /\
      ((frame_alloc_struct___anonstruct_Edge_3 result (1) (old
       !__anonstruct_Edge_3_alloc_table) !__anonstruct_Edge_3_alloc_table)
      /\
      ((frame_tag_struct___anonstruct_Edge_3 result (old
       !__anonstruct_Edge_3_tag_table) !__anonstruct_Edge_3_tag_table)
      /\
      ((fresh_alloc_struct___anonstruct_Edge_3 result (0) (old
       !__anonstruct_Edge_3_alloc_table))
      /\
      ((fresh_tag_struct___anonstruct_Edge_3 result (0) (old
       !__anonstruct_Edge_3_tag_table))
      /\
      ((typeof_singleton_struct___anonstruct_Edge_3 result
       !__anonstruct_Edge_3_tag_table)
      /\
      (container_of_singleton_struct___anonstruct_Edge_3 result
      !__anonstruct_Edge_3_tag_table))))))) }
  
end

theory Struct___anonstruct_Graph_4

  use import core.Tag_table_type 
  
  use import core.Tag_table 
  
  use import core.Tag_id 
  
  use import core.Tag 
  
  use import Root___anonstruct_Graph_4 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use import core.Alloc 
  
  use why3.Bool.Bool 
  
  function __anonstruct_Graph_4_tag  : (tag_id
  __anonstruct_Graph_4)
  
  axiom U___anonstruct_Graph_4_parenttag_bottom  :
  (parenttag __anonstruct_Graph_4_tag bottom_tag)
  
  axiom U___anonstruct_Graph_4_is_final  :
  (forall __anonstruct_Graph_4_tag_table : (tag_table __anonstruct_Graph_4).
   (forall p : (pointer __anonstruct_Graph_4).
    ((instanceof __anonstruct_Graph_4_tag_table p __anonstruct_Graph_4_tag)
     ->
     ((=) (typeof __anonstruct_Graph_4_tag_table p) __anonstruct_Graph_4_tag))))
  
  predicate frame_tag_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (old___anonstruct_Graph_4_tag_table : (tag_table
  __anonstruct_Graph_4)) (__anonstruct_Graph_4_tag_table : (tag_table
  __anonstruct_Graph_4))
  =
     ((tag_extends old___anonstruct_Graph_4_tag_table
      __anonstruct_Graph_4_tag_table)
     /\
     (alloc_tag_block old___anonstruct_Graph_4_tag_table
     __anonstruct_Graph_4_tag_table p))
  
  predicate frame_free_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (old___anonstruct_Graph_4_alloc_table : (alloc_table
  __anonstruct_Graph_4)) (__anonstruct_Graph_4_alloc_table : (alloc_table
  __anonstruct_Graph_4))
  =
     ((free_extends old___anonstruct_Graph_4_alloc_table
      __anonstruct_Graph_4_alloc_table)
     /\
     (free_block old___anonstruct_Graph_4_alloc_table
     __anonstruct_Graph_4_alloc_table p))
  
  predicate frame_alloc_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (n : int) (old___anonstruct_Graph_4_alloc_table :
  (alloc_table __anonstruct_Graph_4)) (__anonstruct_Graph_4_alloc_table :
  (alloc_table __anonstruct_Graph_4))
  =
     ((alloc_extends old___anonstruct_Graph_4_alloc_table
      __anonstruct_Graph_4_alloc_table)
     /\
     (alloc_block old___anonstruct_Graph_4_alloc_table
     __anonstruct_Graph_4_alloc_table p n))
  
  predicate fresh_tag_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (n : int) (__anonstruct_Graph_4_tag_table :
  (tag_table __anonstruct_Graph_4))
  = (tag_fresh __anonstruct_Graph_4_tag_table p)
  
  predicate fresh_alloc_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (n : int) (__anonstruct_Graph_4_alloc_table :
  (alloc_table __anonstruct_Graph_4))
  = (alloc_fresh __anonstruct_Graph_4_alloc_table p)
  
  predicate container_of_singleton_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (__anonstruct_Graph_4_tag_table : (tag_table
  __anonstruct_Graph_4)) = true
  
  predicate container_of_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (l : int) (r : int) (__anonstruct_Graph_4_tag_table
  : (tag_table __anonstruct_Graph_4)) = true
  
  predicate typeof_singleton_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (__anonstruct_Graph_4_tag_table : (tag_table
  __anonstruct_Graph_4))
  = ((=) (typeof __anonstruct_Graph_4_tag_table p) __anonstruct_Graph_4_tag)
  
  predicate typeof_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (l : int) (r : int) (__anonstruct_Graph_4_tag_table
  : (tag_table __anonstruct_Graph_4))
  =
     (((=) (typeof __anonstruct_Graph_4_tag_table p) __anonstruct_Graph_4_tag)
     /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       ((=) (typeof __anonstruct_Graph_4_tag_table (shift p i))
       __anonstruct_Graph_4_tag))))
  
  predicate instanceof_singleton_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (__anonstruct_Graph_4_tag_table : (tag_table
  __anonstruct_Graph_4))
  = (instanceof __anonstruct_Graph_4_tag_table p __anonstruct_Graph_4_tag)
  
  predicate instanceof_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (l : int) (r : int) (__anonstruct_Graph_4_tag_table
  : (tag_table __anonstruct_Graph_4))
  =
     ((instanceof __anonstruct_Graph_4_tag_table p __anonstruct_Graph_4_tag)
     /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       (instanceof __anonstruct_Graph_4_tag_table (shift p i)
       __anonstruct_Graph_4_tag))))
  
  predicate right_valid_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (b : int) (__anonstruct_Graph_4_alloc_table :
  (alloc_table __anonstruct_Graph_4))
  = ((>=) (offset_max __anonstruct_Graph_4_alloc_table p) b)
  
  predicate left_valid_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (a : int) (__anonstruct_Graph_4_alloc_table :
  (alloc_table __anonstruct_Graph_4))
  = ((<=) (offset_min __anonstruct_Graph_4_alloc_table p) a)
  
  predicate strict_left_valid_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (a : int) (__anonstruct_Graph_4_alloc_table :
  (alloc_table __anonstruct_Graph_4))
  = ((=) (offset_min __anonstruct_Graph_4_alloc_table p) a)
  
  predicate valid_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (a : int) (b : int)
  (__anonstruct_Graph_4_alloc_table : (alloc_table __anonstruct_Graph_4))
  =
     (((<=) (offset_min __anonstruct_Graph_4_alloc_table p) a) /\
     ((>=) (offset_max __anonstruct_Graph_4_alloc_table p) b))
  
  predicate strict_valid_struct___anonstruct_Graph_4 (p : (pointer
  __anonstruct_Graph_4)) (a : int) (b : int)
  (__anonstruct_Graph_4_alloc_table : (alloc_table __anonstruct_Graph_4))
  =
     (((=) (offset_min __anonstruct_Graph_4_alloc_table p) a) /\
     ((=) (offset_max __anonstruct_Graph_4_alloc_table p) b))
  
  axiom U___anonstruct_Graph_4_int  :
  ((=) (int_of_tag __anonstruct_Graph_4_tag) (5))
  
end

module Struct___anonstruct_Graph_4_unsafe

  use import core.Tag_table_type 
  
  use import Struct___anonstruct_Graph_4 
  
  use import Root___anonstruct_Graph_4 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val free_struct___anonstruct_Graph_4
  (p : (pointer __anonstruct_Graph_4)) 
   (__anonstruct_Graph_4_alloc_table : ref (alloc_table
    __anonstruct_Graph_4)) : unit
    requires {
      (("expl:Deallocation" ((=) p null)) \/
      (freeable !__anonstruct_Graph_4_alloc_table p)) }
    writes { __anonstruct_Graph_4_alloc_table }
    ensures {
      ((((=) p null) /\
       ((=) !__anonstruct_Graph_4_alloc_table (old
       !__anonstruct_Graph_4_alloc_table)))
      \/
      ((frame_free_struct___anonstruct_Graph_4 p (old
       !__anonstruct_Graph_4_alloc_table) !__anonstruct_Graph_4_alloc_table)
      /\
      (fresh_alloc_struct___anonstruct_Graph_4 p
      (offset_max (old !__anonstruct_Graph_4_alloc_table) p)
      !__anonstruct_Graph_4_alloc_table))) }
  
  val allocate_struct___anonstruct_Graph_4_requires
  (n : int) 
   (__anonstruct_Graph_4_alloc_table : ref (alloc_table
    __anonstruct_Graph_4)) 
    (__anonstruct_Graph_4_tag_table : ref (tag_table __anonstruct_Graph_4)) :
     (pointer __anonstruct_Graph_4)
     requires { ((>=) n (0)) } writes { __anonstruct_Graph_4_alloc_table,
     __anonstruct_Graph_4_tag_table }
     ensures {
       ((strict_valid_struct___anonstruct_Graph_4 result (0) (Int.(-) n (1))
        !__anonstruct_Graph_4_alloc_table)
       /\
       ((frame_alloc_struct___anonstruct_Graph_4 result n (old
        !__anonstruct_Graph_4_alloc_table) !__anonstruct_Graph_4_alloc_table)
       /\
       ((frame_tag_struct___anonstruct_Graph_4 result (old
        !__anonstruct_Graph_4_tag_table) !__anonstruct_Graph_4_tag_table)
       /\
       ((fresh_alloc_struct___anonstruct_Graph_4 result (Int.(-) n (1)) (old
        !__anonstruct_Graph_4_alloc_table))
       /\
       ((fresh_tag_struct___anonstruct_Graph_4 result (Int.(-) n (1)) (old
        !__anonstruct_Graph_4_tag_table))
       /\
       ((typeof_struct___anonstruct_Graph_4 result (0) n
        !__anonstruct_Graph_4_tag_table)
       /\
       (container_of_struct___anonstruct_Graph_4 result (0) n
       !__anonstruct_Graph_4_tag_table))))))) }
  
end

module Struct___anonstruct_Graph_4_safe

  use import core.Tag_table_type 
  
  use import Struct___anonstruct_Graph_4 
  
  use import Root___anonstruct_Graph_4 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val safe_free_struct___anonstruct_Graph_4
  (p : (pointer __anonstruct_Graph_4)) 
   (__anonstruct_Graph_4_alloc_table : ref (alloc_table
    __anonstruct_Graph_4)) : unit
    requires { true } writes { __anonstruct_Graph_4_alloc_table }
    ensures {
      ((((=) p null) /\
       ((=) !__anonstruct_Graph_4_alloc_table (old
       !__anonstruct_Graph_4_alloc_table)))
      \/
      ((frame_free_struct___anonstruct_Graph_4 p (old
       !__anonstruct_Graph_4_alloc_table) !__anonstruct_Graph_4_alloc_table)
      /\
      (fresh_alloc_struct___anonstruct_Graph_4 p
      (offset_max (old !__anonstruct_Graph_4_alloc_table) p)
      !__anonstruct_Graph_4_alloc_table))) }
  
  val allocate_struct___anonstruct_Graph_4
  (n : int) 
   (__anonstruct_Graph_4_alloc_table : ref (alloc_table
    __anonstruct_Graph_4)) 
    (__anonstruct_Graph_4_tag_table : ref (tag_table __anonstruct_Graph_4)) :
     (pointer __anonstruct_Graph_4)
     requires { true } writes { __anonstruct_Graph_4_alloc_table,
     __anonstruct_Graph_4_tag_table }
     ensures {
       ((strict_valid_struct___anonstruct_Graph_4 result (0) (Int.(-) n (1))
        !__anonstruct_Graph_4_alloc_table)
       /\
       ((frame_alloc_struct___anonstruct_Graph_4 result n (old
        !__anonstruct_Graph_4_alloc_table) !__anonstruct_Graph_4_alloc_table)
       /\
       ((frame_tag_struct___anonstruct_Graph_4 result (old
        !__anonstruct_Graph_4_tag_table) !__anonstruct_Graph_4_tag_table)
       /\
       ((fresh_alloc_struct___anonstruct_Graph_4 result (Int.(-) n (1)) (old
        !__anonstruct_Graph_4_alloc_table))
       /\
       ((fresh_tag_struct___anonstruct_Graph_4 result (Int.(-) n (1)) (old
        !__anonstruct_Graph_4_tag_table))
       /\
       ((typeof_struct___anonstruct_Graph_4 result (0) n
        !__anonstruct_Graph_4_tag_table)
       /\
       (container_of_struct___anonstruct_Graph_4 result (0) n
       !__anonstruct_Graph_4_tag_table))))))) }
  
  val allocate_singleton_struct___anonstruct_Graph_4
  (__anonstruct_Graph_4_alloc_table : ref (alloc_table
   __anonstruct_Graph_4)) 
   (__anonstruct_Graph_4_tag_table : ref (tag_table __anonstruct_Graph_4)) :
    (pointer __anonstruct_Graph_4)
    requires { true } writes { __anonstruct_Graph_4_alloc_table,
    __anonstruct_Graph_4_tag_table }
    ensures {
      ((strict_valid_struct___anonstruct_Graph_4 result (0) (0)
       !__anonstruct_Graph_4_alloc_table)
      /\
      ((frame_alloc_struct___anonstruct_Graph_4 result (1) (old
       !__anonstruct_Graph_4_alloc_table) !__anonstruct_Graph_4_alloc_table)
      /\
      ((frame_tag_struct___anonstruct_Graph_4 result (old
       !__anonstruct_Graph_4_tag_table) !__anonstruct_Graph_4_tag_table)
      /\
      ((fresh_alloc_struct___anonstruct_Graph_4 result (0) (old
       !__anonstruct_Graph_4_alloc_table))
      /\
      ((fresh_tag_struct___anonstruct_Graph_4 result (0) (old
       !__anonstruct_Graph_4_tag_table))
      /\
      ((typeof_singleton_struct___anonstruct_Graph_4 result
       !__anonstruct_Graph_4_tag_table)
      /\
      (container_of_singleton_struct___anonstruct_Graph_4 result
      !__anonstruct_Graph_4_tag_table))))))) }
  
end

theory Struct___anonstruct_Vertex_2

  use import core.Tag_table_type 
  
  use import core.Tag_table 
  
  use import core.Tag_id 
  
  use import core.Tag 
  
  use import Root___anonstruct_Vertex_2 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use import core.Alloc 
  
  use why3.Bool.Bool 
  
  function __anonstruct_Vertex_2_tag  : (tag_id
  __anonstruct_Vertex_2)
  
  axiom U___anonstruct_Vertex_2_parenttag_bottom  :
  (parenttag __anonstruct_Vertex_2_tag bottom_tag)
  
  axiom U___anonstruct_Vertex_2_is_final  :
  (forall __anonstruct_Vertex_2_tag_table : (tag_table
   __anonstruct_Vertex_2).
   (forall p : (pointer __anonstruct_Vertex_2).
    ((instanceof __anonstruct_Vertex_2_tag_table p __anonstruct_Vertex_2_tag)
     ->
     ((=) (typeof __anonstruct_Vertex_2_tag_table p)
     __anonstruct_Vertex_2_tag))))
  
  predicate frame_tag_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (old___anonstruct_Vertex_2_tag_table : (tag_table
  __anonstruct_Vertex_2)) (__anonstruct_Vertex_2_tag_table : (tag_table
  __anonstruct_Vertex_2))
  =
     ((tag_extends old___anonstruct_Vertex_2_tag_table
      __anonstruct_Vertex_2_tag_table)
     /\
     (alloc_tag_block old___anonstruct_Vertex_2_tag_table
     __anonstruct_Vertex_2_tag_table p))
  
  predicate frame_free_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (old___anonstruct_Vertex_2_alloc_table :
  (alloc_table __anonstruct_Vertex_2)) (__anonstruct_Vertex_2_alloc_table :
  (alloc_table __anonstruct_Vertex_2))
  =
     ((free_extends old___anonstruct_Vertex_2_alloc_table
      __anonstruct_Vertex_2_alloc_table)
     /\
     (free_block old___anonstruct_Vertex_2_alloc_table
     __anonstruct_Vertex_2_alloc_table p))
  
  predicate frame_alloc_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (n : int) (old___anonstruct_Vertex_2_alloc_table :
  (alloc_table __anonstruct_Vertex_2)) (__anonstruct_Vertex_2_alloc_table :
  (alloc_table __anonstruct_Vertex_2))
  =
     ((alloc_extends old___anonstruct_Vertex_2_alloc_table
      __anonstruct_Vertex_2_alloc_table)
     /\
     (alloc_block old___anonstruct_Vertex_2_alloc_table
     __anonstruct_Vertex_2_alloc_table p n))
  
  predicate fresh_tag_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (n : int) (__anonstruct_Vertex_2_tag_table :
  (tag_table __anonstruct_Vertex_2))
  = (tag_fresh __anonstruct_Vertex_2_tag_table p)
  
  predicate fresh_alloc_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (n : int) (__anonstruct_Vertex_2_alloc_table :
  (alloc_table __anonstruct_Vertex_2))
  = (alloc_fresh __anonstruct_Vertex_2_alloc_table p)
  
  predicate container_of_singleton_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (__anonstruct_Vertex_2_tag_table : (tag_table
  __anonstruct_Vertex_2)) = true
  
  predicate container_of_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (l : int) (r : int)
  (__anonstruct_Vertex_2_tag_table : (tag_table __anonstruct_Vertex_2))
  = true
  
  predicate typeof_singleton_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (__anonstruct_Vertex_2_tag_table : (tag_table
  __anonstruct_Vertex_2))
  =
     ((=) (typeof __anonstruct_Vertex_2_tag_table p)
     __anonstruct_Vertex_2_tag)
  
  predicate typeof_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (l : int) (r : int)
  (__anonstruct_Vertex_2_tag_table : (tag_table __anonstruct_Vertex_2))
  =
     (((=) (typeof __anonstruct_Vertex_2_tag_table p)
      __anonstruct_Vertex_2_tag)
     /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       ((=) (typeof __anonstruct_Vertex_2_tag_table (shift p i))
       __anonstruct_Vertex_2_tag))))
  
  predicate instanceof_singleton_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (__anonstruct_Vertex_2_tag_table : (tag_table
  __anonstruct_Vertex_2))
  = (instanceof __anonstruct_Vertex_2_tag_table p __anonstruct_Vertex_2_tag)
  
  predicate instanceof_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (l : int) (r : int)
  (__anonstruct_Vertex_2_tag_table : (tag_table __anonstruct_Vertex_2))
  =
     ((instanceof __anonstruct_Vertex_2_tag_table p __anonstruct_Vertex_2_tag)
     /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       (instanceof __anonstruct_Vertex_2_tag_table (shift p i)
       __anonstruct_Vertex_2_tag))))
  
  predicate right_valid_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (b : int) (__anonstruct_Vertex_2_alloc_table :
  (alloc_table __anonstruct_Vertex_2))
  = ((>=) (offset_max __anonstruct_Vertex_2_alloc_table p) b)
  
  predicate left_valid_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (a : int) (__anonstruct_Vertex_2_alloc_table :
  (alloc_table __anonstruct_Vertex_2))
  = ((<=) (offset_min __anonstruct_Vertex_2_alloc_table p) a)
  
  predicate strict_left_valid_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (a : int) (__anonstruct_Vertex_2_alloc_table :
  (alloc_table __anonstruct_Vertex_2))
  = ((=) (offset_min __anonstruct_Vertex_2_alloc_table p) a)
  
  predicate valid_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (a : int) (b : int)
  (__anonstruct_Vertex_2_alloc_table : (alloc_table __anonstruct_Vertex_2))
  =
     (((<=) (offset_min __anonstruct_Vertex_2_alloc_table p) a) /\
     ((>=) (offset_max __anonstruct_Vertex_2_alloc_table p) b))
  
  predicate strict_valid_struct___anonstruct_Vertex_2 (p : (pointer
  __anonstruct_Vertex_2)) (a : int) (b : int)
  (__anonstruct_Vertex_2_alloc_table : (alloc_table __anonstruct_Vertex_2))
  =
     (((=) (offset_min __anonstruct_Vertex_2_alloc_table p) a) /\
     ((=) (offset_max __anonstruct_Vertex_2_alloc_table p) b))
  
  axiom U___anonstruct_Vertex_2_int  :
  ((=) (int_of_tag __anonstruct_Vertex_2_tag) (6))
  
end

module Struct___anonstruct_Vertex_2_unsafe

  use import core.Tag_table_type 
  
  use import Struct___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Vertex_2 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val free_struct___anonstruct_Vertex_2
  (p : (pointer __anonstruct_Vertex_2)) 
   (__anonstruct_Vertex_2_alloc_table : ref (alloc_table
    __anonstruct_Vertex_2)) : unit
    requires {
      (("expl:Deallocation" ((=) p null)) \/
      (freeable !__anonstruct_Vertex_2_alloc_table p)) }
    writes { __anonstruct_Vertex_2_alloc_table }
    ensures {
      ((((=) p null) /\
       ((=) !__anonstruct_Vertex_2_alloc_table (old
       !__anonstruct_Vertex_2_alloc_table)))
      \/
      ((frame_free_struct___anonstruct_Vertex_2 p (old
       !__anonstruct_Vertex_2_alloc_table)
       !__anonstruct_Vertex_2_alloc_table)
      /\
      (fresh_alloc_struct___anonstruct_Vertex_2 p
      (offset_max (old !__anonstruct_Vertex_2_alloc_table) p)
      !__anonstruct_Vertex_2_alloc_table))) }
  
  val allocate_struct___anonstruct_Vertex_2_requires
  (n : int) 
   (__anonstruct_Vertex_2_alloc_table : ref (alloc_table
    __anonstruct_Vertex_2)) 
    (__anonstruct_Vertex_2_tag_table : ref (tag_table
     __anonstruct_Vertex_2)) : (pointer __anonstruct_Vertex_2)
     requires { ((>=) n (0)) } writes { __anonstruct_Vertex_2_alloc_table,
     __anonstruct_Vertex_2_tag_table }
     ensures {
       ((strict_valid_struct___anonstruct_Vertex_2 result (0) (Int.(-) n (1))
        !__anonstruct_Vertex_2_alloc_table)
       /\
       ((frame_alloc_struct___anonstruct_Vertex_2 result n (old
        !__anonstruct_Vertex_2_alloc_table)
        !__anonstruct_Vertex_2_alloc_table)
       /\
       ((frame_tag_struct___anonstruct_Vertex_2 result (old
        !__anonstruct_Vertex_2_tag_table) !__anonstruct_Vertex_2_tag_table)
       /\
       ((fresh_alloc_struct___anonstruct_Vertex_2 result (Int.(-) n (1)) (old
        !__anonstruct_Vertex_2_alloc_table))
       /\
       ((fresh_tag_struct___anonstruct_Vertex_2 result (Int.(-) n (1)) (old
        !__anonstruct_Vertex_2_tag_table))
       /\
       ((typeof_struct___anonstruct_Vertex_2 result (0) n
        !__anonstruct_Vertex_2_tag_table)
       /\
       (container_of_struct___anonstruct_Vertex_2 result (0) n
       !__anonstruct_Vertex_2_tag_table))))))) }
  
end

module Struct___anonstruct_Vertex_2_safe

  use import core.Tag_table_type 
  
  use import Struct___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Vertex_2 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val safe_free_struct___anonstruct_Vertex_2
  (p : (pointer __anonstruct_Vertex_2)) 
   (__anonstruct_Vertex_2_alloc_table : ref (alloc_table
    __anonstruct_Vertex_2)) : unit
    requires { true } writes { __anonstruct_Vertex_2_alloc_table }
    ensures {
      ((((=) p null) /\
       ((=) !__anonstruct_Vertex_2_alloc_table (old
       !__anonstruct_Vertex_2_alloc_table)))
      \/
      ((frame_free_struct___anonstruct_Vertex_2 p (old
       !__anonstruct_Vertex_2_alloc_table)
       !__anonstruct_Vertex_2_alloc_table)
      /\
      (fresh_alloc_struct___anonstruct_Vertex_2 p
      (offset_max (old !__anonstruct_Vertex_2_alloc_table) p)
      !__anonstruct_Vertex_2_alloc_table))) }
  
  val allocate_struct___anonstruct_Vertex_2
  (n : int) 
   (__anonstruct_Vertex_2_alloc_table : ref (alloc_table
    __anonstruct_Vertex_2)) 
    (__anonstruct_Vertex_2_tag_table : ref (tag_table
     __anonstruct_Vertex_2)) : (pointer __anonstruct_Vertex_2)
     requires { true } writes { __anonstruct_Vertex_2_alloc_table,
     __anonstruct_Vertex_2_tag_table }
     ensures {
       ((strict_valid_struct___anonstruct_Vertex_2 result (0) (Int.(-) n (1))
        !__anonstruct_Vertex_2_alloc_table)
       /\
       ((frame_alloc_struct___anonstruct_Vertex_2 result n (old
        !__anonstruct_Vertex_2_alloc_table)
        !__anonstruct_Vertex_2_alloc_table)
       /\
       ((frame_tag_struct___anonstruct_Vertex_2 result (old
        !__anonstruct_Vertex_2_tag_table) !__anonstruct_Vertex_2_tag_table)
       /\
       ((fresh_alloc_struct___anonstruct_Vertex_2 result (Int.(-) n (1)) (old
        !__anonstruct_Vertex_2_alloc_table))
       /\
       ((fresh_tag_struct___anonstruct_Vertex_2 result (Int.(-) n (1)) (old
        !__anonstruct_Vertex_2_tag_table))
       /\
       ((typeof_struct___anonstruct_Vertex_2 result (0) n
        !__anonstruct_Vertex_2_tag_table)
       /\
       (container_of_struct___anonstruct_Vertex_2 result (0) n
       !__anonstruct_Vertex_2_tag_table))))))) }
  
  val allocate_singleton_struct___anonstruct_Vertex_2
  (__anonstruct_Vertex_2_alloc_table : ref (alloc_table
   __anonstruct_Vertex_2)) 
   (__anonstruct_Vertex_2_tag_table : ref (tag_table
    __anonstruct_Vertex_2)) : (pointer __anonstruct_Vertex_2)
    requires { true } writes { __anonstruct_Vertex_2_alloc_table,
    __anonstruct_Vertex_2_tag_table }
    ensures {
      ((strict_valid_struct___anonstruct_Vertex_2 result (0) (0)
       !__anonstruct_Vertex_2_alloc_table)
      /\
      ((frame_alloc_struct___anonstruct_Vertex_2 result (1) (old
       !__anonstruct_Vertex_2_alloc_table)
       !__anonstruct_Vertex_2_alloc_table)
      /\
      ((frame_tag_struct___anonstruct_Vertex_2 result (old
       !__anonstruct_Vertex_2_tag_table) !__anonstruct_Vertex_2_tag_table)
      /\
      ((fresh_alloc_struct___anonstruct_Vertex_2 result (0) (old
       !__anonstruct_Vertex_2_alloc_table))
      /\
      ((fresh_tag_struct___anonstruct_Vertex_2 result (0) (old
       !__anonstruct_Vertex_2_tag_table))
      /\
      ((typeof_singleton_struct___anonstruct_Vertex_2 result
       !__anonstruct_Vertex_2_tag_table)
      /\
      (container_of_singleton_struct___anonstruct_Vertex_2 result
      !__anonstruct_Vertex_2_tag_table))))))) }
  
end

theory Struct_voidP

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import core.Tag_table 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use import core.Alloc 
  
  use why3.Bool.Bool 
  
  use import core.Voidp_tag_id 
  
  predicate frame_tag_struct_voidP (p : (pointer voidP)) (old_voidP_tag_table
  : (tag_table voidP)) (voidP_tag_table : (tag_table voidP))
  =
     ((tag_extends old_voidP_tag_table voidP_tag_table) /\
     (alloc_tag_block old_voidP_tag_table voidP_tag_table p))
  
  predicate frame_free_struct_voidP (p : (pointer voidP))
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((free_extends old_voidP_alloc_table voidP_alloc_table) /\
     (free_block old_voidP_alloc_table voidP_alloc_table p))
  
  predicate frame_alloc_struct_voidP (p : (pointer voidP)) (n : int)
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((alloc_extends old_voidP_alloc_table voidP_alloc_table) /\
     (alloc_block old_voidP_alloc_table voidP_alloc_table p n))
  
  predicate fresh_tag_struct_voidP (p : (pointer voidP)) (n : int)
  (voidP_tag_table : (tag_table voidP))
  = (tag_fresh voidP_tag_table p)
  
  predicate fresh_alloc_struct_voidP (p : (pointer voidP)) (n : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (alloc_fresh voidP_alloc_table p)
  
  predicate container_of_singleton_struct_voidP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP)) = true
  
  predicate container_of_struct_voidP (p : (pointer voidP)) (l : int) (r :
  int) (voidP_tag_table : (tag_table voidP)) = true
  
  predicate typeof_singleton_struct_voidP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = ((=) (typeof voidP_tag_table p) voidP_tag)
  
  predicate typeof_struct_voidP (p : (pointer voidP)) (l : int) (r : int)
  (voidP_tag_table : (tag_table voidP))
  =
     (((=) (typeof voidP_tag_table p) voidP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       ((=) (typeof voidP_tag_table (shift p i)) voidP_tag))))
  
  predicate instanceof_singleton_struct_voidP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = (instanceof voidP_tag_table p voidP_tag)
  
  predicate instanceof_struct_voidP (p : (pointer voidP)) (l : int) (r : int)
  (voidP_tag_table : (tag_table voidP))
  =
     ((instanceof voidP_tag_table p voidP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       (instanceof voidP_tag_table (shift p i) voidP_tag))))
  
  predicate right_valid_struct_voidP (p : (pointer voidP)) (b : int)
  (voidP_alloc_table : (alloc_table voidP))
  = ((>=) (offset_max voidP_alloc_table p) b)
  
  predicate left_valid_struct_voidP (p : (pointer voidP)) (a : int)
  (voidP_alloc_table : (alloc_table voidP))
  = ((<=) (offset_min voidP_alloc_table p) a)
  
  predicate strict_left_valid_struct_voidP (p : (pointer voidP)) (a : int)
  (voidP_alloc_table : (alloc_table voidP))
  = ((=) (offset_min voidP_alloc_table p) a)
  
  predicate valid_struct_voidP (p : (pointer voidP)) (a : int) (b : int)
  (voidP_alloc_table : (alloc_table voidP))
  =
     (((<=) (offset_min voidP_alloc_table p) a) /\
     ((>=) (offset_max voidP_alloc_table p) b))
  
  predicate strict_valid_struct_voidP (p : (pointer voidP)) (a : int) (b :
  int) (voidP_alloc_table : (alloc_table voidP))
  =
     (((=) (offset_min voidP_alloc_table p) a) /\
     ((=) (offset_max voidP_alloc_table p) b))
  
end

theory Struct_charP

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import core.Tag_table 
  
  use import Struct_voidP 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Alloc_table 
  
  use import core.Alloc 
  
  use why3.Bool.Bool 
  
  use import core.Charp_tag_id 
  
  predicate frame_tag_struct_charP (p : (pointer voidP)) (old_voidP_tag_table
  : (tag_table voidP)) (voidP_tag_table : (tag_table voidP))
  =
     ((tag_extends old_voidP_tag_table voidP_tag_table) /\
     (alloc_tag_block old_voidP_tag_table voidP_tag_table p))
  
  predicate frame_free_struct_charP (p : (pointer voidP))
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((free_extends old_voidP_alloc_table voidP_alloc_table) /\
     (free_block old_voidP_alloc_table voidP_alloc_table p))
  
  predicate frame_alloc_struct_charP (p : (pointer voidP)) (n : int)
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((alloc_extends old_voidP_alloc_table voidP_alloc_table) /\
     (alloc_block old_voidP_alloc_table voidP_alloc_table p n))
  
  predicate fresh_tag_struct_charP (p : (pointer voidP)) (n : int)
  (voidP_tag_table : (tag_table voidP))
  = (fresh_tag_struct_voidP p n voidP_tag_table)
  
  predicate fresh_alloc_struct_charP (p : (pointer voidP)) (n : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (fresh_alloc_struct_voidP p n voidP_alloc_table)
  
  predicate container_of_singleton_struct_charP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP)) = true
  
  predicate container_of_struct_charP (p : (pointer voidP)) (l : int) (r :
  int) (voidP_tag_table : (tag_table voidP)) = true
  
  predicate typeof_singleton_struct_charP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = ((=) (typeof voidP_tag_table p) charP_tag)
  
  predicate typeof_struct_charP (p : (pointer voidP)) (l : int) (r : int)
  (voidP_tag_table : (tag_table voidP))
  =
     (((=) (typeof voidP_tag_table p) charP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       ((=) (typeof voidP_tag_table (shift p i)) charP_tag))))
  
  predicate instanceof_singleton_struct_charP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = (instanceof voidP_tag_table p charP_tag)
  
  predicate instanceof_struct_charP (p : (pointer voidP)) (l : int) (r : int)
  (voidP_tag_table : (tag_table voidP))
  =
     ((instanceof voidP_tag_table p charP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       (instanceof voidP_tag_table (shift p i) charP_tag))))
  
  predicate right_valid_struct_charP (p : (pointer voidP)) (b : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (right_valid_struct_voidP p b voidP_alloc_table)
  
  predicate left_valid_struct_charP (p : (pointer voidP)) (a : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (left_valid_struct_voidP p a voidP_alloc_table)
  
  predicate strict_left_valid_struct_charP (p : (pointer voidP)) (a : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (strict_left_valid_struct_voidP p a voidP_alloc_table)
  
  predicate valid_struct_charP (p : (pointer voidP)) (a : int) (b : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (valid_struct_voidP p a b voidP_alloc_table)
  
  predicate strict_valid_struct_charP (p : (pointer voidP)) (a : int) (b :
  int) (voidP_alloc_table : (alloc_table voidP))
  = (strict_valid_struct_voidP p a b voidP_alloc_table)
  
end

module Struct_charP_unsafe

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import Struct_charP 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val free_struct_charP
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires {
      (("expl:Deallocation" ((=) p null)) \/ (freeable !voidP_alloc_table p))
      }
    writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct_charP p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      (fresh_alloc_struct_charP p (offset_max (old !voidP_alloc_table) p)
      !voidP_alloc_table))) }
  
  val allocate_struct_charP_requires
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { ((>=) n (0)) } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct_charP result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct_charP result n (old !voidP_alloc_table)
        !voidP_alloc_table)
       /\
       ((frame_tag_struct_charP result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct_charP result (Int.(-) n (1)) (old
        !voidP_alloc_table))
       /\
       ((fresh_tag_struct_charP result (Int.(-) n (1)) (old
        !voidP_tag_table))
       /\
       ((typeof_struct_charP result (0) n !voidP_tag_table) /\
       (container_of_struct_charP result (0) n !voidP_tag_table))))))) }
  
end

module Struct_charP_safe

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import Struct_charP 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val safe_free_struct_charP
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires { true } writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct_charP p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      (fresh_alloc_struct_charP p (offset_max (old !voidP_alloc_table) p)
      !voidP_alloc_table))) }
  
  val allocate_struct_charP
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { true } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct_charP result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct_charP result n (old !voidP_alloc_table)
        !voidP_alloc_table)
       /\
       ((frame_tag_struct_charP result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct_charP result (Int.(-) n (1)) (old
        !voidP_alloc_table))
       /\
       ((fresh_tag_struct_charP result (Int.(-) n (1)) (old
        !voidP_tag_table))
       /\
       ((typeof_struct_charP result (0) n !voidP_tag_table) /\
       (container_of_struct_charP result (0) n !voidP_tag_table))))))) }
  
  val allocate_singleton_struct_charP
  (voidP_alloc_table : ref (alloc_table voidP)) 
   (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
    requires { true } writes { voidP_alloc_table, voidP_tag_table }
    ensures {
      ((strict_valid_struct_charP result (0) (0) !voidP_alloc_table) /\
      ((frame_alloc_struct_charP result (1) (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      ((frame_tag_struct_charP result (old !voidP_tag_table)
       !voidP_tag_table)
      /\
      ((fresh_alloc_struct_charP result (0) (old !voidP_alloc_table)) /\
      ((fresh_tag_struct_charP result (0) (old !voidP_tag_table)) /\
      ((typeof_singleton_struct_charP result !voidP_tag_table) /\
      (container_of_singleton_struct_charP result !voidP_tag_table))))))) }
  
end

module Struct_voidP_unsafe

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import Struct_voidP 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val free_struct_voidP
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires {
      (("expl:Deallocation" ((=) p null)) \/ (freeable !voidP_alloc_table p))
      }
    writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct_voidP p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      (fresh_alloc_struct_voidP p (offset_max (old !voidP_alloc_table) p)
      !voidP_alloc_table))) }
  
  val allocate_struct_voidP_requires
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { ((>=) n (0)) } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct_voidP result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct_voidP result n (old !voidP_alloc_table)
        !voidP_alloc_table)
       /\
       ((frame_tag_struct_voidP result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct_voidP result (Int.(-) n (1)) (old
        !voidP_alloc_table))
       /\
       ((fresh_tag_struct_voidP result (Int.(-) n (1)) (old
        !voidP_tag_table))
       /\
       ((typeof_struct_voidP result (0) n !voidP_tag_table) /\
       (container_of_struct_voidP result (0) n !voidP_tag_table))))))) }
  
end

module Struct_voidP_safe

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import Struct_voidP 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val safe_free_struct_voidP
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires { true } writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct_voidP p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      (fresh_alloc_struct_voidP p (offset_max (old !voidP_alloc_table) p)
      !voidP_alloc_table))) }
  
  val allocate_struct_voidP
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { true } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct_voidP result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct_voidP result n (old !voidP_alloc_table)
        !voidP_alloc_table)
       /\
       ((frame_tag_struct_voidP result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct_voidP result (Int.(-) n (1)) (old
        !voidP_alloc_table))
       /\
       ((fresh_tag_struct_voidP result (Int.(-) n (1)) (old
        !voidP_tag_table))
       /\
       ((typeof_struct_voidP result (0) n !voidP_tag_table) /\
       (container_of_struct_voidP result (0) n !voidP_tag_table))))))) }
  
  val allocate_singleton_struct_voidP
  (voidP_alloc_table : ref (alloc_table voidP)) 
   (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
    requires { true } writes { voidP_alloc_table, voidP_tag_table }
    ensures {
      ((strict_valid_struct_voidP result (0) (0) !voidP_alloc_table) /\
      ((frame_alloc_struct_voidP result (1) (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      ((frame_tag_struct_voidP result (old !voidP_tag_table)
       !voidP_tag_table)
      /\
      ((fresh_alloc_struct_voidP result (0) (old !voidP_alloc_table)) /\
      ((fresh_tag_struct_voidP result (0) (old !voidP_tag_table)) /\
      ((typeof_singleton_struct_voidP result !voidP_tag_table) /\
      (container_of_singleton_struct_voidP result !voidP_tag_table))))))) }
  
end

module Safe_bit_uint64_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use Bit_uint64_of_Bit_uint8 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use Bit_uint64_of_Bit_uint8 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use Bit_uint32_of_Bit_uint8 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use Bit_uint32_of_Bit_uint8 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint8 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint8 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint8 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Uint8.to_int n)) \/
     (Bit_int8_of_Bit_uint8.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint8 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int8.t
   requires { (Int8.in_bounds (Uint8.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint8 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint8 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint8 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint8 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint8 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint8 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use Bit_uint32_of_Bit_uint64 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint64.to_int n)))
     /\ ((=) result (Bit_uint32_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Uint64.to_int n)) \/
     (Bit_uint32_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use Bit_uint32_of_Bit_uint64 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint64.to_int n)))
     /\ ((=) result (Bit_uint32_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint32.t
   requires { (Uint32.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint64 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint64.to_int n)))
     /\ ((=) result (Bit_uint16_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Uint64.to_int n)) \/
     (Bit_uint16_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint64 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint64.to_int n)))
     /\ ((=) result (Bit_uint16_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint16.t
   requires { (Uint16.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint64 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Uint64.to_int n)) \/
     (Bit_int8_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint64 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int8.t
   requires { (Int8.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint64 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int64.t
   requires {
     ((Bit_int64.in_bounds (Uint64.to_int n)) \/
     (Bit_int64_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Int64.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint64 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int64.t
   requires { (Int64.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Int64.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint64 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int32.t
   requires {
     ((Bit_int32.in_bounds (Uint64.to_int n)) \/
     (Bit_int32_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Int32.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint64 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int32.t
   requires { (Int32.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Int32.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int32.t
   requires { true }
   ensures { ((=) (Int32.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint64 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Uint64.to_int n)) \/
     (Bit_int16_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint64 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int16.t
   requires { (Int16.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int16.t
   requires { true }
   ensures { ((=) (Int16.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint32 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint32.to_int n)))
     /\ ((=) result (Bit_uint16_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Uint32.to_int n)) \/
     (Bit_uint16_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint32 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint32.to_int n)))
     /\ ((=) result (Bit_uint16_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint16.t
   requires { (Uint16.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint32 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Uint32.to_int n)) \/
     (Bit_int8_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint32 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int8.t
   requires { (Int8.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint32 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint32 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint32 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int32.t
   requires {
     ((Bit_int32.in_bounds (Uint32.to_int n)) \/
     (Bit_int32_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Int32.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint32 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int32.t
   requires { (Int32.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Int32.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int32.t
   requires { true }
   ensures { ((=) (Int32.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint32 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Uint32.to_int n)) \/
     (Bit_int16_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint32 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int16.t
   requires { (Int16.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int16.t
   requires { true }
   ensures { ((=) (Int16.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint16 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Uint16.to_int n)) \/
     (Bit_int8_of_Bit_uint16.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint16 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int8.t
   requires { (Int8.in_bounds (Uint16.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint16 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint16 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint16 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint16 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures { ((=) (Int32.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures { ((=) (Int32.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint16 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Uint16.to_int n)) \/
     (Bit_int16_of_Bit_uint16.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint16 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int16.t
   requires { (Int16.in_bounds (Uint16.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int16.t
   requires { true }
   ensures { ((=) (Int16.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_int8

  use enum.Int8 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_int8 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_int8

  use enum.Int8 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_int8 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_int8

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_int8

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_int8

  use enum.Int8 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_int8 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_int8

  use enum.Int8 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_int8 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_int8

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_int8

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_int8

  use enum.Int8 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int8 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_int8

  use enum.Int8 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int8 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_int8

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_int8

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_int64

  use enum.Int64 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_int64 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int32.t
   requires {
     ((Bit_int32.in_bounds (Int64.to_int n)) \/
     (Bit_int32_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Int32.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_int64

  use enum.Int64 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_int64 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_int64

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int32.t
   requires { (Int32.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Int32.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_int64

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_int64

  use enum.Int64 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int64 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Int64.to_int n)) \/
     (Bit_int16_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_int64

  use enum.Int64 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int64 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_int64

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int16.t
   requires { (Int16.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_int64

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_int32

  use enum.Int32 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int32 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Int32.to_int n)) \/
     (Bit_int16_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_int32

  use enum.Int32 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int32 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_int32

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int16.t
   requires { (Int16.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_int32

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use Bit_uint8_of_Bit_uint64 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Uint64.to_int n)) \/
     (Bit_uint8_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use Bit_uint8_of_Bit_uint64 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint8.t
   requires { (Uint8.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint8.t
   requires { true }
   ensures { ((=) (Uint8.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use Bit_uint8_of_Bit_uint32 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Uint32.to_int n)) \/
     (Bit_uint8_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use Bit_uint8_of_Bit_uint32 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint8.t
   requires { (Uint8.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint8.t
   requires { true }
   ensures { ((=) (Uint8.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use Bit_uint8_of_Bit_uint16 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Uint16.to_int n)) \/
     (Bit_uint8_of_Bit_uint16.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use Bit_uint8_of_Bit_uint16 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint8.t
   requires { (Uint8.in_bounds (Uint16.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint8.t
   requires { true }
   ensures { ((=) (Uint8.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use Bit_uint8_of_Bit_int8 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Int8.to_int n)) \/
     (Bit_uint8_of_Bit_int8.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use Bit_uint8_of_Bit_int8 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint8.t
   requires { (Uint8.in_bounds (Int8.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint8.t
   requires { true } ensures { ((=) (Uint8.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use Bit_uint8_of_Bit_int64 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Int64.to_int n)) \/
     (Bit_uint8_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use Bit_uint8_of_Bit_int64 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint8.t
   requires { (Uint8.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint8.t
   requires { true } ensures { ((=) (Uint8.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use Bit_uint8_of_Bit_int32 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Int32.to_int n)) \/
     (Bit_uint8_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use Bit_uint8_of_Bit_int32 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint8.t
   requires { (Uint8.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint8.t
   requires { true } ensures { ((=) (Uint8.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use Bit_uint8_of_Bit_int16 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Int16.to_int n)) \/
     (Bit_uint8_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use Bit_uint8_of_Bit_int16 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint8.t
   requires { (Uint8.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint8.t
   requires { true } ensures { ((=) (Uint8.to_int result) (Int16.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use Bit_uint64_of_Bit_uint32 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint32.to_int n)))
     /\ ((=) result (Bit_uint64_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use Bit_uint64_of_Bit_uint32 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint32.to_int n)))
     /\ ((=) result (Bit_uint64_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use Bit_uint64_of_Bit_uint16 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint16.to_int n)))
     /\ ((=) result (Bit_uint64_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use Bit_uint64_of_Bit_uint16 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint16.to_int n)))
     /\ ((=) result (Bit_uint64_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use Bit_uint64_of_Bit_int8 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint64.t
   requires {
     ((Bit_uint64.in_bounds (Int8.to_int n)) \/
     (Bit_uint64_of_Bit_int8.is_safe n)) }
   ensures {
     (((=) (Uint64.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use Bit_uint64_of_Bit_int8 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint64.t
   requires { (Uint64.in_bounds (Int8.to_int n)) }
   ensures { ((=) (Uint64.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint64.t
   requires { true } ensures { ((=) (Uint64.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use Bit_uint64_of_Bit_int64 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint64.t
   requires {
     ((Bit_uint64.in_bounds (Int64.to_int n)) \/
     (Bit_uint64_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Uint64.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use Bit_uint64_of_Bit_int64 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint64.t
   requires { (Uint64.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Uint64.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use Bit_uint64_of_Bit_int32 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint64.t
   requires {
     ((Bit_uint64.in_bounds (Int32.to_int n)) \/
     (Bit_uint64_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Uint64.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use Bit_uint64_of_Bit_int32 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint64.t
   requires { (Uint64.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Uint64.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use Bit_uint64_of_Bit_int16 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint64.t
   requires {
     ((Bit_uint64.in_bounds (Int16.to_int n)) \/
     (Bit_uint64_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Uint64.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use Bit_uint64_of_Bit_int16 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint64.t
   requires { (Uint64.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Uint64.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Int16.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use Bit_uint32_of_Bit_uint16 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint16.to_int n)))
     /\ ((=) result (Bit_uint32_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use Bit_uint32_of_Bit_uint16 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint16.to_int n)))
     /\ ((=) result (Bit_uint32_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use Bit_uint32_of_Bit_int8 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Int8.to_int n)) \/
     (Bit_uint32_of_Bit_int8.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use Bit_uint32_of_Bit_int8 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint32.t
   requires { (Uint32.in_bounds (Int8.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint32.t
   requires { true } ensures { ((=) (Uint32.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use Bit_uint32_of_Bit_int64 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Int64.to_int n)) \/
     (Bit_uint32_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use Bit_uint32_of_Bit_int64 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint32.t
   requires { (Uint32.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use Bit_uint32_of_Bit_int32 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Int32.to_int n)) \/
     (Bit_uint32_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use Bit_uint32_of_Bit_int32 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint32.t
   requires { (Uint32.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use Bit_uint32_of_Bit_int16 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Int16.to_int n)) \/
     (Bit_uint32_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use Bit_uint32_of_Bit_int16 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint32.t
   requires { (Uint32.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Int16.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use Bit_uint16_of_Bit_int8 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Int8.to_int n)) \/
     (Bit_uint16_of_Bit_int8.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use Bit_uint16_of_Bit_int8 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint16.t
   requires { (Uint16.in_bounds (Int8.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint16.t
   requires { true } ensures { ((=) (Uint16.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use Bit_uint16_of_Bit_int64 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Int64.to_int n)) \/
     (Bit_uint16_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use Bit_uint16_of_Bit_int64 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint16.t
   requires { (Uint16.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use Bit_uint16_of_Bit_int32 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Int32.to_int n)) \/
     (Bit_uint16_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use Bit_uint16_of_Bit_int32 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint16.t
   requires { (Uint16.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use Bit_uint16_of_Bit_int16 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Int16.to_int n)) \/
     (Bit_uint16_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use Bit_uint16_of_Bit_int16 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint16.t
   requires { (Uint16.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Int16.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_int64

  use enum.Int8 
  
  use enum.Int64 
  
  use Bit_int8_of_Bit_int64 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Int64.to_int n)) \/
     (Bit_int8_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_int64

  use enum.Int8 
  
  use enum.Int64 
  
  use Bit_int8_of_Bit_int64 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_int64

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int8.t
   requires { (Int8.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_int64

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_int32

  use enum.Int8 
  
  use enum.Int32 
  
  use Bit_int8_of_Bit_int32 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Int32.to_int n)) \/
     (Bit_int8_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_int32

  use enum.Int8 
  
  use enum.Int32 
  
  use Bit_int8_of_Bit_int32 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_int32

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int8.t
   requires { (Int8.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_int32

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_int16

  use enum.Int8 
  
  use enum.Int16 
  
  use Bit_int8_of_Bit_int16 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Int16.to_int n)) \/
     (Bit_int8_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_int16

  use enum.Int8 
  
  use enum.Int16 
  
  use Bit_int8_of_Bit_int16 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_int16

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int8.t
   requires { (Int8.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_int16

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Int16.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_int32

  use enum.Int64 
  
  use enum.Int32 
  
  use Bit_int64_of_Bit_int32 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_int32

  use enum.Int64 
  
  use enum.Int32 
  
  use Bit_int64_of_Bit_int32 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_int32

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_int32

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_int16

  use enum.Int64 
  
  use enum.Int16 
  
  use Bit_int64_of_Bit_int16 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_int16

  use enum.Int64 
  
  use enum.Int16 
  
  use Bit_int64_of_Bit_int16 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_int16

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_int16

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int16.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_int16

  use enum.Int32 
  
  use enum.Int16 
  
  use Bit_int32_of_Bit_int16 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_int16

  use enum.Int32 
  
  use enum.Int16 
  
  use Bit_int32_of_Bit_int16 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_int16

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_int16

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int16.to_int n)) }
  
end

module Function_count_after

  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Axiomatic_EdgesCount 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  use import Lemma_zeros 
  
  use import Lemma_count_prop2 
  
  use import Lemma_count_prop 
  
  val count_after
  (g_1_0 : (pointer __anonstruct_Graph_4)) 
   (f_1_0 : Int32.t) 
    (t_1_0 : Int32.t) 
     (m_1 : Int32.t) 
      (__anonstruct_Vertex_2_vertices_100_alloc_table : (alloc_table
       __anonstruct_Vertex_2)) 
       (__anonstruct_Graph_4_g_1_12_alloc_table : (alloc_table
        __anonstruct_Graph_4)) 
        (__anonstruct_Edge_3_edges_99_alloc_table : (alloc_table
         __anonstruct_Edge_3)) 
         (__anonstruct_Graph_4_esize_g_1_12 : (memory __anonstruct_Graph_4
          Int32.t)) 
          (__anonstruct_Graph_4_ecnt_g_1_12 : (memory __anonstruct_Graph_4
           Int32.t)) 
           (__anonstruct_Graph_4_edges_g_1_12 : (memory __anonstruct_Graph_4
            (pointer __anonstruct_Edge_3))) 
            (__anonstruct_Graph_4_vsize_g_1_12 : (memory __anonstruct_Graph_4
             Int32.t)) 
             (__anonstruct_Graph_4_vertices_g_1_12 : (memory
              __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2))) 
              (__anonstruct_Edge_3_existent_0_edges_99 : (memory
               __anonstruct_Edge_3 Int32.t)) 
               (__anonstruct_Edge_3_to_edges_99 : (memory __anonstruct_Edge_3
                Int32.t)) 
                (__anonstruct_Edge_3_from_edges_99 : (memory
                 __anonstruct_Edge_3 Int32.t)) 
                 (__anonstruct_Vertex_2_existent_vertices_100 : (memory
                  __anonstruct_Vertex_2 Int32.t)) : unit
                  requires { true }
                  ensures {
                    (#"/home/nik/Projects/ver/hw3/mygraph.c" 117 16 53#
                    "expl:Ensures clause"
                    ((=)
                    (count g_1_0 (Int32.to_int f_1_0) (Int32.to_int t_1_0)
                    (Int32.to_int
                    (select __anonstruct_Graph_4_ecnt_g_1_12 g_1_0))
                    (Int32.to_int
                    (select __anonstruct_Graph_4_esize_g_1_12 g_1_0))
                    __anonstruct_Graph_4_edges_g_1_12
                    __anonstruct_Edge_3_existent_0_edges_99
                    __anonstruct_Edge_3_to_edges_99
                    __anonstruct_Edge_3_from_edges_99) (0))) }
  
end

module Function_count_after_safe

  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_graph_valid 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Axiomatic_EdgesCount 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  use import Lemma_zeros 
  
  use import Lemma_count_prop2 
  
  use import Lemma_count_prop 
  
  val count_after
  (g_1_0 : (pointer __anonstruct_Graph_4)) 
   (f_1_0 : Int32.t) 
    (t_1_0 : Int32.t) 
     (m_1 : Int32.t) 
      (__anonstruct_Vertex_2_vertices_100_alloc_table : (alloc_table
       __anonstruct_Vertex_2)) 
       (__anonstruct_Graph_4_g_1_12_alloc_table : (alloc_table
        __anonstruct_Graph_4)) 
        (__anonstruct_Edge_3_edges_99_alloc_table : (alloc_table
         __anonstruct_Edge_3)) 
         (__anonstruct_Graph_4_esize_g_1_12 : (memory __anonstruct_Graph_4
          Int32.t)) 
          (__anonstruct_Graph_4_ecnt_g_1_12 : (memory __anonstruct_Graph_4
           Int32.t)) 
           (__anonstruct_Graph_4_edges_g_1_12 : (memory __anonstruct_Graph_4
            (pointer __anonstruct_Edge_3))) 
            (__anonstruct_Graph_4_vsize_g_1_12 : (memory __anonstruct_Graph_4
             Int32.t)) 
             (__anonstruct_Graph_4_vertices_g_1_12 : (memory
              __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2))) 
              (__anonstruct_Edge_3_existent_0_edges_99 : (memory
               __anonstruct_Edge_3 Int32.t)) 
               (__anonstruct_Edge_3_to_edges_99 : (memory __anonstruct_Edge_3
                Int32.t)) 
                (__anonstruct_Edge_3_from_edges_99 : (memory
                 __anonstruct_Edge_3 Int32.t)) 
                 (__anonstruct_Vertex_2_existent_vertices_100 : (memory
                  __anonstruct_Vertex_2 Int32.t)) : unit
                  requires {
                    ("expl:Internal"
                    (#"mygraph_c.jc" 177 12 238# "expl:Requires clause"
                    ((#"/home/nik/Projects/ver/hw3/mygraph.c" 115 17 26#
                     "expl:Requires clause"
                     (#"mygraph_c.jc" 177 12 238# "expl:Requires clause"
                     ((#"mygraph_c.jc" 177 12 238# "expl:Requires clause"
                      ((<=)
                      (offset_min __anonstruct_Graph_4_g_1_12_alloc_table
                      g_1_0) (0)))
                     /\
                     (#"mygraph_c.jc" 177 12 238# "expl:Requires clause"
                     ((#"mygraph_c.jc" 177 12 238# "expl:Requires clause"
                      ((>=)
                      (offset_max __anonstruct_Graph_4_g_1_12_alloc_table
                      g_1_0) (0)))
                     /\
                     (#"mygraph_c.jc" 177 12 238# "expl:Requires clause"
                     ((=) true true)))))))
                    /\
                    (#"/home/nik/Projects/ver/hw3/mygraph.c" 116 17 31#
                    "expl:Requires clause"
                    (graph_valid g_1_0
                    __anonstruct_Vertex_2_vertices_100_alloc_table
                    __anonstruct_Edge_3_edges_99_alloc_table
                    __anonstruct_Graph_4_esize_g_1_12
                    __anonstruct_Graph_4_ecnt_g_1_12
                    __anonstruct_Graph_4_edges_g_1_12
                    __anonstruct_Graph_4_vsize_g_1_12
                    __anonstruct_Graph_4_vertices_g_1_12
                    __anonstruct_Edge_3_existent_0_edges_99
                    __anonstruct_Edge_3_to_edges_99
                    __anonstruct_Edge_3_from_edges_99
                    __anonstruct_Vertex_2_existent_vertices_100))))) }
                  ensures {
                    (#"/home/nik/Projects/ver/hw3/mygraph.c" 117 16 53#
                    "expl:Ensures clause"
                    ((=)
                    (count g_1_0 (Int32.to_int f_1_0) (Int32.to_int t_1_0)
                    (Int32.to_int
                    (select __anonstruct_Graph_4_ecnt_g_1_12 g_1_0))
                    (Int32.to_int
                    (select __anonstruct_Graph_4_esize_g_1_12 g_1_0))
                    __anonstruct_Graph_4_edges_g_1_12
                    __anonstruct_Edge_3_existent_0_edges_99
                    __anonstruct_Edge_3_to_edges_99
                    __anonstruct_Edge_3_from_edges_99) (0))) }
  
end

module Function_count_0

  use import core.Tag_table_type 
  
  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_all_count 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  use import Lemma_zeros 
  
  use import Lemma_count_prop2 
  
  use import Lemma_count_prop 
  
  val count_0
  (g_0_0 : (pointer __anonstruct_Graph_4)) 
   (f_0 : Int32.t) 
    (t_0 : Int32.t) 
     (__anonstruct_Vertex_2_vertices_29_alloc_table : (alloc_table
      __anonstruct_Vertex_2)) 
      (__anonstruct_Graph_4_g_0_13_alloc_table : (alloc_table
       __anonstruct_Graph_4)) 
       (__anonstruct_Edge_3_edges_30_alloc_table : (alloc_table
        __anonstruct_Edge_3)) 
        (__anonstruct_Edge_3_edges_30_tag_table : (tag_table
         __anonstruct_Edge_3)) 
         (__anonstruct_Graph_4_esize_g_0_13 : (memory __anonstruct_Graph_4
          Int32.t)) 
          (__anonstruct_Graph_4_ecnt_g_0_13 : (memory __anonstruct_Graph_4
           Int32.t)) 
           (__anonstruct_Graph_4_edges_g_0_13 : (memory __anonstruct_Graph_4
            (pointer __anonstruct_Edge_3))) 
            (__anonstruct_Graph_4_vsize_g_0_13 : (memory __anonstruct_Graph_4
             Int32.t)) 
             (__anonstruct_Graph_4_vertices_g_0_13 : (memory
              __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2))) 
              (__anonstruct_Edge_3_existent_0_edges_30 : (memory
               __anonstruct_Edge_3 Int32.t)) 
               (__anonstruct_Edge_3_to_edges_30 : (memory __anonstruct_Edge_3
                Int32.t)) 
                (__anonstruct_Edge_3_from_edges_30 : (memory
                 __anonstruct_Edge_3 Int32.t)) 
                 (__anonstruct_Vertex_2_existent_vertices_29 : (memory
                  __anonstruct_Vertex_2 Int32.t)) : Int32.t
                  requires { true }
                  ensures {
                    (#"/home/nik/Projects/ver/hw3/mygraph.c" 136 12 41#
                    "expl:Ensures clause"
                    ((=) (Int32.to_int result)
                    (all_count g_0_0 (Int32.to_int f_0) (Int32.to_int t_0)
                    __anonstruct_Graph_4_esize_g_0_13
                    __anonstruct_Graph_4_edges_g_0_13
                    __anonstruct_Edge_3_existent_0_edges_30
                    __anonstruct_Edge_3_to_edges_30
                    __anonstruct_Edge_3_from_edges_30))) }
  
end

module Function_count_0_safe

  use import core.Tag_table_type 
  
  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_is_vertex 
  
  use import Logic_graph_valid 
  
  use import Logic_all_count 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Axiomatic_LF__Axiomatic__count_after 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  use import Lemma_zeros 
  
  use import Lemma_count_prop2 
  
  use import Lemma_count_prop 
  
  val count_0
  (g_0_0 : (pointer __anonstruct_Graph_4)) 
   (f_0 : Int32.t) 
    (t_0 : Int32.t) 
     (__anonstruct_Vertex_2_vertices_29_alloc_table : (alloc_table
      __anonstruct_Vertex_2)) 
      (__anonstruct_Graph_4_g_0_13_alloc_table : (alloc_table
       __anonstruct_Graph_4)) 
       (__anonstruct_Edge_3_edges_30_alloc_table : (alloc_table
        __anonstruct_Edge_3)) 
        (__anonstruct_Edge_3_edges_30_tag_table : (tag_table
         __anonstruct_Edge_3)) 
         (__anonstruct_Graph_4_esize_g_0_13 : (memory __anonstruct_Graph_4
          Int32.t)) 
          (__anonstruct_Graph_4_ecnt_g_0_13 : (memory __anonstruct_Graph_4
           Int32.t)) 
           (__anonstruct_Graph_4_edges_g_0_13 : (memory __anonstruct_Graph_4
            (pointer __anonstruct_Edge_3))) 
            (__anonstruct_Graph_4_vsize_g_0_13 : (memory __anonstruct_Graph_4
             Int32.t)) 
             (__anonstruct_Graph_4_vertices_g_0_13 : (memory
              __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2))) 
              (__anonstruct_Edge_3_existent_0_edges_30 : (memory
               __anonstruct_Edge_3 Int32.t)) 
               (__anonstruct_Edge_3_to_edges_30 : (memory __anonstruct_Edge_3
                Int32.t)) 
                (__anonstruct_Edge_3_from_edges_30 : (memory
                 __anonstruct_Edge_3 Int32.t)) 
                 (__anonstruct_Vertex_2_existent_vertices_29 : (memory
                  __anonstruct_Vertex_2 Int32.t)) : Int32.t
                  requires {
                    ("expl:Internal"
                    (#"mygraph_c.jc" 242 12 802# "expl:Requires clause"
                    ((#"mygraph_c.jc" 242 12 802# "expl:Requires clause"
                     _LF__Predicate__count_after)
                    /\
                    (#"mygraph_c.jc" 242 12 802# "expl:Requires clause"
                    ((#"/home/nik/Projects/ver/hw3/mygraph.c" 131 13 22#
                     "expl:Requires clause"
                     (#"mygraph_c.jc" 242 12 802# "expl:Requires clause"
                     ((#"mygraph_c.jc" 242 12 802# "expl:Requires clause"
                      ((<=)
                      (offset_min __anonstruct_Graph_4_g_0_13_alloc_table
                      g_0_0) (0)))
                     /\
                     (#"mygraph_c.jc" 242 12 802# "expl:Requires clause"
                     ((#"mygraph_c.jc" 242 12 802# "expl:Requires clause"
                      ((>=)
                      (offset_max __anonstruct_Graph_4_g_0_13_alloc_table
                      g_0_0) (0)))
                     /\
                     (#"mygraph_c.jc" 242 12 802# "expl:Requires clause"
                     ((=) true true)))))))
                    /\
                    (#"mygraph_c.jc" 242 12 802# "expl:Requires clause"
                    ((#"/home/nik/Projects/ver/hw3/mygraph.c" 131 26 40#
                     "expl:Requires clause"
                     (graph_valid g_0_0
                     __anonstruct_Vertex_2_vertices_29_alloc_table
                     __anonstruct_Edge_3_edges_30_alloc_table
                     __anonstruct_Graph_4_esize_g_0_13
                     __anonstruct_Graph_4_ecnt_g_0_13
                     __anonstruct_Graph_4_edges_g_0_13
                     __anonstruct_Graph_4_vsize_g_0_13
                     __anonstruct_Graph_4_vertices_g_0_13
                     __anonstruct_Edge_3_existent_0_edges_30
                     __anonstruct_Edge_3_to_edges_30
                     __anonstruct_Edge_3_from_edges_30
                     __anonstruct_Vertex_2_existent_vertices_29))
                    /\
                    (#"mygraph_c.jc" 242 12 802# "expl:Requires clause"
                    ((#"/home/nik/Projects/ver/hw3/mygraph.c" 132 13 28#
                     "expl:Requires clause"
                     (is_vertex g_0_0 (Int32.to_int f_0)
                     __anonstruct_Graph_4_vsize_g_0_13))
                    /\
                    (#"mygraph_c.jc" 242 12 802# "expl:Requires clause"
                    ((#"/home/nik/Projects/ver/hw3/mygraph.c" 133 13 28#
                     "expl:Requires clause"
                     (is_vertex g_0_0 (Int32.to_int t_0)
                     __anonstruct_Graph_4_vsize_g_0_13))
                    /\
                    (#"mygraph_c.jc" 242 12 802# "expl:Requires clause"
                    ((#"/home/nik/Projects/ver/hw3/mygraph.c" 134 13 36#
                     "expl:Requires clause"
                     (not
                     ((=)
                     (Int32.to_int
                     (select __anonstruct_Vertex_2_existent_vertices_29
                     (shift
                     (select __anonstruct_Graph_4_vertices_g_0_13 g_0_0)
                     (Int32.to_int f_0)))) (0))))
                    /\
                    (#"/home/nik/Projects/ver/hw3/mygraph.c" 135 13 36#
                    "expl:Requires clause"
                    (not
                    ((=)
                    (Int32.to_int
                    (select __anonstruct_Vertex_2_existent_vertices_29
                    (shift
                    (select __anonstruct_Graph_4_vertices_g_0_13 g_0_0)
                    (Int32.to_int t_0)))) (0))))))))))))))))) }
                  ensures {
                    (#"/home/nik/Projects/ver/hw3/mygraph.c" 136 12 41#
                    "expl:Ensures clause"
                    ((=) (Int32.to_int result)
                    (all_count g_0_0 (Int32.to_int f_0) (Int32.to_int t_0)
                    __anonstruct_Graph_4_esize_g_0_13
                    __anonstruct_Graph_4_edges_g_0_13
                    __anonstruct_Edge_3_existent_0_edges_30
                    __anonstruct_Edge_3_to_edges_30
                    __anonstruct_Edge_3_from_edges_30))) }
  
end

module Function_add_edge

  use import core.Tag_table_type 
  
  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_graph_valid 
  
  use import Logic_all_count 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  use import Lemma_zeros 
  
  use import Lemma_count_prop2 
  
  use import Lemma_count_prop 
  
  val add_edge
  (g_6 : (pointer __anonstruct_Graph_4)) 
   (f_2 : Int32.t) 
    (t_2 : Int32.t) 
     (__anonstruct_Graph_4_ecnt_g_14 : ref (memory __anonstruct_Graph_4
      Int32.t)) 
      (__anonstruct_Edge_3_existent_0_edges_32 : ref (memory
       __anonstruct_Edge_3 Int32.t)) 
       (__anonstruct_Edge_3_to_edges_32 : ref (memory __anonstruct_Edge_3
        Int32.t)) 
        (__anonstruct_Edge_3_from_edges_32 : ref (memory __anonstruct_Edge_3
         Int32.t)) 
         (__anonstruct_Vertex_2_vertices_31_alloc_table : (alloc_table
          __anonstruct_Vertex_2)) 
          (__anonstruct_Graph_4_g_14_alloc_table : (alloc_table
           __anonstruct_Graph_4)) 
           (__anonstruct_Edge_3_edges_32_alloc_table : (alloc_table
            __anonstruct_Edge_3)) 
            (__anonstruct_Edge_3_edges_32_tag_table : (tag_table
             __anonstruct_Edge_3)) 
             (__anonstruct_Graph_4_esize_g_14 : (memory __anonstruct_Graph_4
              Int32.t)) 
              (__anonstruct_Graph_4_edges_g_14 : (memory __anonstruct_Graph_4
               (pointer __anonstruct_Edge_3))) 
               (__anonstruct_Graph_4_vsize_g_14 : (memory
                __anonstruct_Graph_4 Int32.t)) 
                (__anonstruct_Graph_4_vertices_g_14 : (memory
                 __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2))) 
                 (__anonstruct_Vertex_2_existent_vertices_31 : (memory
                  __anonstruct_Vertex_2 Int32.t)) : unit
                  requires { true } reads {
                  __anonstruct_Edge_3_existent_0_edges_32,
                  __anonstruct_Edge_3_from_edges_32,
                  __anonstruct_Edge_3_to_edges_32,
                  __anonstruct_Graph_4_ecnt_g_14 } writes {
                  __anonstruct_Edge_3_existent_0_edges_32,
                  __anonstruct_Edge_3_from_edges_32,
                  __anonstruct_Edge_3_to_edges_32,
                  __anonstruct_Graph_4_ecnt_g_14 }
                  ensures {
                    (#"/home/nik/Projects/ver/hw3/mygraph.c" 164 10 24#
                    "expl:Ensures clause"
                    (#"/home/nik/Projects/ver/hw3/mygraph.c" 164 10 24#
                    "expl:Ensures clause"
                    ((#"/home/nik/Projects/ver/hw3/mygraph.c" 164 10 24#
                     "expl:Ensures clause"
                     (graph_valid g_6
                     __anonstruct_Vertex_2_vertices_31_alloc_table
                     __anonstruct_Edge_3_edges_32_alloc_table
                     __anonstruct_Graph_4_esize_g_14
                     !__anonstruct_Graph_4_ecnt_g_14
                     __anonstruct_Graph_4_edges_g_14
                     __anonstruct_Graph_4_vsize_g_14
                     __anonstruct_Graph_4_vertices_g_14
                     !__anonstruct_Edge_3_existent_0_edges_32
                     !__anonstruct_Edge_3_to_edges_32
                     !__anonstruct_Edge_3_from_edges_32
                     __anonstruct_Vertex_2_existent_vertices_31))
                    /\
                    (#"/home/nik/Projects/ver/hw3/mygraph.c" 164 10 24#
                    "expl:Ensures clause"
                    ((#"/home/nik/Projects/ver/hw3/mygraph.c" 165 10 59#
                     "expl:Ensures clause"
                     ((=)
                     (all_count g_6 (Int32.to_int f_2) (Int32.to_int t_2)
                     __anonstruct_Graph_4_esize_g_14
                     __anonstruct_Graph_4_edges_g_14
                     !__anonstruct_Edge_3_existent_0_edges_32
                     !__anonstruct_Edge_3_to_edges_32
                     !__anonstruct_Edge_3_from_edges_32)
                     (Int.(+)
                     (all_count g_6 (Int32.to_int f_2) (Int32.to_int t_2)
                     __anonstruct_Graph_4_esize_g_14
                     __anonstruct_Graph_4_edges_g_14 (old
                     !__anonstruct_Edge_3_existent_0_edges_32) (old
                     !__anonstruct_Edge_3_to_edges_32) (old
                     !__anonstruct_Edge_3_from_edges_32)) (1))))
                    /\
                    (#"/home/nik/Projects/ver/hw3/mygraph.c" 166 10 108#
                    "expl:Ensures clause"
                    (forall f2_32 : int.
                     (forall t2_32 : int.
                      (((not ((=) f2_32 (Int32.to_int f_2))) \/
                       (not ((=) t2_32 (Int32.to_int t_2)))) ->
                       ((=)
                       (all_count g_6 f2_32 t2_32
                       __anonstruct_Graph_4_esize_g_14
                       __anonstruct_Graph_4_edges_g_14
                       !__anonstruct_Edge_3_existent_0_edges_32
                       !__anonstruct_Edge_3_to_edges_32
                       !__anonstruct_Edge_3_from_edges_32)
                       (all_count g_6 f2_32 t2_32
                       __anonstruct_Graph_4_esize_g_14
                       __anonstruct_Graph_4_edges_g_14 (old
                       !__anonstruct_Edge_3_existent_0_edges_32) (old
                       !__anonstruct_Edge_3_to_edges_32) (old
                       !__anonstruct_Edge_3_from_edges_32)))))))))))) }
  
end

module Function_add_edge_safe

  use import core.Tag_table_type 
  
  use import Root___anonstruct_Vertex_2 
  
  use import Root___anonstruct_Graph_4 
  
  use import Root___anonstruct_Edge_3 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_is_vertex 
  
  use import Logic_graph_valid 
  
  use import Logic_full 
  
  use import Logic_all_count 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import Axiomatic_LF__Axiomatic__count_after 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  use import Lemma_zeros 
  
  use import Lemma_count_prop2 
  
  use import Lemma_count_prop 
  
  val add_edge
  (g_6 : (pointer __anonstruct_Graph_4)) 
   (f_2 : Int32.t) 
    (t_2 : Int32.t) 
     (__anonstruct_Graph_4_ecnt_g_14 : ref (memory __anonstruct_Graph_4
      Int32.t)) 
      (__anonstruct_Edge_3_existent_0_edges_32 : ref (memory
       __anonstruct_Edge_3 Int32.t)) 
       (__anonstruct_Edge_3_to_edges_32 : ref (memory __anonstruct_Edge_3
        Int32.t)) 
        (__anonstruct_Edge_3_from_edges_32 : ref (memory __anonstruct_Edge_3
         Int32.t)) 
         (__anonstruct_Vertex_2_vertices_31_alloc_table : (alloc_table
          __anonstruct_Vertex_2)) 
          (__anonstruct_Graph_4_g_14_alloc_table : (alloc_table
           __anonstruct_Graph_4)) 
           (__anonstruct_Edge_3_edges_32_alloc_table : (alloc_table
            __anonstruct_Edge_3)) 
            (__anonstruct_Edge_3_edges_32_tag_table : (tag_table
             __anonstruct_Edge_3)) 
             (__anonstruct_Graph_4_esize_g_14 : (memory __anonstruct_Graph_4
              Int32.t)) 
              (__anonstruct_Graph_4_edges_g_14 : (memory __anonstruct_Graph_4
               (pointer __anonstruct_Edge_3))) 
               (__anonstruct_Graph_4_vsize_g_14 : (memory
                __anonstruct_Graph_4 Int32.t)) 
                (__anonstruct_Graph_4_vertices_g_14 : (memory
                 __anonstruct_Graph_4 (pointer __anonstruct_Vertex_2))) 
                 (__anonstruct_Vertex_2_existent_vertices_31 : (memory
                  __anonstruct_Vertex_2 Int32.t)) : unit
                  requires {
                    ("expl:Internal"
                    (#"mygraph_c.jc" 341 12 856# "expl:Requires clause"
                    ((#"mygraph_c.jc" 341 12 856# "expl:Requires clause"
                     _LF__Predicate__count_after)
                    /\
                    (#"mygraph_c.jc" 341 12 856# "expl:Requires clause"
                    ((#"/home/nik/Projects/ver/hw3/mygraph.c" 158 11 20#
                     "expl:Requires clause"
                     (#"mygraph_c.jc" 341 12 856# "expl:Requires clause"
                     ((#"mygraph_c.jc" 341 12 856# "expl:Requires clause"
                      ((<=)
                      (offset_min __anonstruct_Graph_4_g_14_alloc_table g_6)
                      (0)))
                     /\
                     (#"mygraph_c.jc" 341 12 856# "expl:Requires clause"
                     ((#"mygraph_c.jc" 341 12 856# "expl:Requires clause"
                      ((>=)
                      (offset_max __anonstruct_Graph_4_g_14_alloc_table g_6)
                      (0)))
                     /\
                     (#"mygraph_c.jc" 341 12 856# "expl:Requires clause"
                     ((=) true true)))))))
                    /\
                    (#"mygraph_c.jc" 341 12 856# "expl:Requires clause"
                    ((#"/home/nik/Projects/ver/hw3/mygraph.c" 158 24 38#
                     "expl:Requires clause"
                     (graph_valid g_6
                     __anonstruct_Vertex_2_vertices_31_alloc_table
                     __anonstruct_Edge_3_edges_32_alloc_table
                     __anonstruct_Graph_4_esize_g_14
                     !__anonstruct_Graph_4_ecnt_g_14
                     __anonstruct_Graph_4_edges_g_14
                     __anonstruct_Graph_4_vsize_g_14
                     __anonstruct_Graph_4_vertices_g_14
                     !__anonstruct_Edge_3_existent_0_edges_32
                     !__anonstruct_Edge_3_to_edges_32
                     !__anonstruct_Edge_3_from_edges_32
                     __anonstruct_Vertex_2_existent_vertices_31))
                    /\
                    (#"mygraph_c.jc" 341 12 856# "expl:Requires clause"
                    ((#"/home/nik/Projects/ver/hw3/mygraph.c" 159 11 26#
                     "expl:Requires clause"
                     (is_vertex g_6 (Int32.to_int f_2)
                     __anonstruct_Graph_4_vsize_g_14))
                    /\
                    (#"mygraph_c.jc" 341 12 856# "expl:Requires clause"
                    ((#"/home/nik/Projects/ver/hw3/mygraph.c" 160 11 26#
                     "expl:Requires clause"
                     (is_vertex g_6 (Int32.to_int t_2)
                     __anonstruct_Graph_4_vsize_g_14))
                    /\
                    (#"mygraph_c.jc" 341 12 856# "expl:Requires clause"
                    ((#"/home/nik/Projects/ver/hw3/mygraph.c" 161 11 34#
                     "expl:Requires clause"
                     (not
                     ((=)
                     (Int32.to_int
                     (select __anonstruct_Vertex_2_existent_vertices_31
                     (shift (select __anonstruct_Graph_4_vertices_g_14 g_6)
                     (Int32.to_int f_2)))) (0))))
                    /\
                    (#"mygraph_c.jc" 341 12 856# "expl:Requires clause"
                    ((#"/home/nik/Projects/ver/hw3/mygraph.c" 162 11 34#
                     "expl:Requires clause"
                     (not
                     ((=)
                     (Int32.to_int
                     (select __anonstruct_Vertex_2_existent_vertices_31
                     (shift (select __anonstruct_Graph_4_vertices_g_14 g_6)
                     (Int32.to_int t_2)))) (0))))
                    /\
                    (#"/home/nik/Projects/ver/hw3/mygraph.c" 163 11 19#
                    "expl:Requires clause"
                    (not
                    (full g_6 __anonstruct_Graph_4_esize_g_14
                    __anonstruct_Graph_4_edges_g_14
                    !__anonstruct_Edge_3_existent_0_edges_32))))))))))))))))))
                    }
                  reads { __anonstruct_Edge_3_existent_0_edges_32,
                  __anonstruct_Edge_3_from_edges_32,
                  __anonstruct_Edge_3_to_edges_32,
                  __anonstruct_Graph_4_ecnt_g_14 } writes {
                  __anonstruct_Edge_3_existent_0_edges_32,
                  __anonstruct_Edge_3_from_edges_32,
                  __anonstruct_Edge_3_to_edges_32,
                  __anonstruct_Graph_4_ecnt_g_14 }
                  ensures {
                    (#"/home/nik/Projects/ver/hw3/mygraph.c" 164 10 24#
                    "expl:Ensures clause"
                    (#"/home/nik/Projects/ver/hw3/mygraph.c" 164 10 24#
                    "expl:Ensures clause"
                    ((#"/home/nik/Projects/ver/hw3/mygraph.c" 164 10 24#
                     "expl:Ensures clause"
                     (graph_valid g_6
                     __anonstruct_Vertex_2_vertices_31_alloc_table
                     __anonstruct_Edge_3_edges_32_alloc_table
                     __anonstruct_Graph_4_esize_g_14
                     !__anonstruct_Graph_4_ecnt_g_14
                     __anonstruct_Graph_4_edges_g_14
                     __anonstruct_Graph_4_vsize_g_14
                     __anonstruct_Graph_4_vertices_g_14
                     !__anonstruct_Edge_3_existent_0_edges_32
                     !__anonstruct_Edge_3_to_edges_32
                     !__anonstruct_Edge_3_from_edges_32
                     __anonstruct_Vertex_2_existent_vertices_31))
                    /\
                    (#"/home/nik/Projects/ver/hw3/mygraph.c" 164 10 24#
                    "expl:Ensures clause"
                    ((#"/home/nik/Projects/ver/hw3/mygraph.c" 165 10 59#
                     "expl:Ensures clause"
                     ((=)
                     (all_count g_6 (Int32.to_int f_2) (Int32.to_int t_2)
                     __anonstruct_Graph_4_esize_g_14
                     __anonstruct_Graph_4_edges_g_14
                     !__anonstruct_Edge_3_existent_0_edges_32
                     !__anonstruct_Edge_3_to_edges_32
                     !__anonstruct_Edge_3_from_edges_32)
                     (Int.(+)
                     (all_count g_6 (Int32.to_int f_2) (Int32.to_int t_2)
                     __anonstruct_Graph_4_esize_g_14
                     __anonstruct_Graph_4_edges_g_14 (old
                     !__anonstruct_Edge_3_existent_0_edges_32) (old
                     !__anonstruct_Edge_3_to_edges_32) (old
                     !__anonstruct_Edge_3_from_edges_32)) (1))))
                    /\
                    (#"/home/nik/Projects/ver/hw3/mygraph.c" 166 10 108#
                    "expl:Ensures clause"
                    (forall f2_32 : int.
                     (forall t2_32 : int.
                      (((not ((=) f2_32 (Int32.to_int f_2))) \/
                       (not ((=) t2_32 (Int32.to_int t_2)))) ->
                       ((=)
                       (all_count g_6 f2_32 t2_32
                       __anonstruct_Graph_4_esize_g_14
                       __anonstruct_Graph_4_edges_g_14
                       !__anonstruct_Edge_3_existent_0_edges_32
                       !__anonstruct_Edge_3_to_edges_32
                       !__anonstruct_Edge_3_from_edges_32)
                       (all_count g_6 f2_32 t2_32
                       __anonstruct_Graph_4_esize_g_14
                       __anonstruct_Graph_4_edges_g_14 (old
                       !__anonstruct_Edge_3_existent_0_edges_32) (old
                       !__anonstruct_Edge_3_to_edges_32) (old
                       !__anonstruct_Edge_3_from_edges_32)))))))))))) }
  
end
